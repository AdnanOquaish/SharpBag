<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharpBag</name>
    </assembly>
    <members>
        <member name="T:SharpBag.Torrent.BencodeDecoder">
            <summary>
            A class used for decoding Bencoding.
            </summary>
        </member>
        <member name="M:SharpBag.Torrent.BencodeDecoder.#ctor(System.String)">
            <summary>
            The main constructor.
            </summary>
            <param name="s">The bencoded string to decode.</param>
        </member>
        <member name="F:SharpBag.Torrent.BencodeDecoder.Index">
            <summary>
            Where the reader will start reading next.
            </summary>
        </member>
        <member name="F:SharpBag.Torrent.BencodeDecoder.BencodedString">
            <summary>
            The bencoded string.
            </summary>
        </member>
        <member name="M:SharpBag.Torrent.BencodeDecoder.Decode">
            <summary>
            Decodes the string.
            </summary>
            <returns>An array of root elements.</returns>
        </member>
        <member name="M:SharpBag.Torrent.BencodeDecoder.ReadElement">
            <summary>
            Reads and element.
            </summary>
            <returns>The element that was read.</returns>
        </member>
        <member name="M:SharpBag.Torrent.BencodeDecoder.ReadDictionary">
            <summary>
            Reads a dictionary.
            </summary>
            <returns>The dictionary that was read.</returns>
        </member>
        <member name="M:SharpBag.Torrent.BencodeDecoder.ReadList">
            <summary>
            Reads a list.
            </summary>
            <returns>The list that was read.</returns>
        </member>
        <member name="M:SharpBag.Torrent.BencodeDecoder.ReadInteger">
            <summary>
            Reads an integer.
            </summary>
            <returns>The integer that was read.</returns>
        </member>
        <member name="M:SharpBag.Torrent.BencodeDecoder.ReadString">
            <summary>
            Reads a string.
            </summary>
            <returns>The string that was read.</returns>
        </member>
        <member name="M:SharpBag.Torrent.BencodeDecoder.Error(System.Exception)">
            <summary>
            Generates an error.
            </summary>
            <param name="e">The inner exception.</param>
            <returns>An exception that can then be thrown.</returns>
        </member>
        <member name="M:SharpBag.Torrent.BencodeDecoder.Error">
            <summary>
            Generates an error.
            </summary>
            <returns>An exception that can then be thrown.</returns>
        </member>
        <member name="T:SharpBag.Torrent.BencodeDecoder.BencodingException">
            <summary>
            A bencoding exception.
            </summary>
        </member>
        <member name="M:SharpBag.Torrent.BencodeDecoder.BencodingException.#ctor">
            <summary>
            Creates a new BencodingException.
            </summary>
        </member>
        <member name="M:SharpBag.Torrent.BencodeDecoder.BencodingException.#ctor(System.String)">
            <summary>
            Creates a new BencodingException.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:SharpBag.Torrent.BencodeDecoder.BencodingException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new BencodingException.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="T:SharpBag.Torrent.BElement">
            <summary>
            An interface for bencoded elements.
            </summary>
        </member>
        <member name="M:SharpBag.Torrent.BElement.ToBencodedString">
            <summary>
            Generates the bencoded equivalent of the element.
            </summary>
            <returns>The bencoded equivalent of the element.</returns>
        </member>
        <member name="M:SharpBag.Torrent.BElement.ToBencodedString(System.Text.StringBuilder)">
            <summary>
            Generates the bencoded equivalent of the element.
            </summary>
            <param name="u">The StringBuilder to append to.</param>
            <returns>The bencoded equivalent of the element.</returns>
        </member>
        <member name="T:SharpBag.Torrent.BInteger">
            <summary>
            A bencode integer.
            </summary>
        </member>
        <member name="M:SharpBag.Torrent.BInteger.op_Implicit(System.Int32)~SharpBag.Torrent.BInteger">
            <summary>
            Allows you to set an integer to a BInteger.
            </summary>
            <param name="i">The integer.</param>
            <returns>The BInteger.</returns>
        </member>
        <member name="M:SharpBag.Torrent.BInteger.#ctor(System.Int64)">
            <summary>
            The main constructor.
            </summary>
            <param name="value">The value of the bencoded integer.</param>
        </member>
        <member name="M:SharpBag.Torrent.BInteger.ToBencodedString">
            <summary>
            Generates the bencoded equivalent of the integer.
            </summary>
            <returns>The bencoded equivalent of the integer.</returns>
        </member>
        <member name="M:SharpBag.Torrent.BInteger.ToBencodedString(System.Text.StringBuilder)">
            <summary>
            Generates the bencoded equivalent of the integer.
            </summary>
            <returns>The bencoded equivalent of the integer.</returns>
        </member>
        <member name="M:SharpBag.Torrent.BInteger.GetHashCode">
            <see cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:SharpBag.Torrent.BInteger.Equals(System.Object)">
            <see cref="M:System.Int32.Equals(System.Object)"/>
        </member>
        <member name="M:SharpBag.Torrent.BInteger.ToString">
            <see cref="M:System.Object.ToString"/>
        </member>
        <member name="M:SharpBag.Torrent.BInteger.CompareTo(SharpBag.Torrent.BInteger)">
            <see cref="M:System.IComparable.CompareTo(System.Object)"/>
        </member>
        <member name="P:SharpBag.Torrent.BInteger.Value">
            <summary>
            The value of the bencoded integer.
            </summary>
        </member>
        <member name="T:SharpBag.Torrent.BString">
            <summary>
            A bencode string.
            </summary>
        </member>
        <member name="M:SharpBag.Torrent.BString.op_Implicit(System.String)~SharpBag.Torrent.BString">
            <summary>
            Allows you to set a string to a BString.
            </summary>
            <param name="s">The string.</param>
            <returns>The BString.</returns>
        </member>
        <member name="M:SharpBag.Torrent.BString.#ctor(System.String)">
            <summary>
            The main constructor.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:SharpBag.Torrent.BString.ToBencodedString">
            <summary>
            Generates the bencoded equivalent of the string.
            </summary>
            <returns>The bencoded equivalent of the string.</returns>
        </member>
        <member name="M:SharpBag.Torrent.BString.ToBencodedString(System.Text.StringBuilder)">
            <summary>
            Generates the bencoded equivalent of the string.
            </summary>
            <param name="u">The StringBuilder to append to.</param>
            <returns>The bencoded equivalent of the string.</returns>
        </member>
        <member name="M:SharpBag.Torrent.BString.GetHashCode">
            <see cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:SharpBag.Torrent.BString.Equals(System.Object)">
            <see cref="M:System.String.Equals(System.Object)"/>
        </member>
        <member name="M:SharpBag.Torrent.BString.ToString">
            <see cref="M:System.Object.ToString"/>
        </member>
        <member name="M:SharpBag.Torrent.BString.CompareTo(SharpBag.Torrent.BString)">
            <see cref="M:System.IComparable.CompareTo(System.Object)"/>
        </member>
        <member name="P:SharpBag.Torrent.BString.Value">
            <summary>
            The value of the bencoded integer.
            </summary>
        </member>
        <member name="T:SharpBag.Torrent.BList">
            <summary>
            A bencode list.
            </summary>
        </member>
        <member name="M:SharpBag.Torrent.BList.ToBencodedString">
            <summary>
            Generates the bencoded equivalent of the list.
            </summary>
            <returns>The bencoded equivalent of the list.</returns>
        </member>
        <member name="M:SharpBag.Torrent.BList.ToBencodedString(System.Text.StringBuilder)">
            <summary>
            Generates the bencoded equivalent of the list.
            </summary>
            <param name="u">The StringBuilder to append to.</param>
            <returns>The bencoded equivalent of the list.</returns>
        </member>
        <member name="M:SharpBag.Torrent.BList.Add(System.String)">
            <summary>
            Adds the specified value to the list.
            </summary>
            <param name="value">The specified value.</param>
        </member>
        <member name="M:SharpBag.Torrent.BList.Add(System.Int32)">
            <summary>
            Adds the specified value to the list.
            </summary>
            <param name="value">The specified value.</param>
        </member>
        <member name="T:SharpBag.Torrent.BDictionary">
            <summary>
            A bencode dictionary.
            </summary>
        </member>
        <member name="M:SharpBag.Torrent.BDictionary.ToBencodedString">
            <summary>
            Generates the bencoded equivalent of the dictionary.
            </summary>
            <returns>The bencoded equivalent of the dictionary.</returns>
        </member>
        <member name="M:SharpBag.Torrent.BDictionary.ToBencodedString(System.Text.StringBuilder)">
            <summary>
            Generates the bencoded equivalent of the dictionary.
            </summary>
            <param name="u">The StringBuilder to append to.</param>
            <returns>The bencoded equivalent of the dictionary.</returns>
        </member>
        <member name="M:SharpBag.Torrent.BDictionary.Add(System.String,SharpBag.Torrent.BElement)">
            <summary>
            Adds the specified key-value pair to the dictionary.
            </summary>
            <param name="key">The specified key.</param>
            <param name="value">The specified value.</param>
        </member>
        <member name="M:SharpBag.Torrent.BDictionary.Add(System.String,System.String)">
            <summary>
            Adds the specified key-value pair to the dictionary.
            </summary>
            <param name="key">The specified key.</param>
            <param name="value">The specified value.</param>
        </member>
        <member name="M:SharpBag.Torrent.BDictionary.Add(System.String,System.Int32)">
            <summary>
            Adds the specified key-value pair to the dictionary.
            </summary>
            <param name="key">The specified key.</param>
            <param name="value">The specified value.</param>
        </member>
        <member name="P:SharpBag.Torrent.BDictionary.Item(System.String)">
            <summary>
            Gets or sets the value assosiated with the specified key.
            </summary>
            <param name="key">The key of the value to get or set.</param>
            <returns>The value assosiated with the specified key.</returns>
        </member>
        <member name="T:SharpBag.Database.GenericDB`1">
            <summary>
            A class for working with databases.
            </summary>
            <typeparam name="ConnT">The type of the connection.</typeparam>
        </member>
        <member name="M:SharpBag.Database.GenericDB`1.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            The constructor.
            </summary>
            <param name="server">The server to connect to.</param>
            <param name="schema">The default schema.</param>
            <param name="username">The username used to connect.</param>
            <param name="password">The password used to connect.</param>
        </member>
        <member name="M:SharpBag.Database.GenericDB`1.Connect">
            <summary>
            Connects, or reconnects, to the database.
            </summary>
        </member>
        <member name="M:SharpBag.Database.GenericDB`1.Query(System.String)">
            <summary>
            Send a query to the database.
            </summary>
            <param name="q">The query string.</param>
            <returns>A DataTable object with the results from the query.</returns>
        </member>
        <member name="M:SharpBag.Database.GenericDB`1.QuerySingle(System.String)">
            <summary>
            Send a query to the database and returns a scalar value.
            </summary>
            <param name="q">The query string.</param>
            <returns>The scalar value.</returns>
        </member>
        <member name="M:SharpBag.Database.GenericDB`1.QuerySingle``1(System.String)">
            <summary>
            Send a query to the database and returns a scalar value, as the type of T.
            </summary>
            <typeparam name="T">The type of the first column.</typeparam>
            <param name="q">The query string.</param>
            <returns>The scalar value, as the type of T.</returns>
        </member>
        <member name="M:SharpBag.Database.GenericDB`1.Execute(System.String)">
            <summary>
            Executes a query on the database and returns how many rows were affected.
            </summary>
            <param name="q">The query to execute.</param>
            <returns>How many rows were affected.</returns>
        </member>
        <member name="M:SharpBag.Database.GenericDB`1.Close">
            <summary>
            Closes the connection.
            </summary>
        </member>
        <member name="M:SharpBag.Database.GenericDB`1.DateTimeToSQL(System.DateTime)">
            <summary>
            Converts a DateTime object into an SQL compatible string.
            </summary>
            <param name="dt">The DateTime object.</param>
            <returns>An SQL formatted string.</returns>
        </member>
        <member name="M:SharpBag.Database.GenericDB`1.DataTableToSQL(System.Data.DataTable,System.String)">
            <summary>
            Generates a SQL insert query for the specified DataTable.
            </summary>
            <param name="dt">The DataTable.</param>
            <param name="schema">The schema to insert into.</param>
            <returns>An SQL string.</returns>
        </member>
        <member name="M:SharpBag.Database.GenericDB`1.CreateConnectionString">
            <summary>
            Creates connection string.
            </summary>
            <returns>The connection string.</returns>
        </member>
        <member name="M:SharpBag.Database.GenericDB`1.CreateCommand(System.String,`0)">
            <summary>
            Creates a query command.
            </summary>
            <param name="q">The query.</param>
            <param name="c">The connection.</param>
            <returns>The query command.</returns>
        </member>
        <member name="M:SharpBag.Database.GenericDB`1.SQLEscape(System.String)">
            <summary>
            Escapes a string for use in an SQL query.
            </summary>
            <param name="s">The string to escape.</param>
            <returns>The escaped string.</returns>
        </member>
        <member name="P:SharpBag.Database.GenericDB`1.Server">
            <summary>
            The server to connect to.
            </summary>
        </member>
        <member name="P:SharpBag.Database.GenericDB`1.Schema">
            <summary>
            The default schema.
            </summary>
        </member>
        <member name="P:SharpBag.Database.GenericDB`1.Username">
            <summary>
            The username used to connect.
            </summary>
        </member>
        <member name="P:SharpBag.Database.GenericDB`1.Password">
            <summary>
            The password used to connect.
            </summary>
        </member>
        <member name="P:SharpBag.Database.GenericDB`1.CommandTimeout">
            <summary>
            The time before the connection times out.
            </summary>
        </member>
        <member name="P:SharpBag.Database.GenericDB`1.State">
            <summary>
            The state of the connection.
            </summary>
        </member>
        <member name="P:SharpBag.Database.GenericDB`1.Connection">
            <summary>
            The connection.
            </summary>
        </member>
        <member name="T:SharpBag.Comparers.AlphaNumberComparer">
            <summary>
            A comparer that compares a string containing numbers.
            </summary>
        </member>
        <member name="M:SharpBag.Comparers.AlphaNumberComparer.#ctor(SharpBag.Comparers.AlphaNumberSettings)">
            <summary>
            The constructor.
            </summary>
            <param name="location">The location of the number.</param>
        </member>
        <member name="M:SharpBag.Comparers.AlphaNumberComparer.Compare(System.String,System.String)">
            <see cref="M:System.Collections.Generic.IComparer`1.Compare(`0,`0)"/>
        </member>
        <member name="M:SharpBag.Comparers.AlphaNumberComparer.FindTrailingNumber(System.String)">
            <summary>
            Finds a trailing number.
            </summary>
            <param name="s">The string to search in.</param>
            <returns>The number.</returns>
        </member>
        <member name="M:SharpBag.Comparers.AlphaNumberComparer.FindLeadingNumber(System.String)">
            <summary>
            Finds a leading number.
            </summary>
            <param name="s">The string to search in.</param>
            <returns>The number.</returns>
        </member>
        <member name="P:SharpBag.Comparers.AlphaNumberComparer.Location">
            <summary>
            The location of the number.
            </summary>
        </member>
        <member name="T:SharpBag.Algorithms.Sorting.SortOrder">
            <summary>
            The order to sort in.
            </summary>
        </member>
        <member name="F:SharpBag.Algorithms.Sorting.SortOrder.Ascending">
            <summary>
            Sort ascending.
            </summary>
        </member>
        <member name="F:SharpBag.Algorithms.Sorting.SortOrder.Descending">
            <summary>
            Sort descending.
            </summary>
        </member>
        <member name="T:SharpBag.Games.CardStack">
            <summary>
            A class representing a stack og cards.
            </summary>
        </member>
        <member name="M:SharpBag.Games.CardStack.#ctor">
            <summary>
            The main constructor.
            </summary>
        </member>
        <member name="M:SharpBag.Games.CardStack.#ctor(System.Boolean)">
            <summary>
            The main constructor.
            </summary>
            <param name="shuffle">Whether or not to shuffle the stack.</param>
        </member>
        <member name="M:SharpBag.Games.CardStack.Reset">
            <summary>
            Resets the card stack.
            </summary>
        </member>
        <member name="M:SharpBag.Games.CardStack.Draw">
            <summary>
            Draws the top card from the stack.
            </summary>
            <returns>The next card in the stack.</returns>
        </member>
        <member name="M:SharpBag.Games.CardStack.Shuffle">
            <summary>
            Shuffles the stack.
            </summary>
        </member>
        <member name="M:SharpBag.Games.CardStack.Draw(System.Boolean)">
            <summary>
            Draws the top card from the stack.
            </summary>
            <param name="isDown">Whether or not the card drawn should be face down or face up.</param>
            <returns>The next card in the stack.</returns>
        </member>
        <member name="T:SharpBag.Database.MSSqlDB">
            <summary>
            A class for working with MySQL databases.
            </summary>
        </member>
        <member name="M:SharpBag.Database.MSSqlDB.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            The constructor.
            </summary>
            <param name="server">The server to connect to.</param>
            <param name="schema">The default schema.</param>
            <param name="username">The username used to connect.</param>
            <param name="password">The password used to connect.</param>
        </member>
        <member name="M:SharpBag.Database.MSSqlDB.SQLEscape(System.String)">
            <summary>
            Escapes a string for use in an SQL query.
            </summary>
            <param name="s">The string to escape.</param>
            <returns>The escaped string.</returns>
        </member>
        <member name="M:SharpBag.Database.MSSqlDB.CreateCommand(System.String,System.Data.SqlClient.SqlConnection)">
            <summary>
            Creates a query command.
            </summary>
            <param name="q">The query.</param>
            <param name="c">The connection.</param>
            <returns>The query command.</returns>
        </member>
        <member name="M:SharpBag.Database.MSSqlDB.CreateConnectionString">
            <summary>
            Creates connection string.
            </summary>
            <returns>The connection string.</returns>
        </member>
        <member name="T:SharpBag.Patterns.EagerSingleton`1">
            <summary>
            An eager singleton.
            </summary>
            <typeparam name="T">The type of the object, the singleton will wrap.</typeparam>
        </member>
        <member name="T:SharpBag.Patterns.Singleton`1">
            <summary>
            A singleton.
            </summary>
            <typeparam name="T">The type of the object, the singleton will wrap.</typeparam>
        </member>
        <member name="M:SharpBag.Patterns.Singleton`1.#ctor">
            <summary>
            The constructor.
            </summary>
        </member>
        <member name="M:SharpBag.Patterns.Singleton`1.#ctor(System.Action{`0})">
            <summary>
            The constructor.
            </summary>
            <param name="initializeAction">An action to initialize the object.</param>
        </member>
        <member name="M:SharpBag.Patterns.Singleton`1.GetInstance">
            <summary>
            Gets the object instance.
            </summary>
            <returns>The object instance.</returns>
        </member>
        <member name="P:SharpBag.Patterns.Singleton`1.UniqueInstance">
            <summary>
            The unique instance of the object.
            </summary>
        </member>
        <member name="P:SharpBag.Patterns.Singleton`1.InitializeAction">
            <summary>
            An action to initialize the object.
            </summary>
        </member>
        <member name="M:SharpBag.Patterns.EagerSingleton`1.#ctor">
            <summary>
            The constructor.
            </summary>
        </member>
        <member name="M:SharpBag.Patterns.EagerSingleton`1.#ctor(System.Action{`0})">
            <summary>
            The constructor.
            </summary>
            <param name="initializeAction">An action to initialize the object.</param>
        </member>
        <member name="M:SharpBag.Patterns.EagerSingleton`1.GetInstance">
            <summary>
            Gets the object instance.
            </summary>
            <returns>The object instance.</returns>
        </member>
        <member name="T:SharpBag.Net.TcpServer">
            <summary>
            A class that manages a multithreaded Tcp server.
            </summary>
        </member>
        <member name="M:SharpBag.Net.TcpServer.Create(System.Collections.Generic.IEnumerable{System.Int32},System.Int32)">
            <summary>
            Creates a TcpServer.
            </summary>
            <param name="ports">A collection of ports. The first free port in the collection will be used.</param>
            <param name="checkInterval">The interval to check for new connections.</param>
            <returns>A new TcpServer instance.</returns>
        </member>
        <member name="M:SharpBag.Net.TcpServer.#ctor(System.Net.Sockets.TcpListener,System.Int32,System.Int32)">
            <summary>
            The constructor.
            </summary>
            <param name="listener">The TcpListener.</param>
            <param name="checkInterval">The interval to check for incoming clients.</param>
            <param name="receiveTimeout">The time, in milliseconds, before a timeout occurs when reading data from a client.</param>
        </member>
        <member name="M:SharpBag.Net.TcpServer.Stop">
            <summary>
            Stops listening for incoming clients, stops the listening thread and closes the TcpListener.
            </summary>
        </member>
        <member name="M:SharpBag.Net.TcpServer.Listen">
            <summary>
            Listen for incoming clients.
            </summary>
        </member>
        <member name="M:SharpBag.Net.TcpServer.Dispose">
            <see cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="P:SharpBag.Net.TcpServer.Thread">
            <summary>
            The thread to listen for incoming clients.
            </summary>
        </member>
        <member name="P:SharpBag.Net.TcpServer.Listener">
            <summary>
            The TcpListener.
            </summary>
        </member>
        <member name="P:SharpBag.Net.TcpServer.Listening">
            <summary>
            Whether the server is listening for incoming clients.
            </summary>
        </member>
        <member name="P:SharpBag.Net.TcpServer.CheckInterval">
            <summary>
            The interval, in milliseconds, to check for incoming clients.
            </summary>
        </member>
        <member name="E:SharpBag.Net.TcpServer.ClientReceived">
            <summary>
            An event that is fired when a client is received.
            </summary>
        </member>
        <member name="T:SharpBag.Logging.InteractiveConsole">
            <summary>
            A class used for managing the console window, so that the program can both read from the console and write into the console at the samt time.
            </summary>
        </member>
        <member name="F:SharpBag.Logging.InteractiveConsole.Exit">
            <summary>
            Can be set to true to shut down the main reading thread and all readers.
            </summary>
        </member>
        <member name="F:SharpBag.Logging.InteractiveConsole.Reading">
            <summary>
            Whether or not there is a reading going on.
            </summary>
        </member>
        <member name="F:SharpBag.Logging.InteractiveConsole.Command">
            <summary>
            The command that is currently being written into the console.
            </summary>
        </member>
        <member name="F:SharpBag.Logging.InteractiveConsole.ReaderThread">
            <summary>
            The main reader thread.
            </summary>
        </member>
        <member name="F:SharpBag.Logging.InteractiveConsole.ValidInput">
            <summary>
            Valid input characters.
            </summary>
        </member>
        <member name="M:SharpBag.Logging.InteractiveConsole.#ctor(System.String)">
            <summary>
            The main constructor.
            </summary>
            <param name="commandStart">The start of the command line.</param>
        </member>
        <member name="M:SharpBag.Logging.InteractiveConsole.Finalize">
            <summary>
            The main deconstructor.
            </summary>
        </member>
        <member name="M:SharpBag.Logging.InteractiveConsole.Stop">
            <summary>
            Stop all readers and reader threads.
            Note: This should always be called before application shutdown to make sure all threads are terminated.
            </summary>
        </member>
        <member name="M:SharpBag.Logging.InteractiveConsole.ReadCommandAsync">
            <summary>
            Reads commands asynchronously and fires the OnCommandEntered event when a command has been entered.
            </summary>
        </member>
        <member name="M:SharpBag.Logging.InteractiveConsole._ReadCommandAsync">
            <summary>
            Reads commands asynchronously and fires the OnCommandEntered event when a command has been entered.
            </summary>
        </member>
        <member name="M:SharpBag.Logging.InteractiveConsole.ReadCommand">
            <summary>
            Reads a command and returns it as a string.
            Note: This method will not return anything until the command is entered. Use ReadCommandAsync to read commands asynchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpBag.Logging.InteractiveConsole.WriteLine(System.Object)">
            <summary>
            Writes a string to the console.
            Note: This should be used instead of Console.WriteLine and Console.Write.
            </summary>
            <param name="o"></param>
        </member>
        <member name="E:SharpBag.Logging.InteractiveConsole.OnCommandEntered">
            <summary>
            An event that will be fired when a user enters a command into the console window.
            </summary>
        </member>
        <member name="P:SharpBag.Logging.InteractiveConsole.CommandStart">
            <summary>
            The start of the command line.
            </summary>
        </member>
        <member name="T:SharpBag.Logging.InteractiveConsole.CommandEnteredEvent">
            <summary>
            A delegate that can be called when a command is entered.
            </summary>
            <param name="command">The command that was entered.</param>
        </member>
        <member name="T:SharpBag.FK.Num2WordsIS">
            <summary>
            Converts numbers to words.
            </summary>
        </member>
        <member name="M:SharpBag.FK.Num2WordsIS.ToWords(System.Int32)">
            <summary>
            Converts the specified number to words.
            </summary>
            <param name="i">The specified number.</param>
            <returns>The words.</returns>
        </member>
        <member name="T:SharpBag.FK.MVC.FKActionAttribute">
            <summary>
            A controller action.
            </summary>
        </member>
        <member name="M:SharpBag.FK.MVC.FKActionAttribute.#ctor(System.String)">
            <summary>
            The constructor.
            </summary>
            <param name="name">The name of the action.</param>
        </member>
        <member name="P:SharpBag.FK.MVC.FKActionAttribute.Name">
            <summary>
            The name of the action.
            </summary>
        </member>
        <member name="P:SharpBag.FK.MVC.FKActionAttribute.Description">
            <summary>
            A description of the action.
            </summary>
        </member>
        <member name="P:SharpBag.FK.MVC.FKActionAttribute.Finished">
            <summary>
            Whether the action is finished.
            </summary>
        </member>
        <member name="P:SharpBag.FK.MVC.FKActionAttribute.Timed">
            <summary>
            Whether the action should be timed.
            </summary>
        </member>
        <member name="T:SharpBag.Algorithms.PriorityQueueItem`1">
            <summary>
            An item in a priority queue.
            </summary>
            <typeparam name="T">The type of the item.</typeparam>
        </member>
        <member name="M:SharpBag.Algorithms.PriorityQueueItem`1.#ctor(`0,System.Int32)">
            <summary>
            The constructor.
            </summary>
            <param name="item">The item.</param>
            <param name="priority">The priority. Defaults to 0.</param>
        </member>
        <member name="M:SharpBag.Algorithms.PriorityQueueItem`1.ToString">
            <see cref="M:System.Object.ToString"/>
        </member>
        <member name="P:SharpBag.Algorithms.PriorityQueueItem`1.Priority">
            <summary>
            The priority of the item.
            </summary>
        </member>
        <member name="P:SharpBag.Algorithms.PriorityQueueItem`1.Item">
            <summary>
            The item.
            </summary>
        </member>
        <member name="T:SharpBag.Math.Converters.BaseConverter">
            <summary>
            Converts numbers between bases.
            </summary>
        </member>
        <member name="M:SharpBag.Math.Converters.BaseConverter.ToBase(System.String,System.Int32,System.Int32)">
            <summary>
            Converts the specified number from the specified start base to the specified target base.
            </summary>
            <param name="number">The number as a string.</param>
            <param name="start_base">The base of the number.</param>
            <param name="target_base">The base to convert to.</param>
            <returns>The specified number in the specified target base.</returns>
            <remarks>Bases must be in the range 2 to 36.</remarks>
        </member>
        <member name="M:SharpBag.Math.Converters.BaseConverter.ToBase10(System.String,System.Int32)">
            <summary>
            Converts the specified number from the specified start base to base 10.
            </summary>
            <param name="number">The number as a string.</param>
            <param name="start_base">The base of the number.</param>
            <returns>The number in base 10.</returns>
            <remarks>Bases must be in the range 2 to 36.</remarks>
        </member>
        <member name="M:SharpBag.Math.Converters.BaseConverter.FromBase10(System.Int32,System.Int32)">
            <summary>
            Converts the specified base 10 number to the specified target base.
            </summary>
            <param name="number">The base 10 number.</param>
            <param name="target_base">The target base.</param>
            <returns>The target in the target base.</returns>
            <remarks>Bases must be in the range 2 to 36.</remarks>
        </member>
        <member name="T:SharpBag.IO.Serialization">
            <summary>
            A static class used for object serialization.
            </summary>
        </member>
        <member name="M:SharpBag.IO.Serialization.Serialize(System.String,System.Object)">
            <summary>
            Serializes an object using a binary serializer.
            </summary>
            <param name="fileName">The file to serialize to.</param>
            <param name="obj">The object to serialize.</param>
        </member>
        <member name="M:SharpBag.IO.Serialization.Deserialize``1(System.String)">
            <summary>
            Deserializes an object using a binary deserializer.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="fileName">The file to deserialize from.</param>
            <returns>The object.</returns>
        </member>
        <member name="M:SharpBag.IO.Serialization.XmlSerialize``1(System.String,``0)">
            <summary>
            Serializes an object using an xml serializer.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="fileName">The file to serialize to.</param>
            <param name="obj">The object to serialize.</param>
        </member>
        <member name="M:SharpBag.IO.Serialization.XmlDeserialize``1(System.String)">
            <summary>
            Deserializes an object using an xml deserializer.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="fileName">The file to deserialize from.</param>
            <returns>The object.</returns>
        </member>
        <member name="T:SharpBag.Database.DatabaseExtensions">
            <summary>
            Extension methods for the BagDB class.
            </summary>
        </member>
        <member name="M:SharpBag.Database.DatabaseExtensions.ToSQLDateTime(System.DateTime)">
            <summary>
            Converts a DateTime object into a SQL compatible string.
            </summary>
            <param name="dt">The current instance.</param>
            <returns>An SQL formatted string.</returns>
        </member>
        <member name="M:SharpBag.Database.DatabaseExtensions.InsertInto``1(System.Data.DataTable,SharpBag.Database.GenericDB{``0})">
            <summary>
            Inserts the current DataTable instance into the specified database.
            </summary>
            <param name="dt">The current instance.</param>
            <param name="db">The database to insert into.</param>
            <returns>How many rows were affected.</returns>
        </member>
        <member name="T:SharpBag.Patterns.LazySingleton`1">
            <summary>
            A lazy singleton.
            </summary>
            <typeparam name="T">The type of the object, the singleton will wrap.</typeparam>
        </member>
        <member name="M:SharpBag.Patterns.LazySingleton`1.#ctor">
            <summary>
            The constructor.
            </summary>
        </member>
        <member name="M:SharpBag.Patterns.LazySingleton`1.#ctor(System.Action{`0})">
            <summary>
            The constructor.
            </summary>
            <param name="initializeAction">An action to initialize the object.</param>
        </member>
        <member name="M:SharpBag.Patterns.LazySingleton`1.GetInstance">
            <summary>
            Gets the object instance.
            </summary>
            <returns>The object instance.</returns>
        </member>
        <member name="T:SharpBag.Math.Sources">
            <summary>
            A class for number sources.
            </summary>
        </member>
        <member name="P:SharpBag.Math.Sources.Fibonacci">
            <summary>
            An endless source that will return fibonacci numbers.
            </summary>
        </member>
        <member name="P:SharpBag.Math.Sources.Fibonacci64">
            <summary>
            An endless source that will return fibonacci numbers.
            </summary>
        </member>
        <member name="P:SharpBag.Math.Sources.FibonacciBig">
            <summary>
            An endless source that will return fibonacci numbers.
            </summary>
        </member>
        <member name="P:SharpBag.Math.Sources.Primes">
            <summary>
            A possibly endless source that will return prime numbers.
            </summary>
        </member>
        <member name="P:SharpBag.Math.Sources.Primes64">
            <summary>
            A possibly endless source that will return prime numbers.
            </summary>
        </member>
        <member name="P:SharpBag.Math.Sources.PrimesBig">
            <summary>
            A possibly endless source that will return prime numbers.
            </summary>
        </member>
        <member name="P:SharpBag.Math.Sources.TriangleNumbers">
            <summary>
            An endless source for triangle numbers.
            </summary>
        </member>
        <member name="P:SharpBag.Math.Sources.TriangleNumbers64">
            <summary>
            An endless source for triangle numbers.
            </summary>
        </member>
        <member name="P:SharpBag.Math.Sources.TriangleNumbersBig">
            <summary>
            An endless source for triangle numbers.
            </summary>
        </member>
        <member name="P:SharpBag.Math.Sources.PerfectNumbers">
            <summary>
            An endless source for perfect numbers.
            </summary>
        </member>
        <member name="P:SharpBag.Math.Sources.PerfectNumbers64">
            <summary>
            An endless source for perfect numbers.
            </summary>
        </member>
        <member name="P:SharpBag.Math.Sources.PerfectNumbersBig">
            <summary>
            An endless source for perfect numbers.
            </summary>
        </member>
        <member name="P:SharpBag.Math.Sources.DeficientNumbers">
            <summary>
            An endless source for deficient numbers.
            </summary>
        </member>
        <member name="P:SharpBag.Math.Sources.DeficientNumbers64">
            <summary>
            An endless source for deficient numbers.
            </summary>
        </member>
        <member name="P:SharpBag.Math.Sources.DeficientNumbersBig">
            <summary>
            An endless source for deficient numbers.
            </summary>
        </member>
        <member name="P:SharpBag.Math.Sources.AbundantNumbers">
            <summary>
            An endless source for abundant number
            </summary>
        </member>
        <member name="P:SharpBag.Math.Sources.AbundantNumbers64">
            <summary>
            An endless source for abundant number
            </summary>
        </member>
        <member name="P:SharpBag.Math.Sources.AbundantNumbersBig">
            <summary>
            An endless source for abundant number
            </summary>
        </member>
        <member name="T:SharpBag.Games.CardType">
            <summary>
            An enumeration containing types of cards.
            </summary>
        </member>
        <member name="F:SharpBag.Games.CardType.Heart">
            <summary>
            A heart.
            </summary>
        </member>
        <member name="F:SharpBag.Games.CardType.Spade">
            <summary>
            A spade.
            </summary>
        </member>
        <member name="F:SharpBag.Games.CardType.Diamond">
            <summary>
            A diamond.
            </summary>
        </member>
        <member name="F:SharpBag.Games.CardType.Leaf">
            <summary>
            A leaf.
            </summary>
        </member>
        <member name="T:SharpBag.Games.CardValue">
            <summary>
            An enumeration containing values of cards.
            </summary>
        </member>
        <member name="F:SharpBag.Games.CardValue.Ace">
            <summary>
            An ace.
            </summary>
        </member>
        <member name="F:SharpBag.Games.CardValue.Two">
            <summary>
            A two.
            </summary>
        </member>
        <member name="F:SharpBag.Games.CardValue.Three">
            <summary>
            A three.
            </summary>
        </member>
        <member name="F:SharpBag.Games.CardValue.Four">
            <summary>
            A four.
            </summary>
        </member>
        <member name="F:SharpBag.Games.CardValue.Five">
            <summary>
            A five.
            </summary>
        </member>
        <member name="F:SharpBag.Games.CardValue.Six">
            <summary>
            A six.
            </summary>
        </member>
        <member name="F:SharpBag.Games.CardValue.Seven">
            <summary>
            A seven.
            </summary>
        </member>
        <member name="F:SharpBag.Games.CardValue.Eight">
            <summary>
            An eight.
            </summary>
        </member>
        <member name="F:SharpBag.Games.CardValue.Nine">
            <summary>
            A nine.
            </summary>
        </member>
        <member name="F:SharpBag.Games.CardValue.Ten">
            <summary>
            A ten.
            </summary>
        </member>
        <member name="F:SharpBag.Games.CardValue.Jack">
            <summary>
            A jack.
            </summary>
        </member>
        <member name="F:SharpBag.Games.CardValue.Queen">
            <summary>
            A queen.
            </summary>
        </member>
        <member name="F:SharpBag.Games.CardValue.King">
            <summary>
            A king.
            </summary>
        </member>
        <member name="T:SharpBag.Games.Card">
            <summary>
            A class representing a Card in a Card Game.
            </summary>
        </member>
        <member name="M:SharpBag.Games.Card.#ctor(SharpBag.Games.CardType,SharpBag.Games.CardValue)">
            <summary>
            The main constructor.
            </summary>
            <param name="type">The type of the card.</param>
            <param name="value">The value of the card.</param>
        </member>
        <member name="M:SharpBag.Games.Card.#ctor(SharpBag.Games.CardType,SharpBag.Games.CardValue,System.Boolean)">
            <summary>
            The main constructor.
            </summary>
            <param name="type">The type of the card.</param>
            <param name="value">The value of the card.</param>
            <param name="isDown">Whether the card is face down or face up.</param>
        </member>
        <member name="M:SharpBag.Games.Card.GetValue">
            <summary>
            Gets the value of the card.
            </summary>
            <returns>The value of the card.</returns>
        </member>
        <member name="M:SharpBag.Games.Card.GetValue(System.Collections.Generic.Dictionary{SharpBag.Games.CardValue,System.Int32})">
            <summary>
            Gets the value of the card, using the specified rules.
            </summary>
            <param name="values">The values.</param>
            <returns>The value of the card.</returns>
        </member>
        <member name="P:SharpBag.Games.Card.Type">
            <summary>
            The type of the card.
            </summary>
        </member>
        <member name="P:SharpBag.Games.Card.Value">
            <summary>
            The value of the card.
            </summary>
        </member>
        <member name="P:SharpBag.Games.Card.IsDown">
            <summary>
            Whether the card is face down or face up.
            </summary>
        </member>
        <member name="E:SharpBag.Games.Card.CardTurned">
            <summary>
            An event that is fired when a card is turned.
            </summary>
        </member>
        <member name="T:SharpBag.FK.Kennitala">
            <summary>
            Klasi fyrir kennitölur.
            </summary>
        </member>
        <member name="F:SharpBag.FK.Kennitala.Dagur">
            <summary>
            Fyrir hvaða dag er kennitalan.
            </summary>
        </member>
        <member name="F:SharpBag.FK.Kennitala.Manudur">
            <summary>
            Fyrir hvaða mánuð er kennitalan.
            </summary>
        </member>
        <member name="F:SharpBag.FK.Kennitala.Ar">
            <summary>
            Fyrir hvaða ár er kennitalan.
            </summary>
        </member>
        <member name="F:SharpBag.FK.Kennitala.Lokatala">
            <summary>
            4 stafa lokatala kennitölunar.
            </summary>
        </member>
        <member name="F:SharpBag.FK.Kennitala.ErILagi">
            <summary>
            Hvort kennitalan sé gild.
            </summary>
        </member>
        <member name="F:SharpBag.FK.Kennitala.Stjornumerki">
            <summary>
            Stjörnumerki kennitölunar.
            </summary>
        </member>
        <member name="M:SharpBag.FK.Kennitala.#ctor(System.String)">
            <summary>
            Smiður kennitölu-klasans.
            </summary>
            <param name="kt">Kennitalan sem strengur (ddmmyy-nnnn).</param>
        </member>
        <member name="M:SharpBag.FK.Kennitala.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Smiður kennitölu-klasans.
            </summary>
            <param name="ar">Ár kennitölunnar.</param>
            <param name="manudur">Mánuður kennitölunnar.</param>
            <param name="dagur">Dagur kennitölunnar.</param>
            <param name="lokatala">4 stafa lokatala kennitölunnar.</param>
        </member>
        <member name="M:SharpBag.FK.Kennitala.ErRett(System.String)">
            <summary>
            Tekur inn streng sem inniheldur hugsanlega kennitölu og skilar true ef það er kennitala; annars false.
            </summary>
            <param name="kt">Strengur sem inniheldur hugsanlega kennitölu.</param>
            <returns>True ef strengurinn er kennitala; annars false.</returns>
        </member>
        <member name="M:SharpBag.FK.Kennitala.ToString(System.Boolean)">
            <summary>
            Skilar kennitölunni með eða án - sem streng.
            </summary>
            <param name="skiptir">Hvort nota eigi - eða ekki.</param>
            <returns>Kennitalan sem strengur.</returns>
        </member>
        <member name="M:SharpBag.FK.Kennitala.ToString">
            <summary>
            Skilar kennitölunni með - sem streng.
            </summary>
            <returns>Kennitalan sem strengur.</returns>
        </member>
        <member name="T:SharpBag.FK.DrawObjects">
            <summary>
            Allskonar method til að teikna hluti
            </summary>
        </member>
        <member name="M:SharpBag.FK.DrawObjects.Triangle(System.Int32,System.String,System.String,SharpBag.FK.DrawObjects.TriangleType)">
            <summary>
            Teiknar þríhyrninga
            </summary>
            <param name="height">Hæð þríhyrningsins</param>
            <param name="s">Strengurinn sem er notaður inní þríhyrningnum</param>
            <param name="p">Strengurinn sem er notaður fyrir utan þríhyrninginn</param>
            <param name="TT">Týpan af þríhyrningi</param>
            <returns>Þríhyrningurinn</returns>
            <example>Triangle(5, "*", " ", TriangleType.Top)</example>
        </member>
        <member name="M:SharpBag.FK.DrawObjects.Square(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            Teiknar kassa
            </summary>
            <param name="height">Hæðin á kassanum</param>
            <param name="width">Breyddin á kassanum</param>
            <param name="s">Strengurinn sem er inní kassanum</param>
            <param name="p">Strengurinn sem er innæi kassanum ef hann er ekki fylltur</param>
            <param name="filled">Bool um hvort hann sé fylltur eða ekki</param>
            <returns>Kassinn</returns>
            <example>Square(5, 4, "*", " ", false)</example>
        </member>
        <member name="T:SharpBag.FK.DrawObjects.TriangleType">
            <summary>
            Gerðir af þríhyrningum. Heitir eftir því í hvaða horni eða brún á kassa þríhyrningurinn væri.
            </summary>
        </member>
        <member name="F:SharpBag.FK.DrawObjects.TriangleType.Top">
            <summary>
            Þríhyrningur sem er með langhliðina á toppnum.
            </summary>
        </member>
        <member name="F:SharpBag.FK.DrawObjects.TriangleType.Left">
            <summary>
            Þríhyrningur sem er með langhliðina til vinstri.
            </summary>
        </member>
        <member name="F:SharpBag.FK.DrawObjects.TriangleType.Right">
            <summary>
            Þríhyrningur sem er með langhliðina til hægri.
            </summary>
        </member>
        <member name="F:SharpBag.FK.DrawObjects.TriangleType.Bottom">
            <summary>
            Þríhyrningur sem er með langhliðina á botninum.
            </summary>
        </member>
        <member name="F:SharpBag.FK.DrawObjects.TriangleType.TopLeft">
            <summary>
            Þríhyrningur sem er með bendir upp í efra vinstra hornið.
            </summary>
        </member>
        <member name="F:SharpBag.FK.DrawObjects.TriangleType.TopRight">
            <summary>
            Þríhyrningur sem er með bendir upp í efra hægra hornið.
            </summary>
        </member>
        <member name="F:SharpBag.FK.DrawObjects.TriangleType.BottomLeft">
            <summary>
            Þríhyrningur sem er með bendir upp í neðra vinstra hornið.
            </summary>
        </member>
        <member name="F:SharpBag.FK.DrawObjects.TriangleType.BottomRight">
            <summary>
            Þríhyrningur sem er með bendir upp í neðra hægra hornið.
            </summary>
        </member>
        <member name="T:SharpBag.Math.PascalTriangle">
            <summary>
            A static class with methods concerning the Pascal triangle.
            </summary>
        </member>
        <member name="M:SharpBag.Math.PascalTriangle.GetEntry(System.Int32,System.Int32)">
            <summary>
            Gets an entry at the specified row and column.
            </summary>
            <param name="row">The specified row.</param>
            <param name="column">The specified column.</param>
            <returns>The value at the specified row and column.</returns>
        </member>
        <member name="T:SharpBag.Extensions">
            <summary>
            A static class containing static extension methods for various types.
            </summary>
        </member>
        <member name="M:SharpBag.Extensions.Iter``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Performs an action on each element of the enumerable.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="source">The current instance.</param>
            <param name="action">The action to perform on each element.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:SharpBag.Extensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Performs an action on each element of the enumerable.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="source">The current instance.</param>
            <param name="action">The action to perform on each element.</param>
        </member>
        <member name="M:SharpBag.Extensions.To(System.Int32,System.Int32,System.Int32)">
            <summary>
            Generates numbers that range from the value of the current instance to the value of end.
            </summary>
            <param name="start">The current instance.</param>
            <param name="end">The number to end at.</param>
            <param name="step">The step to take on each iteration.</param>
            <returns>An enumerable containing the numbers.</returns>
        </member>
        <member name="M:SharpBag.Extensions.To(System.Int64,System.Int64,System.Int64)">
            <summary>
            Generates numbers that range from the value of the current instance to the value of end.
            </summary>
            <param name="start">The current instance.</param>
            <param name="end">The number to end at.</param>
            <param name="step">The step to take on each iteration.</param>
            <returns>An enumerable containing the numbers.</returns>
        </member>
        <member name="M:SharpBag.Extensions.To(System.Numerics.BigInteger,System.Numerics.BigInteger)">
            <summary>
            Generates numbers that range from the value of the current instance to the value of end.
            </summary>
            <param name="start">The current instance.</param>
            <param name="end">The number to end at.</param>
            <returns>An enumerable containing the numbers.</returns>
        </member>
        <member name="M:SharpBag.Extensions.To(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger)">
            <summary>
            Generates numbers that range from the value of the current instance to the value of end.
            </summary>
            <param name="start">The current instance.</param>
            <param name="end">The number to end at.</param>
            <param name="step">The step to take on each iteration.</param>
            <returns>An enumerable containing the numbers.</returns>
        </member>
        <member name="M:SharpBag.Extensions.To(System.Char,System.Char,System.Int32)">
            <summary>
            Generates chars that range from the current instance to end.
            </summary>
            <param name="start">The current instance.</param>
            <param name="end">The char to end at.</param>
            <param name="step">The step to take on each iteration.</param>
            <returns>An enumerable containing the numbers.</returns>
        </member>
        <member name="M:SharpBag.Extensions.Times``1(System.Int32,System.Func{``0})">
            <summary>
            Executes the specified function N times where N is the value of the current instance.
            </summary>
            <typeparam name="T">The type of the value returned from the function.</typeparam>
            <param name="i">The current instance.</param>
            <param name="f">The function to execute.</param>
            <returns>An enumerable with the returned values of the function.</returns>
        </member>
        <member name="M:SharpBag.Extensions.Execute``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Immediately executes the current instance.
            </summary>
            <typeparam name="T">The type of the elements in the enumerable.</typeparam>
            <param name="sequence">The current instance.</param>
        </member>
        <member name="M:SharpBag.Extensions.GetByPercent``1(``0[],System.Double)">
            <summary>
            Gets the element in the array located at the specified percent.
            </summary>
            <typeparam name="T">The type of the elements in the array.</typeparam>
            <param name="array">The current instance.</param>
            <param name="percent">The percent.</param>
            <returns>The element in the array located at the specified percent.</returns>
        </member>
        <member name="M:SharpBag.Extensions.AsEnumerable``1(``0[0:,0:])">
            <summary>
            Returns an enumerable of all the items in the current instance.
            </summary>
            <typeparam name="T">The type of the items.</typeparam>
            <param name="multiDArray">The current instance.</param>
            <returns>An enumerable of all the items in the current instance.</returns>
        </member>
        <member name="M:SharpBag.Extensions.AsEnumerable``1(``0[0:,0:,0:])">
            <summary>
            Returns an enumerable of all the items in the current instance.
            </summary>
            <typeparam name="T">The type of the items.</typeparam>
            <param name="multiDArray">The current instance.</param>
            <returns>An enumerable of all the items in the current instance.</returns>
        </member>
        <member name="M:SharpBag.Extensions.ContainsArray(System.Array,System.Object)">
            <summary>
            Checks whether the array contains the specified object.
            </summary>
            <param name="a">The array.</param>
            <param name="o">The object.</param>
            <returns>Whether the array contains the specified object.</returns>
        </member>
        <member name="M:SharpBag.Extensions.IfNotNull``1(``0,System.Action{``0})">
            <summary>
            Invokes the specified action if the current object is not null.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="obj">The object.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:SharpBag.Extensions.IfNotNull``1(``0,System.Action)">
            <summary>
            Invokes the specified action if the current object is not null.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="obj">The object.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:SharpBag.Extensions.AsEnumerable``1(System.Collections.Generic.IEnumerator{``0})">
            <summary>
            Converts the current instance into an enumerable.
            </summary>
            <typeparam name="T">The type of elements in the current instance.</typeparam>
            <param name="e">The current instance.</param>
            <returns>An enumerable.</returns>
        </member>
        <member name="M:SharpBag.Extensions.AsEnumerable(System.Collections.IEnumerator)">
            <summary>
            Converts the current instance into an enumerable.
            </summary>
            <param name="e">The current instance.</param>
            <returns>An enumerable.</returns>
        </member>
        <member name="M:SharpBag.Extensions.Add``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1,System.Boolean)">
            <summary>
            Adds the specified key and value to the dictionary.
            If overwrite is true and the dictionary contains the specified key, the key's value will be overwritten.
            If overwrite is false and the dictionary contains the specified key, an exception won't be thrown.
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
            <param name="D">The dictionary.</param>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add. The value can be null for reference types.</param>
            <param name="overwrite">true if key's value should be overwritten; otherwise false.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:SharpBag.Extensions.Fill``1(``0[],``0)">
            <summary>
            Fills the current array with the specified value.
            </summary>
            <typeparam name="T">The type of the array.</typeparam>
            <param name="array">The current instance.</param>
            <param name="value">The value to fill the array with.</param>
        </member>
        <member name="M:SharpBag.Extensions.Fill``1(System.Collections.Generic.List{``0},``0)">
            <summary>
            Fills the current array with the specified value.
            </summary>
            <typeparam name="T">The type of the array.</typeparam>
            <param name="array">The current instance.</param>
            <param name="value">The value to fill the array with.</param>
        </member>
        <member name="M:SharpBag.Extensions.Range``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            Gets a subarray of an array.
            </summary>
            <typeparam name="T">The type of the enumerable.</typeparam>
            <param name="array">The array.</param>
            <param name="start">The first index.</param>
            <param name="end">The last index.</param>
            <returns>A subarray of the array.</returns>
        </member>
        <member name="M:SharpBag.Extensions.InvokeIfRequired(System.Windows.Threading.DispatcherObject,System.Action)">
            <summary>
            Simple helper extension method to marshall to correct thread if its required.
            </summary>
            <param name="control">The source control.</param>
            <param name="methodcall">The method to call.</param>
        </member>
        <member name="M:SharpBag.Extensions.InvokeIfRequired(System.Windows.Threading.DispatcherObject,System.Action,System.Windows.Threading.DispatcherPriority)">
            <summary>
            Simple helper extension method to marshall to correct thread if its required.
            </summary>
            <param name="control">The source control.</param>
            <param name="methodcall">The method to call.</param>
            <param name="priorityForCall">The thread priority.</param>
        </member>
        <member name="M:SharpBag.Extensions.UnionAll``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Unions all elements in the current instance and the specified collection.
            </summary>
            <typeparam name="T">The type of the collections.</typeparam>
            <param name="source">The current instance.</param>
            <param name="other">The collection to union.</param>
            <returns>The current instance and the specified collection unioned.</returns>
        </member>
        <member name="M:SharpBag.Extensions.Add``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Adds the specified item to the current instance.
            </summary>
            <typeparam name="T">The type of the items.</typeparam>
            <param name="source">The current instance.</param>
            <param name="newItem">The new item.</param>
            <returns>The current instance with the new item.</returns>
        </member>
        <member name="M:SharpBag.Extensions.Add``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
            Adds the specified items to the current instance.
            </summary>
            <typeparam name="T">The type of items in the current instance.</typeparam>
            <param name="source">The current instance.</param>
            <param name="newItems">The items to add.</param>
            <returns>The current instance and the new items.</returns>
        </member>
        <member name="M:SharpBag.Extensions.Subarray(System.Int32[0:,0:],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets a subarray of the current instance.
            </summary>
            <param name="a">The current instance.</param>
            <param name="x1">X-coordinate 1.</param>
            <param name="y1">Y-coordinate 1.</param>
            <param name="x2">X-coordinate 2.</param>
            <param name="y2">Y-coordinate 2.</param>
            <returns>The subarray.</returns>
        </member>
        <member name="M:SharpBag.Extensions.IsIn``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Whether the current instance is in the specified collection.
            </summary>
            <typeparam name="T">The type of the current instance.</typeparam>
            <param name="item">The current instance.</param>
            <param name="collection">The collection.</param>
            <returns>Whether the current instance is in the specified collection.</returns>
        </member>
        <member name="M:SharpBag.Extensions.IsIn``1(``0,``0[])">
            <summary>
            Whether the current instance is in the specified collection.
            </summary>
            <typeparam name="T">The type of the current instance.</typeparam>
            <param name="item">The current instance.</param>
            <param name="collection">The collection.</param>
            <returns>Whether the current instance is in the specified collection.</returns>
        </member>
        <member name="M:SharpBag.Extensions.Random``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a random item from the current instance.
            </summary>
            <typeparam name="T">The type of the items.</typeparam>
            <param name="collection">The current instance.</param>
            <returns>A random item from  the current instance.</returns>
        </member>
        <member name="M:SharpBag.Extensions.Random``1(System.Collections.Generic.IEnumerable{``0},System.Random)">
            <summary>
            Returns a random item from the current instance.
            </summary>
            <typeparam name="T">The type of the items.</typeparam>
            <param name="collection">The current instance.</param>
            <param name="rand">A random number generator.</param>
            <returns>A random item from  the current instance.</returns>
        </member>
        <member name="M:SharpBag.Extensions.With``1(``0,System.Action{``0})">
            <summary>
            Executes the specified action on the current instance.
            </summary>
            <typeparam name="T">The type of the current instance.</typeparam>
            <param name="obj">The current instance.</param>
            <param name="act">An action.</param>
        </member>
        <member name="M:SharpBag.Extensions.NullOr``2(``0,System.Func{``0,``1},``1)">
            <summary>
            If the current instance is not null, returns the value returned from selector function, else returns the elseValue.
            </summary>
            <typeparam name="TIn">The type of the current instance.</typeparam>
            <typeparam name="TReturn">The type of the return value.</typeparam>
            <param name="obj">The current instance.</param>
            <param name="selector">A selector function.</param>
            <param name="elseValue">The default value to return.</param>
            <returns>If the current instance is not null, returns the value returned from selector function, else returns the elseValue.</returns>
        </member>
        <member name="M:SharpBag.Extensions.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Whether the current instance is null or empty.
            </summary>
            <typeparam name="T">The type of items in the current instance.</typeparam>
            <param name="collection">The current instance.</param>
            <returns>Whether the current instance is null or empty.</returns>
        </member>
        <member name="M:SharpBag.Extensions.Is``1(System.Object)">
            <summary>
            Whether the current instance is T.
            </summary>
            <typeparam name="T">The type to check against.</typeparam>
            <param name="item">The current instance.</param>
            <returns>Whether the current instance is T.</returns>
        </member>
        <member name="M:SharpBag.Extensions.IsNot``1(System.Object)">
            <summary>
            Whether the current instance is not T.
            </summary>
            <typeparam name="T">The type to check against.</typeparam>
            <param name="item">The current instance.</param>
            <returns>Whether the current instance is not T.</returns>
        </member>
        <member name="M:SharpBag.Extensions.CastAs``1(System.Object)">
            <summary>
            Returns the current instance as T.
            </summary>
            <typeparam name="T">The type to return the current instance as.</typeparam>
            <param name="item">The current instance.</param>
            <returns>The current instance as T.</returns>
        </member>
        <member name="M:SharpBag.Extensions.EmptyIfNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns an empty enumerable if the current instance is null.
            </summary>
            <typeparam name="T">The type of items in the current instance.</typeparam>
            <param name="pSeq">The current instance.</param>
            <returns>An empty enumerable if the current instance is null.</returns>
        </member>
        <member name="M:SharpBag.Extensions.ToDictionary(System.Object)">
            <summary>
            Converts an the current instance to a dictionary, with it's properties as the keys.
            </summary>
            <param name="o">The current instance.</param>
            <returns>The current instance as a dictionary.</returns>
        </member>
        <member name="M:SharpBag.Extensions.As``1(System.Object,``0)">
            <summary>
            Converts the current instance to the specified type.
            </summary>
            <typeparam name="TOut">Type the current instance will be converted to.</typeparam>
            <param name="original">The current instance.</param>
            <param name="defaultValue">The default value to use in case the current instance can't be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:SharpBag.Extensions.As``1(System.Object,System.IFormatProvider,``0)">
            <summary>
            Converts the current instance to the specified type.
            </summary>
            <typeparam name="TOut">Type the current instance will be converted to.</typeparam>
            <param name="original">The current instance.</param>
            <param name="provider">An IFormatProvider.</param>
            <param name="defaultValue">The default value to use in case the current instance can't be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:SharpBag.Extensions.IsNullableType(System.Type)">
            <summary>
            Returns whether or not the specified type is <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="type">A <see cref="T:System.Type"/>.</param>
            <returns>True if the specified type is <see cref="T:System.Nullable`1"/>; otherwise, false.</returns>
            <remarks>Use <see cref="M:System.Nullable.GetUnderlyingType(System.Type)"/> to access the underlying type.</remarks>
        </member>
        <member name="M:SharpBag.Extensions.Shuffle``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Shuffle the collection.
            </summary>
            <typeparam name="T">The type of items in the current instance.</typeparam>
            <param name="source">The current instance.</param>
            <returns>The shuffled collection.</returns>
        </member>
        <member name="M:SharpBag.Extensions.TakeEvery``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            Takes every n-th item of the collection.
            </summary>
            <typeparam name="T">The type of the items.</typeparam>
            <param name="enumeration">The current instance.</param>
            <param name="step">The step to take.</param>
            <param name="start">The location to start at.</param>
            <returns>Every n-th item of the collection.</returns>
        </member>
        <member name="M:SharpBag.Extensions.If``1(``0,System.Boolean,``0)">
            <summary>
            Returns the current instance if the specified expression is true, else returns the specified default value.
            </summary>
            <typeparam name="T">The type of the current instance.</typeparam>
            <param name="obj">The current instance.</param>
            <param name="expression">An expression.</param>
            <param name="def">The default value.</param>
            <returns>The current instance if the specified expression is true, else returns the specified default value.</returns>
        </member>
        <member name="T:SharpBag.Patterns.LockedLazySingleton`1">
            <summary>
            An eager singleton.
            </summary>
            <typeparam name="T">The type of the object, the singleton will wrap.</typeparam>
        </member>
        <member name="M:SharpBag.Patterns.LockedLazySingleton`1.#ctor">
            <summary>
            The constructor.
            </summary>
        </member>
        <member name="M:SharpBag.Patterns.LockedLazySingleton`1.#ctor(System.Action{`0})">
            <summary>
            The constructor.
            </summary>
            <param name="initializeAction">An action to initialize the object.</param>
        </member>
        <member name="M:SharpBag.Patterns.LockedLazySingleton`1.GetInstance">
            <summary>
            Gets the object instance.
            </summary>
            <returns>The object instance.</returns>
        </member>
        <member name="T:SharpBag.Net.Internet">
            <summary>
            A static class with utilities for working with internet communications and such.
            </summary>
        </member>
        <member name="M:SharpBag.Net.Internet.IsPortFree(System.Int32)">
            <summary>
            Checks whether the specified port number is valid and not in use.
            </summary>
            <param name="port">The port.</param>
            <returns>Whether the specified port number is valid and not in use.</returns>
        </member>
        <member name="P:SharpBag.Net.Internet.LocalIPAddresses">
            <summary>
            Returns the local machines IP addresses.
            </summary>
        </member>
        <member name="T:SharpBag.Math.Converters.Temperature">
            <summary>
            An interface for temperatures.
            </summary>
        </member>
        <member name="M:SharpBag.Math.Converters.Temperature.ToString(System.Boolean)">
            <see cref="M:System.Object.ToString"/>
            <param name="unit">Whether or not to append the measurement unit.</param>
        </member>
        <member name="M:SharpBag.Math.Converters.Temperature.ToString(System.Boolean,System.Func{System.Double,System.String})">
            <see cref="M:System.Object.ToString"/>
            <param name="unit">Whether or not to append the measurement unit.</param>
            <param name="result">The result.</param>
        </member>
        <member name="T:SharpBag.Math.Converters.Celsius">
            <summary>
            The Celsius temperature unit.
            </summary>
        </member>
        <member name="F:SharpBag.Math.Converters.Celsius.Unit">
            <summary>
            The Celsius unit.
            </summary>
        </member>
        <member name="M:SharpBag.Math.Converters.Celsius.#ctor(System.Double)">
            <summary>
            The Celsius temperature unit.
            </summary>
            <param name="v">The value.</param>
        </member>
        <member name="M:SharpBag.Math.Converters.Celsius.op_Implicit(System.Double)~SharpBag.Math.Converters.Celsius">
            <summary>
            An implicit conversion from double to Celsius.
            </summary>
            <param name="v">The double value.</param>
            <returns>The double value as Celsius.</returns>
        </member>
        <member name="M:SharpBag.Math.Converters.Celsius.op_Implicit(SharpBag.Math.Converters.Celsius)~System.Double">
            <summary>
            An implicit conversion from Celsius to double.
            </summary>
            <param name="v">The Celsius value.</param>
            <returns>The Celsius value as a double.</returns>
        </member>
        <member name="M:SharpBag.Math.Converters.Celsius.op_Explicit(SharpBag.Math.Converters.Kelvin)~SharpBag.Math.Converters.Celsius">
            <summary>
            An explicit conversion from Kelvin to Celsius.
            </summary>
            <param name="v">The Kelvin value.</param>
            <returns>The Kelvin value as Celsius.</returns>
        </member>
        <member name="M:SharpBag.Math.Converters.Celsius.op_Explicit(SharpBag.Math.Converters.Fahrenheit)~SharpBag.Math.Converters.Celsius">
            <summary>
            An explicit conversion from Fahrenheit to Celsius.
            </summary>
            <param name="v">The Fahrenheit value.</param>
            <returns>The Fahrenheit value as Celsius.</returns>
        </member>
        <member name="M:SharpBag.Math.Converters.Celsius.ToString">
            <see cref="M:System.Object.ToString"/>
        </member>
        <member name="M:SharpBag.Math.Converters.Celsius.ToString(System.Boolean)">
            <see cref="M:System.Object.ToString"/>
            <param name="unit">Whether or not to append the measurement unit.</param>
        </member>
        <member name="M:SharpBag.Math.Converters.Celsius.ToString(System.Boolean,System.Func{System.Double,System.String})">
            <see cref="M:System.Object.ToString"/>
            <param name="unit">Whether or not to append the measurement unit.</param>
            <param name="result">The result.</param>
        </member>
        <member name="T:SharpBag.Math.Converters.Fahrenheit">
            <summary>
            The Fahrenheit temperature unit.
            </summary>
        </member>
        <member name="F:SharpBag.Math.Converters.Fahrenheit.Unit">
            <summary>
            The Fahrenheit unit.
            </summary>
        </member>
        <member name="M:SharpBag.Math.Converters.Fahrenheit.#ctor(System.Double)">
            <summary>
            The Fahrenheit temperature unit.
            </summary>
            <param name="v">The value.</param>
        </member>
        <member name="M:SharpBag.Math.Converters.Fahrenheit.op_Implicit(System.Double)~SharpBag.Math.Converters.Fahrenheit">
            <summary>
            An implicit conversion from double to Fahrenheit.
            </summary>
            <param name="v">The double value.</param>
            <returns>The double value as Fahrenheit.</returns>
        </member>
        <member name="M:SharpBag.Math.Converters.Fahrenheit.op_Implicit(SharpBag.Math.Converters.Fahrenheit)~System.Double">
            <summary>
            An implicit conversion from Fahrenheit to double.
            </summary>
            <param name="v">The Fahrenheit value.</param>
            <returns>The Fahrenheit value as a double.</returns>
        </member>
        <member name="M:SharpBag.Math.Converters.Fahrenheit.op_Explicit(SharpBag.Math.Converters.Kelvin)~SharpBag.Math.Converters.Fahrenheit">
            <summary>
            An explicit conversion from Kelvin to Fahrenheit.
            </summary>
            <param name="v">The Kelvin value.</param>
            <returns>The Kelvin value as Fahrenheit.</returns>
        </member>
        <member name="M:SharpBag.Math.Converters.Fahrenheit.op_Explicit(SharpBag.Math.Converters.Celsius)~SharpBag.Math.Converters.Fahrenheit">
            <summary>
            An explicit conversion from Celsius to Fahrenheit.
            </summary>
            <param name="v">The Celsius value.</param>
            <returns>The Celsius value as Fahrenheit.</returns>
        </member>
        <member name="M:SharpBag.Math.Converters.Fahrenheit.ToString">
            <see cref="M:System.Object.ToString"/>
        </member>
        <member name="M:SharpBag.Math.Converters.Fahrenheit.ToString(System.Boolean)">
            <see cref="M:System.Object.ToString"/>
            <param name="unit">Whether or not to append the measurement unit.</param>
        </member>
        <member name="M:SharpBag.Math.Converters.Fahrenheit.ToString(System.Boolean,System.Func{System.Double,System.String})">
            <see cref="M:System.Object.ToString"/>
            <param name="unit">Whether or not to append the measurement unit.</param>
            <param name="result">The result.</param>
        </member>
        <member name="T:SharpBag.Math.Converters.Kelvin">
            <summary>
            The Kelvin temperature unit.
            </summary>
        </member>
        <member name="F:SharpBag.Math.Converters.Kelvin.Unit">
            <summary>
            The Kelvin unit.
            </summary>
        </member>
        <member name="M:SharpBag.Math.Converters.Kelvin.#ctor(System.Double)">
            <summary>
            The Kelvin temperature unit.
            </summary>
            <param name="v">The value.</param>
        </member>
        <member name="M:SharpBag.Math.Converters.Kelvin.op_Implicit(System.Double)~SharpBag.Math.Converters.Kelvin">
            <summary>
            An implicit conversion from double to Kelvin.
            </summary>
            <param name="v">The double value.</param>
            <returns>The double value as Kelvin.</returns>
        </member>
        <member name="M:SharpBag.Math.Converters.Kelvin.op_Implicit(SharpBag.Math.Converters.Kelvin)~System.Double">
            <summary>
            An implicit conversion from Kelvin to double.
            </summary>
            <param name="v">The Kelvin value.</param>
            <returns>The Kelvin value as a double.</returns>
        </member>
        <member name="M:SharpBag.Math.Converters.Kelvin.op_Explicit(SharpBag.Math.Converters.Fahrenheit)~SharpBag.Math.Converters.Kelvin">
            <summary>
            An explicit conversion from Fahrenheit to Kelvin.
            </summary>
            <param name="v">The Fahrenheit value.</param>
            <returns>The Fahrenheit value as Kelvin.</returns>
        </member>
        <member name="M:SharpBag.Math.Converters.Kelvin.op_Explicit(SharpBag.Math.Converters.Celsius)~SharpBag.Math.Converters.Kelvin">
            <summary>
            An explicit conversion from Celsius to Kelvin.
            </summary>
            <param name="v">The Celsius value.</param>
            <returns>The Celsius value as Kelvin.</returns>
        </member>
        <member name="M:SharpBag.Math.Converters.Kelvin.ToString">
            <see cref="M:System.Object.ToString"/>
        </member>
        <member name="M:SharpBag.Math.Converters.Kelvin.ToString(System.Boolean)">
            <see cref="M:System.Object.ToString"/>
            <param name="unit">Whether or not to append the measurement unit.</param>
        </member>
        <member name="M:SharpBag.Math.Converters.Kelvin.ToString(System.Boolean,System.Func{System.Double,System.String})">
            <see cref="M:System.Object.ToString"/>
            <param name="unit">Whether or not to append the measurement unit.</param>
            <param name="result">The result.</param>
        </member>
        <member name="T:SharpBag.Math.Converters.BitSize">
            <summary>
            An abstract class defining a bit size.
            </summary>
        </member>
        <member name="M:SharpBag.Math.Converters.BitSize.#ctor(System.Double)">
            <summary>
            The constructor.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:SharpBag.Math.Converters.BitSize.As``2">
            <summary>
            Converts a bit size to another bit size.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <returns>The bit size converted to another bit size.</returns>
        </member>
        <member name="M:SharpBag.Math.Converters.BitSize.op_Implicit(SharpBag.Math.Converters.BitSize)~System.Double">
            <summary>
            An implicit convert from a bit size to a double.
            </summary>
            <param name="v">The bit size.</param>
            <returns>The bit size as a double.</returns>
        </member>
        <member name="M:SharpBag.Math.Converters.BitSize.ToString">
            <see cref="M:System.Object.ToString"/>
        </member>
        <member name="M:SharpBag.Math.Converters.BitSize.ToString(System.Boolean)">
            <see cref="M:System.Object.ToString"/>
            <param name="unit">Whether or not to append the measurement unit.</param>
        </member>
        <member name="M:SharpBag.Math.Converters.BitSize.ToString(System.Boolean,System.Func{System.Double,System.String})">
            <see cref="M:System.Object.ToString"/>
            <param name="unit">Whether or not to append the measurement unit.</param>
            <param name="result">The result.</param>
        </member>
        <member name="P:SharpBag.Math.Converters.BitSize.Unit">
            <summary>
            The unit.
            </summary>
        </member>
        <member name="P:SharpBag.Math.Converters.BitSize.BaseValue">
            <summary>
            The base value.
            </summary>
        </member>
        <member name="P:SharpBag.Math.Converters.BitSize.Value">
            <summary>
            THe value.
            </summary>
        </member>
        <member name="T:SharpBag.Math.Converters.Bit">
            <summary>
            A class representing a bit.
            </summary>
        </member>
        <member name="M:SharpBag.Math.Converters.Bit.#ctor(System.Double)">
            <summary>
            The constructor.
            </summary>
            <param name="v">The value.</param>
        </member>
        <member name="P:SharpBag.Math.Converters.Bit.Unit">
            <summary>
            The unit.
            </summary>
        </member>
        <member name="P:SharpBag.Math.Converters.Bit.BaseValue">
            <summary>
            The base value.
            </summary>
        </member>
        <member name="T:SharpBag.Math.Converters.Kilobit">
            <summary>
            A class reperesenting a kilobit.
            </summary>
        </member>
        <member name="M:SharpBag.Math.Converters.Kilobit.#ctor(System.Double)">
            <summary>
            The constructor.
            </summary>
            <param name="v">The value.</param>
        </member>
        <member name="P:SharpBag.Math.Converters.Kilobit.Unit">
            <summary>
            The unit.
            </summary>
        </member>
        <member name="P:SharpBag.Math.Converters.Kilobit.BaseValue">
            <summary>
            The base value.
            </summary>
        </member>
        <member name="T:SharpBag.Math.Converters.Megabit">
            <summary>
            A class reperesenting a megabit.
            </summary>
        </member>
        <member name="M:SharpBag.Math.Converters.Megabit.#ctor(System.Double)">
            <summary>
            The constructor.
            </summary>
            <param name="v">The value.</param>
        </member>
        <member name="P:SharpBag.Math.Converters.Megabit.Unit">
            <summary>
            The unit.
            </summary>
        </member>
        <member name="P:SharpBag.Math.Converters.Megabit.BaseValue">
            <summary>
            The base value.
            </summary>
        </member>
        <member name="T:SharpBag.Math.Converters.Gigabit">
            <summary>
            A class reperesenting a gigabit.
            </summary>
        </member>
        <member name="M:SharpBag.Math.Converters.Gigabit.#ctor(System.Double)">
            <summary>
            The constructor.
            </summary>
            <param name="v">The value.</param>
        </member>
        <member name="P:SharpBag.Math.Converters.Gigabit.Unit">
            <summary>
            The unit.
            </summary>
        </member>
        <member name="P:SharpBag.Math.Converters.Gigabit.BaseValue">
            <summary>
            The base value.
            </summary>
        </member>
        <member name="T:SharpBag.Math.Converters.Terabit">
            <summary>
            A class reperesenting a terabit.
            </summary>
        </member>
        <member name="M:SharpBag.Math.Converters.Terabit.#ctor(System.Double)">
            <summary>
            The constructor.
            </summary>
            <param name="v">The value.</param>
        </member>
        <member name="P:SharpBag.Math.Converters.Terabit.Unit">
            <summary>
            The unit.
            </summary>
        </member>
        <member name="P:SharpBag.Math.Converters.Terabit.BaseValue">
            <summary>
            The base value.
            </summary>
        </member>
        <member name="T:SharpBag.Math.Converters.Byte">
            <summary>
            A class reperesenting a byte.
            </summary>
        </member>
        <member name="M:SharpBag.Math.Converters.Byte.#ctor(System.Double)">
            <summary>
            The constructor.
            </summary>
            <param name="v">The value.</param>
        </member>
        <member name="P:SharpBag.Math.Converters.Byte.Unit">
            <summary>
            The unit.
            </summary>
        </member>
        <member name="P:SharpBag.Math.Converters.Byte.BaseValue">
            <summary>
            The base value.
            </summary>
        </member>
        <member name="T:SharpBag.Math.Converters.Kilobyte">
            <summary>
            A class reperesenting a kilobyte.
            </summary>
        </member>
        <member name="M:SharpBag.Math.Converters.Kilobyte.#ctor(System.Double)">
            <summary>
            The constructor.
            </summary>
            <param name="v">The value.</param>
        </member>
        <member name="P:SharpBag.Math.Converters.Kilobyte.Unit">
            <summary>
            The unit.
            </summary>
        </member>
        <member name="P:SharpBag.Math.Converters.Kilobyte.BaseValue">
            <summary>
            The base value.
            </summary>
        </member>
        <member name="T:SharpBag.Math.Converters.Megabyte">
            <summary>
            A class reperesenting a megabyte.
            </summary>
        </member>
        <member name="M:SharpBag.Math.Converters.Megabyte.#ctor(System.Double)">
            <summary>
            The constructor.
            </summary>
            <param name="v">The value.</param>
        </member>
        <member name="P:SharpBag.Math.Converters.Megabyte.Unit">
            <summary>
            The unit.
            </summary>
        </member>
        <member name="P:SharpBag.Math.Converters.Megabyte.BaseValue">
            <summary>
            The base value.
            </summary>
        </member>
        <member name="T:SharpBag.Math.Converters.Gigabyte">
            <summary>
            A class reperesenting a gigabyte.
            </summary>
        </member>
        <member name="M:SharpBag.Math.Converters.Gigabyte.#ctor(System.Double)">
            <summary>
            The constructor.
            </summary>
            <param name="v">The value.</param>
        </member>
        <member name="P:SharpBag.Math.Converters.Gigabyte.Unit">
            <summary>
            The unit.
            </summary>
        </member>
        <member name="P:SharpBag.Math.Converters.Gigabyte.BaseValue">
            <summary>
            The base value.
            </summary>
        </member>
        <member name="T:SharpBag.Math.Converters.Terabyte">
            <summary>
            A class reperesenting a terabyte.
            </summary>
        </member>
        <member name="M:SharpBag.Math.Converters.Terabyte.#ctor(System.Double)">
            <summary>
            The constructor.
            </summary>
            <param name="v">The value.</param>
        </member>
        <member name="P:SharpBag.Math.Converters.Terabyte.Unit">
            <summary>
            The unit.
            </summary>
        </member>
        <member name="P:SharpBag.Math.Converters.Terabyte.BaseValue">
            <summary>
            The base value.
            </summary>
        </member>
        <member name="T:SharpBag.Media.MediaExtensions">
            <summary>
            Media extensions.
            </summary>
        </member>
        <member name="M:SharpBag.Media.MediaExtensions.ToBitmapSource(System.Drawing.Image)">
            <summary>
            Turns the current instance into a BitmapSource.
            </summary>
            <param name="img">The current instance.</param>
            <returns>The BitmapSource.</returns>
        </member>
        <member name="M:SharpBag.Media.MediaExtensions.GetPixels(System.Drawing.Bitmap,System.Drawing.Rectangle)">
            <summary>
            Gets an enumerable containing all pixels that are in the specified rectangle on the current instance.
            </summary>
            <param name="image">The current instance.</param>
            <param name="rect">The rectangle in the current instance.</param>
            <returns>An enumerable containing all pixels that are in the specified rectangle on the current instance.</returns>
        </member>
        <member name="M:SharpBag.Media.MediaExtensions.GetLuminosity(System.Drawing.Bitmap,System.Drawing.Rectangle)">
            <summary>
            Gets the luminosity of the specified rectangle in the current instance.
            </summary>
            <param name="image">The current instance.</param>
            <param name="rect">The rectangle in the current instance.</param>
            <returns>The luminosity of the specified rectangle in the current instance.</returns>
        </member>
        <member name="M:SharpBag.Media.MediaExtensions.GetRectangle(System.Drawing.Image)">
            <summary>
            Gets a new rectangle that has the same with and height as the current instance.
            </summary>
            <param name="image">The current instance.</param>
            <returns>A new rectangle that has the same with and height as the current instance.</returns>
        </member>
        <member name="M:SharpBag.Media.MediaExtensions.Contrast(System.Double,System.Double)">
            <summary>
            Gets the contrast of the current instance.
            </summary>
            <param name="d">The current instance.</param>
            <param name="contrast">The contrast.</param>
            <returns>The contrast.</returns>
        </member>
        <member name="M:SharpBag.Media.MediaExtensions.GetSubRectangles(System.Drawing.Rectangle,System.Int32,System.Int32)">
            <summary>
            Gets a subset of rectangles all with the specified width and height from the current instance.
            </summary>
            <param name="rect">The current instance.</param>
            <param name="width">The width of all sub-rectangles.</param>
            <param name="height">The height of all sub-rectangles.</param>
            <returns>An enumerable with the sub-rectangles.</returns>
        </member>
        <member name="M:SharpBag.Media.MediaExtensions.CreateRectangle(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a rectangle.
            </summary>
            <param name="x">The upper left x coordinate.</param>
            <param name="y">The upper left y coordinate.</param>
            <param name="nextX">The lower right x coordinate.</param>
            <param name="nextY">The lower right y coordinate.</param>
            <returns>A rectangle.</returns>
        </member>
        <member name="T:SharpBag.IO.IOExtensions">
            <summary>
            A static class with IO extensions.
            </summary>
        </member>
        <member name="M:SharpBag.IO.IOExtensions.WriteLinesTo``1(System.Collections.Generic.IEnumerable{``0},System.IO.TextWriter)">
            <summary>
            Writes lines from the current instance to the specified TextWriter.
            </summary>
            <typeparam name="T">The type of the lines that will be written.</typeparam>
            <param name="lines">The current instance.</param>
            <param name="writer">The TextWriter to write to.</param>
        </member>
        <member name="M:SharpBag.IO.IOExtensions.WriteLinesToConsole``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Writes lines from the current instance to the console.
            </summary>
            <typeparam name="T">The type of the lines that will be written.</typeparam>
            <param name="lines">The current instance.</param>
        </member>
        <member name="M:SharpBag.IO.IOExtensions.WriteLinesToFile``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Writes lines from the current instance to the specified file.
            </summary>
            <typeparam name="T">The type of the lines that will be written.</typeparam>
            <param name="lines">The current instance.</param>
            <param name="path">The location of the file to write to.</param>
        </member>
        <member name="M:SharpBag.IO.IOExtensions.GetString(System.Byte[])">
            <summary>
            Converts a byte array to a string, using its byte order mark to convert it to the right encoding.
            </summary>
            <param name="buffer">The current instance.</param>
            <returns>The bytes as a string.</returns>
            <remarks>http://www.west-wind.com/WebLog/posts/197245.aspx</remarks>
        </member>
        <member name="T:SharpBag.Comparers.AlphaNumberSettings">
            <summary>
            Settings for the AlphaNumberComparer.
            </summary>
        </member>
        <member name="F:SharpBag.Comparers.AlphaNumberSettings.Leading">
            <summary>
            Leading numbers.
            </summary>
        </member>
        <member name="F:SharpBag.Comparers.AlphaNumberSettings.Trailing">
            <summary>
            Trailing numbers.
            </summary>
        </member>
        <member name="T:SharpBag.Algorithms.Sorting.SortExtensions">
            <summary>
            Sorting extensions.
            </summary>
        </member>
        <member name="M:SharpBag.Algorithms.Sorting.SortExtensions.BubbleSort``1(System.Collections.Generic.IEnumerable{``0},SharpBag.Algorithms.Sorting.SortOrder)">
            <summary>
            BubbleSorts the current instance.
            </summary>
            <typeparam name="T">The type of the items in the current instance.</typeparam>
            <param name="collection">The current instance.</param>
            <param name="order">The order to sort in.</param>
            <returns>The sorted collection.</returns>
        </member>
        <member name="M:SharpBag.Algorithms.Sorting.SortExtensions.SelectionSort``1(System.Collections.Generic.IEnumerable{``0},SharpBag.Algorithms.Sorting.SortOrder)">
            <summary>
            SelectionSorts the current instance.
            </summary>
            /// <typeparam name="T">The type of the items in the current instance.</typeparam>
            <param name="collection">The current instance.</param>
            <param name="order">The order to sort in.</param>
            <returns>The sorted collection.</returns>
        </member>
        <member name="M:SharpBag.Algorithms.Sorting.SortExtensions.InsertionSort``1(System.Collections.Generic.IEnumerable{``0},SharpBag.Algorithms.Sorting.SortOrder)">
            <summary>
            InsertionSorts the current instance.
            </summary>
            /// <typeparam name="T">The type of the items in the current instance.</typeparam>
            <param name="collection">The current instance.</param>
            <param name="order">The order to sort in.</param>
            <returns>The sorted collection.</returns>
        </member>
        <member name="T:SharpBag.Net.InternetExtensions">
            <summary>
            Extensions methods for the BagNet class.
            </summary>
        </member>
        <member name="M:SharpBag.Net.InternetExtensions.Download(System.Uri)">
            <summary>
            Downloads the source of the Uri and returns it as a string.
            </summary>
            <param name="page">The source of the Uri.</param>
            <returns></returns>
        </member>
        <member name="M:SharpBag.Net.InternetExtensions.HtmlSafe(System.String)">
            <summary>
            Makes the current instance HTML safe.
            </summary>
            <param name="s">The current instance.</param>
            <returns>An HTML safe string.</returns>
        </member>
        <member name="M:SharpBag.Net.InternetExtensions.HtmlSafe(System.String,System.Boolean)">
            <summary>
            Makes the current instance HTML safe.
            </summary>
            <param name="s">The current instance.</param>
            <param name="all">Whether to make all characters entities or just those needed.</param>
            <returns>An HTML safe string.</returns>
        </member>
        <member name="M:SharpBag.Net.InternetExtensions.HtmlSafe(System.String,System.Boolean,System.Boolean)">
            <summary>
            Makes the current instance HTML safe.
            </summary>
            <param name="s">The current instance.</param>
            <param name="all">Whether to make all characters entities or just those needed.</param>
            <param name="replace">Whether or not to encode spaces and line breaks.</param>
            <returns>An HTML safe string.</returns>
        </member>
        <member name="T:SharpBag.Math.BagMath">
            <summary>
            A static class containing methods for doing calculations. 
            </summary>
        </member>
        <member name="M:SharpBag.Math.BagMath.PointsInCircleF(System.Int32)">
            <summary>
            Find points in a circle with a specified radius.
            </summary>
            <param name="Radius">The radius of the circle.</param>
            <returns>An array containing points.</returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:SharpBag.Math.BagMath.PointsInCircleF(System.Int32,System.Drawing.PointF)">
            <summary>
            Find points in a circle with a specified radius.
            </summary>
            <param name="Radius">The radius of the circle.</param>
            <param name="Center">The center-point of the circle.</param>
            <returns>An array containing points.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:SharpBag.Math.BagMath.PointsInCircleF(System.Int32,System.Int32)">
            <summary>
            Find points in a circle with a specified radius.
            </summary>
            <param name="Radius">The radius of the circle.</param>
            <param name="Points">Number of points to return.</param>
            <returns>An array containing points.</returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:SharpBag.Math.BagMath.PointsInCircleF(System.Int32,System.Drawing.PointF,System.Int32)">
            <summary>
            Find points in a circle with a specified radius.
            </summary>
            <param name="Radius">The radius of the circle.</param>
            <param name="Center">The center-point of the circle.</param>
            <param name="Points">Number of points to return.</param>
            <returns>An array containing points.</returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:SharpBag.Math.BagMath.PointsInCircle(System.Int32)">
            <summary>
            Find points in a circle with a specified radius.
            </summary>
            <param name="Radius">The radius of the circle.</param>
            <returns>An array containing points.</returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:SharpBag.Math.BagMath.PointsInCircle(System.Int32,System.Drawing.Point)">
            <summary>
            Find points in a circle with a specified radius.
            </summary>
            <param name="Radius">The radius of the circle.</param>
            <param name="Center">The center-point of the circle.</param>
            <returns>An array containing points.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:SharpBag.Math.BagMath.PointsInCircle(System.Int32,System.Int32)">
            <summary>
            Find points in a circle with a specified radius.
            </summary>
            <param name="Radius">The radius of the circle.</param>
            <param name="Points">Number of points to return.</param>
            <returns>An array containing points.</returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:SharpBag.Math.BagMath.PointsInCircle(System.Int32,System.Drawing.Point,System.Int32)">
            <summary>
            Find points in a circle with a specified radius.
            </summary>
            <param name="Radius">The radius of the circle.</param>
            <param name="Center">The center-point of the circle.</param>
            <param name="Points">Number of points to return.</param>
            <returns>An array containing points.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:SharpBag.Math.BagMath.WaveLength(System.Double)">
            <summary>
            Calculates wave length from the average fluctuation time.
            </summary>
            <param name="Tz">The average fluctuation time (Tz).</param>
            <returns>The length of the wave.</returns>
        </member>
        <member name="M:SharpBag.Math.BagMath.Gcd(System.Int32,System.Int32)">
            <summary>
            Finds the greatest common divisor (gcd) of two integers.
            </summary>
            <param name="a">An integer.</param>
            <param name="b">An integer.</param>
            <returns>The greatest commond divisor (gcd) of the two integers.</returns>
        </member>
        <member name="M:SharpBag.Math.BagMath.IsPrime(System.Int32)">
            <summary>
            Checks whether a number is a prime number or not.
            </summary>
            <param name="candidate">The number to test.</param>
            <returns>Whether the number is a prime number or not.</returns>
        </member>
        <member name="M:SharpBag.Math.BagMath.IsPrime(System.Int64)">
            <summary>
            Checks whether a number is a prime number or not.
            </summary>
            <param name="candidate">The number to test.</param>
            <returns>Whether the number is a prime number or not.</returns>
        </member>
        <member name="M:SharpBag.Math.BagMath.IsPrime(System.Numerics.BigInteger)">
            <summary>
            Checks whether a number is a prime number or not.
            </summary>
            <param name="candidate">The number to test.</param>
            <returns>Whether the number is a prime number or not.</returns>
        </member>
        <member name="M:SharpBag.Math.BagMath.K(System.Int32,System.Int32)">
            <summary>
            Returns the correct value of the current instance, as if the current instance were in K's.
            </summary>
            <param name="n">The current instance.</param>
            <param name="thousand">The value of a one thousand.</param>
            <returns>The correct value of the current instance.</returns>
        </member>
        <member name="M:SharpBag.Math.BagMath.M(System.Int32,System.Int32)">
            <summary>
            Returns the correct value of the current instance, as if the current instance were in M's.
            </summary>
            <param name="n">The current instance.</param>
            <param name="thousand">The value of a one thousand.</param>
            <returns>The correct value of the current instance.</returns>
        </member>
        <member name="M:SharpBag.Math.BagMath.G(System.Int32,System.Int32)">
            <summary>
            Returns the correct value of the current instance, as if the current instance were in G's.
            </summary>
            <param name="n">The current instance.</param>
            <param name="thousand">The value of a one thousand.</param>
            <returns>The correct value of the current instance.</returns>
        </member>
        <member name="M:SharpBag.Math.BagMath.T(System.Int32,System.Int32)">
            <summary>
            Returns the correct value of the current instance, as if the current instance were in T's.
            </summary>
            <param name="n">The current instance.</param>
            <param name="thousand">The value of a one thousand.</param>
            <returns>The correct value of the current instance.</returns>
        </member>
        <member name="T:SharpBag.Settings">
            <summary>
            A static class containing settings and other related data.
            </summary>
        </member>
        <member name="P:SharpBag.Settings.ExecutableDirectory">
            <summary>
            Gets the directory where the executable is located.
            </summary>
        </member>
        <member name="P:SharpBag.Settings.NL">
            <summary>
            Gets the newline string defined for this environment.
            </summary>
        </member>
        <member name="P:SharpBag.Settings.BitTorrentTrackerErrorCodes">
            <summary>
            BitTorrent tacker error codes and what they mean.
            </summary>
        </member>
        <member name="P:SharpBag.Settings.HttpStatusCodes">
            <summary>
            Http status codes and what they mean.
            </summary>
        </member>
        <member name="T:SharpBag.Algorithms.PriorityQueue`1">
            <summary>
            A priority queue.
            </summary>
            <typeparam name="T">The type of items in the priority queue.</typeparam>
        </member>
        <member name="M:SharpBag.Algorithms.PriorityQueue`1.#ctor">
            <summary>
            The constructor.
            </summary>
        </member>
        <member name="M:SharpBag.Algorithms.PriorityQueue`1.Add(`0,System.Int32)">
            <summary>
            Adds an item to the queue.
            </summary>
            <param name="item">An item.</param>
            <param name="priority">The priority of the item. Defaults to 0.</param>
        </member>
        <member name="M:SharpBag.Algorithms.PriorityQueue`1.Enqueue(`0,System.Int32)">
            <summary>
            Adds an item to the queue.
            </summary>
            <param name="item">An item.</param>
            <param name="priority">The priority of the item. Defaults to 0.</param>
        </member>
        <member name="M:SharpBag.Algorithms.PriorityQueue`1.GetPriorityEnumerator">
            <summary>
            Gets an enumerator sorted by the priority.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:SharpBag.Algorithms.PriorityQueue`1.Dequeue">
            <summary>
            Returns the next item in the queue, and then removes it from queue.
            </summary>
            <returns>The next item in the queue.</returns>
        </member>
        <member name="M:SharpBag.Algorithms.PriorityQueue`1.Dequeue(System.Boolean)">
            <summary>
            Returns the next item in the queue.
            </summary>
            <param name="remove">Whether to remove the item from the queue.</param>
            <returns>The next item in the queue.</returns>
        </member>
        <member name="M:SharpBag.Algorithms.PriorityQueue`1.Peek">
            <summary>
            Returns the next item in the queue, without removing it.
            </summary>
            <returns>The next item in the queue.</returns>
        </member>
        <member name="M:SharpBag.Algorithms.PriorityQueue`1.GetEnumerator">
            <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:SharpBag.Algorithms.PriorityQueue`1.GetEnumerator(System.Boolean)">
            <param name="remove">Whether to remove the items that have been returned from the enumerator.</param>
            <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:SharpBag.Algorithms.PriorityQueue`1.System#Collections#IEnumerable#GetEnumerator">
            <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="P:SharpBag.Algorithms.PriorityQueue`1.Items">
            <summary>
            The items.
            </summary>
        </member>
        <member name="P:SharpBag.Algorithms.PriorityQueue`1.Count">
            <summary>
            The number of items in the priority queue.
            </summary>
        </member>
        <member name="P:SharpBag.Algorithms.PriorityQueue`1.Item(System.Int32)">
            <summary>
            Gets or sets the item at the specified index.
            </summary>
            <param name="index">The specified index.</param>
            <returns>The item.</returns>
        </member>
        <member name="T:SharpBag.Utils">
            <summary>
            A static class with utility methods.
            </summary>
        </member>
        <member name="M:SharpBag.Utils.ExecutionTime(System.Action,System.Boolean)">
            <summary>
            Calculates the execution time of the specified action.
            </summary>
            <param name="a">The action.</param>
            <param name="handleGC">Whether to handle the garbage collector. If true, the GC will be forced to clean up before taking the time.</param>
            <returns>The execution time in milliseconds.</returns>
        </member>
        <member name="M:SharpBag.Utils.ExecutionTime``1(System.Action,System.Func{System.Diagnostics.Stopwatch,``0},System.Boolean)">
            <summary>
            Calculates the execution time of the specified action.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="a">The action.</param>
            <param name="result">What to return.</param>
            /// <param name="handleGC">Whether to handle the garbage collector. If true, the GC will be forced to clean up before taking the time.</param>
            <returns>The execution time in milliseconds.</returns>
        </member>
        <member name="M:SharpBag.Utils.CreateIEnumerable``1(``0[])">
            <summary>
            Creates an IEnumerable from the specified objects.
            </summary>
            <typeparam name="T">The type of the IEnumerable to create.</typeparam>
            <param name="objects">The objects.</param>
            <returns>The IEnumerable.</returns>
        </member>
        <member name="M:SharpBag.Utils.Generate``1(System.Func{``0})">
            <summary>
            Returns values that are generated from the generator.
            </summary>
            <typeparam name="T">The type of what is being generated.</typeparam>
            <param name="generator">The main generator.</param>
            <returns>Values that are generated from the generator.</returns>
        </member>
        <member name="M:SharpBag.Utils.Generate``1(System.Func{System.Nullable{``0}})">
            <summary>
            Returns values that are generated from the generator.
            </summary>
            <typeparam name="T">The type of what is being generated.</typeparam>
            <param name="generator">The main generator.</param>
            <returns>Values that are generated from the generator.</returns>
        </member>
        <member name="M:SharpBag.Utils.FromEnumerator``1(System.Collections.Generic.IEnumerator{``0})">
            <summary>
            Converts an enumerator to an enumerable.
            </summary>
            <typeparam name="T">The type of what is being enumered.</typeparam>
            <param name="enumerator">The enumerator to convert.</param>
            <returns>The enumerator as an enumerable.</returns>
        </member>
        <member name="M:SharpBag.Utils.Single``1(``0)">
            <summary>
            Converts a single value to an enumerable.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="value">The value.</param>
            <returns>The value as an enumerable.</returns>
        </member>
        <member name="M:SharpBag.Utils.ReadLinesFromFile(System.String)">
            <summary>
            Reads a file and converts all the lines read to an enumerable.
            </summary>
            <param name="path">The location of the file.</param>
            <returns>An enumerable that contains all the lines read.</returns>
        </member>
        <member name="M:SharpBag.Utils.ReadLinesFromConsole">
            <summary>
            Reads a line from the console and returns it as an enumerable.
            </summary>
            <returns>The line read as an enumerable.</returns>
        </member>
        <member name="M:SharpBag.Utils.ReadLinesFrom(System.IO.TextReader)">
            <summary>
            Creates an enumerable that reads lines from the specified TextReader.
            </summary>
            <param name="reader">The TextReader to read from.</param>
            <returns>An enumerable that reads lines from the specified TextReader.</returns>
        </member>
        <member name="M:SharpBag.Utils.GenerateEndless``1(System.Func{``0})">
            <summary>
            Generates data with the specified data generator.
            </summary>
            <typeparam name="T">The type of items returned by the generator.</typeparam>
            <param name="generator">A data generator.</param>
            <returns>An endless source of data from the generator.</returns>
        </member>
        <member name="T:SharpBag.Math.Converters.Length">
            <summary>
            An abstract class representing a length.
            </summary>
        </member>
        <member name="M:SharpBag.Math.Converters.Length.#ctor(System.Double)">
            <summary>
            The constructor.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:SharpBag.Math.Converters.Length.As``2">
            <summary>
            Convert on length to another length.
            </summary>
            <typeparam name="TValue">The type of input length.</typeparam>
            <typeparam name="TResult">The type of output length.</typeparam>
            <returns>The input length as an output length.</returns>
        </member>
        <member name="M:SharpBag.Math.Converters.Length.op_Implicit(SharpBag.Math.Converters.Length)~System.Double">
            <summary>
            Implicitly converts a length to a double.
            </summary>
            <param name="v">The length.</param>
            <returns>The length as a double.</returns>
        </member>
        <member name="M:SharpBag.Math.Converters.Length.ToString">
            <see cref="M:System.Object.ToString"/>
        </member>
        <member name="M:SharpBag.Math.Converters.Length.ToString(System.Boolean)">
            <see cref="M:System.Object.ToString"/>
            <param name="unit">Whether or not to append the measurement unit.</param>
        </member>
        <member name="M:SharpBag.Math.Converters.Length.ToString(System.Boolean,System.Func{System.Double,System.String})">
            <see cref="M:System.Object.ToString"/>
            <param name="unit">Whether or not to append the measurement unit.</param>
            <param name="result">The result.</param>
        </member>
        <member name="P:SharpBag.Math.Converters.Length.Unit">
            <summary>
            The unit.
            </summary>
        </member>
        <member name="P:SharpBag.Math.Converters.Length.BaseValue">
            <summary>
            The base value.
            </summary>
        </member>
        <member name="P:SharpBag.Math.Converters.Length.Value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="T:SharpBag.Math.Converters.Millimeter">
            <summary>
            A class representing a millimeter.
            </summary>
        </member>
        <member name="M:SharpBag.Math.Converters.Millimeter.#ctor(System.Double)">
            <summary>
            The constructor.
            </summary>
            <param name="v">The value.</param>
        </member>
        <member name="P:SharpBag.Math.Converters.Millimeter.Unit">
            <summary>
            The unit.
            </summary>
        </member>
        <member name="P:SharpBag.Math.Converters.Millimeter.BaseValue">
            <summary>
            The base value.
            </summary>
        </member>
        <member name="T:SharpBag.Math.Converters.Centimeter">
            <summary>
            A class representing a centimeter.
            </summary>
        </member>
        <member name="M:SharpBag.Math.Converters.Centimeter.#ctor(System.Double)">
            <summary>
            The constructor.
            </summary>
            <param name="v">The value.</param>
        </member>
        <member name="P:SharpBag.Math.Converters.Centimeter.Unit">
            <summary>
            The unit.
            </summary>
        </member>
        <member name="P:SharpBag.Math.Converters.Centimeter.BaseValue">
            <summary>
            The base value.
            </summary>
        </member>
        <member name="T:SharpBag.Math.Converters.Meter">
            <summary>
            A class representing a meter.
            </summary>
        </member>
        <member name="M:SharpBag.Math.Converters.Meter.#ctor(System.Double)">
            <summary>
            The constructor.
            </summary>
            <param name="v">The value.</param>
        </member>
        <member name="P:SharpBag.Math.Converters.Meter.Unit">
            <summary>
            The unit.
            </summary>
        </member>
        <member name="P:SharpBag.Math.Converters.Meter.BaseValue">
            <summary>
            The base value.
            </summary>
        </member>
        <member name="T:SharpBag.Math.Converters.Kilometer">
            <summary>
            A class representing a kilometer.
            </summary>
        </member>
        <member name="M:SharpBag.Math.Converters.Kilometer.#ctor(System.Double)">
            <summary>
            The constructor.
            </summary>
            <param name="v">The value.</param>
        </member>
        <member name="P:SharpBag.Math.Converters.Kilometer.Unit">
            <summary>
            The unit.
            </summary>
        </member>
        <member name="P:SharpBag.Math.Converters.Kilometer.BaseValue">
            <summary>
            The base value.
            </summary>
        </member>
        <member name="T:SharpBag.FK.StærstaRunuSumma">
            <summary>
            Klasi sem finnur stærstu runu-summu.
            </summary>
        </member>
        <member name="F:SharpBag.FK.StærstaRunuSumma.Runa">
            <summary>
            Runan.
            </summary>
        </member>
        <member name="F:SharpBag.FK.StærstaRunuSumma.StærstaSumma">
            <summary>
            Stærsta runu-summan.
            </summary>
        </member>
        <member name="F:SharpBag.FK.StærstaRunuSumma.StærstuRunur">
            <summary>
            Allar stærstu runurnar.
            </summary>
        </member>
        <member name="M:SharpBag.FK.StærstaRunuSumma.#ctor(System.Int32[])">
            <summary>
            Smiður fyrir StærstaRunuSumma-klasann.
            </summary>
            <param name="runa">Array af tölum.</param>
        </member>
        <member name="M:SharpBag.FK.StærstaRunuSumma.#ctor(System.Collections.Generic.List{System.Int32})">
            <summary>
            Smiður fyrir StærstaRunuSumma-klasann.
            </summary>
            <param name="runa">Listi af tölum.</param>
        </member>
        <member name="M:SharpBag.FK.StærstaRunuSumma.FinnaStærstuSummu">
            <summary>
            Finnur stærstu summuna.
            </summary>
        </member>
        <member name="M:SharpBag.FK.StærstaRunuSumma.Moguleikar">
            <summary>
            Finnur allar mögulegar runur.
            </summary>
            <returns>Allar mögulegar runur.</returns>
        </member>
        <member name="T:SharpBag.Time.TimeUtils">
            <summary>
            A static class with utilites regarding dates and time.
            </summary>
        </member>
        <member name="M:SharpBag.Time.TimeUtils.IsLeapYear(System.Int32)">
            <summary>
            Determines whether the specified year is leap year or not.
            </summary>
            <param name="year">A year.</param>
            <returns>Whether the specified year is leap year or not.</returns>
        </member>
        <member name="T:SharpBag.FK.Minesweeper">
            <summary>
            Method sem gætu verið notuð fyrir Minesweeper leikinn
            </summary>
        </member>
        <member name="M:SharpBag.FK.Minesweeper.ManyBombsAround(System.String[0:,0:],System.String,System.Int32,System.Int32)">
            <summary>
            Gáir hvað margar sprengjur eru í kringum reit
            </summary>
            <param name="field">Spilaborðið</param>
            <param name="bomb">Hvernig sprengjan er</param>
            <param name="x">X-hnitin á reitnum</param>
            <param name="y">Y-hnitin á reitnum</param>
            <returns>Hversu margar sprengjur eru í kringum reitinn</returns>
        </member>
        <member name="M:SharpBag.FK.Minesweeper.OnField(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Athugar hvort hnit séu inná borðinu
            </summary>
            <param name="w">Breydd borðsins</param>
            <param name="h">Hæð borðsins</param>
            <param name="x">X-hnitið</param>
            <param name="y">Y-hnitið</param>
            <returns>Hvort hnitin séu inná borðinu</returns>
        </member>
        <member name="T:SharpBag.CharType">
            <summary>
            Char types.
            </summary>
        </member>
        <member name="F:SharpBag.CharType.AlphabeticLower">
            <summary>
            A lower-case alphabetic char.
            </summary>
        </member>
        <member name="F:SharpBag.CharType.AlphabeticUpper">
            <summary>
            An upper-case alphabetic char.
            </summary>
        </member>
        <member name="F:SharpBag.CharType.AlphabeticAny">
            <summary>
            An alphabetic char.
            </summary>
        </member>
        <member name="F:SharpBag.CharType.AlphanumericLower">
            <summary>
            A lower-case alphanumeric char.
            </summary>
        </member>
        <member name="F:SharpBag.CharType.AlphanumericUpper">
            <summary>
            An upper-case alphanumeric char.
            </summary>
        </member>
        <member name="F:SharpBag.CharType.AlphanumericAny">
            <summary>
            An alphanumeric char.
            </summary>
        </member>
        <member name="F:SharpBag.CharType.Numeric">
            <summary>
            A numeric char.
            </summary>
        </member>
        <member name="T:SharpBag.RandomExtensions">
            <summary>
            A static class with extensions for the Random class.
            </summary>
        </member>
        <member name="M:SharpBag.RandomExtensions.NextBool(System.Random,System.Double)">
            <summary>
            Returns a random boolean.
            </summary>
            <param name="random">The current instance.</param>
            <param name="probability">The probability of returning true.</param>
            <returns>A random boolean.</returns>
        </member>
        <member name="M:SharpBag.RandomExtensions.NextChar(System.Random,SharpBag.CharType)">
            <summary>
            Returns a random character.
            </summary>
            <param name="random">The current instance.</param>
            <param name="mode">What kind of characters are allowed.</param>
            <returns>A random character.</returns>
        </member>
        <member name="M:SharpBag.RandomExtensions.NextChar(System.Random)">
            <summary>
            Returns a random character.
            </summary>
            <param name="random">The current instance.</param>
            <returns>A random character.</returns>
        </member>
        <member name="M:SharpBag.RandomExtensions.NextDateTime(System.Random,System.DateTime,System.DateTime)">
            <summary>
            Returns a random DateTime between minValue and maxValue.
            </summary>
            <param name="random">The current instance.</param>
            <param name="minValue">The lowest value.</param>
            <param name="maxValue">The highest value.</param>
            <returns>A random DateTime between minValue and maxValue.</returns>
        </member>
        <member name="M:SharpBag.RandomExtensions.NextDateTime(System.Random)">
            <summary>
            Returns a random DateTime.
            </summary>
            <param name="random">The current instance.</param>
            <returns>A random DateTime.</returns>
        </member>
        <member name="M:SharpBag.RandomExtensions.NextDouble(System.Random,System.Double,System.Double)">
            <summary>
            Returns a random double between minValue and maxValue.
            </summary>
            <param name="random">The current instance.</param>
            <param name="minValue">The lowest value.</param>
            <param name="maxValue">The highest value.</param>
            <returns>A random double between minValue and maxValue.</returns>
        </member>
        <member name="M:SharpBag.RandomExtensions.NextString(System.Random,System.Int32,SharpBag.CharType)">
            <summary>
            Returns a random string with the specified length.
            </summary>
            <param name="random">The current instance.</param>
            <param name="numChars">The length of the string.</param>
            <param name="mode">The type of characters in the string.</param>
            <returns>A random string with the specified length.</returns>
        </member>
        <member name="M:SharpBag.RandomExtensions.NextTimeSpan(System.Random,System.TimeSpan,System.TimeSpan)">
            <summary>
            Returns a random TimeSpan between minValue and maxValue.
            </summary>
            <param name="random">The current instance.</param>
            <param name="minValue">The min value.</param>
            <param name="maxValue">The max value.</param>
            <returns>A random TimeSpan between minValue and maxValue.</returns>
        </member>
        <member name="M:SharpBag.RandomExtensions.NextTimeSpan(System.Random)">
            <summary>
            Returns a random TimeSpan.
            </summary>
            <param name="random">The current instance.</param>
            <returns>A random TimeSpan.</returns>
        </member>
        <member name="T:SharpBag.Net.TcpClientHandler">
            <summary>
            A class that handles TcpClients.
            </summary>
        </member>
        <member name="M:SharpBag.Net.TcpClientHandler.#ctor(System.Net.Sockets.TcpClient,System.Text.Encoding,System.Int32,System.Int32,System.Int32)">
            <summary>
            The constructor.
            </summary>
            <param name="client">The TcpClient.</param>
            <param name="encoding">The encoding to use.</param>
            <param name="checkInterval">The interval to check for messages.</param>
            <param name="ping">The interval, in milliseconds, to ping the client. If it's a negative integer, no pings are sent.</param>
            <param name="receiveTimeout">The time, in milliseconds, before a timeout occurs when reading data from the server.</param>
        </member>
        <member name="M:SharpBag.Net.TcpClientHandler.SendMessage(System.String)">
            <summary>
            Sends a message.
            </summary>
            <param name="s">The message to send.</param>
            <returns>Whether the message was sent.</returns>
        </member>
        <member name="M:SharpBag.Net.TcpClientHandler.Stop">
            <summary>
            Stops listening for messages, stops the listening thread and closes the TcpClient.
            </summary>
        </member>
        <member name="M:SharpBag.Net.TcpClientHandler.Listen">
            <summary>
            Listen to messages.
            </summary>
        </member>
        <member name="M:SharpBag.Net.TcpClientHandler.op_Equality(SharpBag.Net.TcpClientHandler,SharpBag.Net.TcpClientHandler)">
            <summary>
            Checks whether a is equal to b.
            </summary>
            <param name="a">A.</param>
            <param name="b">B.</param>
            <returns>Whether a is equal to b.</returns>
        </member>
        <member name="M:SharpBag.Net.TcpClientHandler.op_Inequality(SharpBag.Net.TcpClientHandler,SharpBag.Net.TcpClientHandler)">
            <summary>
            Checks whether a is not equal to b.
            </summary>
            <param name="a">A.</param>
            <param name="b">B.</param>
            <returns>Whether a is not equal to b.</returns>
        </member>
        <member name="M:SharpBag.Net.TcpClientHandler.Equals(System.Object)">
            <see cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:SharpBag.Net.TcpClientHandler.GetHashCode">
            <see cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:SharpBag.Net.TcpClientHandler.Dispose">
            <see cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="P:SharpBag.Net.TcpClientHandler.Thread">
            <summary>
            The listening thread.
            </summary>
        </member>
        <member name="P:SharpBag.Net.TcpClientHandler.BaseStream">
            <summary>
            The stream.
            </summary>
        </member>
        <member name="P:SharpBag.Net.TcpClientHandler.Reader">
            <summary>
            The stream reader.
            </summary>
        </member>
        <member name="P:SharpBag.Net.TcpClientHandler.Writer">
            <summary>
            The stream writer.
            </summary>
        </member>
        <member name="P:SharpBag.Net.TcpClientHandler.Client">
            <summary>
            The client.
            </summary>
        </member>
        <member name="P:SharpBag.Net.TcpClientHandler.Listening">
            <summary>
            Whether the handler is listening for messages.
            </summary>
        </member>
        <member name="P:SharpBag.Net.TcpClientHandler.CheckInterval">
            <summary>
            The interval, in milliseconds, to check for messages.
            </summary>
        </member>
        <member name="P:SharpBag.Net.TcpClientHandler.PingThread">
            <summary>
            The ping thread.
            </summary>
        </member>
        <member name="P:SharpBag.Net.TcpClientHandler.PingInterval">
            <summary>
            The ping interval.
            </summary>
        </member>
        <member name="E:SharpBag.Net.TcpClientHandler.MessageReceived">
            <summary>
            An event that is fired when a message is received.
            </summary>
        </member>
        <member name="E:SharpBag.Net.TcpClientHandler.Disconnected">
            <summary>
            An event that is fired when the TcpClient disconnects.
            </summary>
        </member>
        <member name="T:SharpBag.FK.Stæ">
            <summary>
            Stærðfræði-tengd method
            </summary>
        </member>
        <member name="M:SharpBag.FK.Stæ.HefjaIVeldi(System.Double,System.Int32)">
            <summary>
            Hefur N í veldið veldi
            </summary>
            <param name="N">Talan</param>
            <param name="veldi">Veldið sem talan á að fara í</param>
            <returns></returns>
        </member>
        <member name="M:SharpBag.FK.Stæ.PI">
            <summary>
            PI
            </summary>
            <returns>PI</returns>
        </member>
        <member name="T:SharpBag.Time.TimeExtensions">
            <summary>
            A static class with extension methods for date and time.
            </summary>
        </member>
        <member name="M:SharpBag.Time.TimeExtensions.January(System.Int32,System.Int32)">
            <summary>
            Returns a new DateTime with the specified day, month and year.
            </summary>
            <param name="day">A day.</param>
            <param name="year">A year.</param>
            <returns>The new DateTime.</returns>
        </member>
        <member name="M:SharpBag.Time.TimeExtensions.February(System.Int32,System.Int32)">
            <summary>
            Returns a new DateTime with the specified day, month and year.
            </summary>
            <param name="day">A day.</param>
            <param name="year">A year.</param>
            <returns>The new DateTime.</returns>
        </member>
        <member name="M:SharpBag.Time.TimeExtensions.March(System.Int32,System.Int32)">
            <summary>
            Returns a new DateTime with the specified day, month and year.
            </summary>
            <param name="day">A day.</param>
            <param name="year">A year.</param>
            <returns>The new DateTime.</returns>
        </member>
        <member name="M:SharpBag.Time.TimeExtensions.April(System.Int32,System.Int32)">
            <summary>
            Returns a new DateTime with the specified day, month and year.
            </summary>
            <param name="day">A day.</param>
            <param name="year">A year.</param>
            <returns>The new DateTime.</returns>
        </member>
        <member name="M:SharpBag.Time.TimeExtensions.May(System.Int32,System.Int32)">
            <summary>
            Returns a new DateTime with the specified day, month and year.
            </summary>
            <param name="day">A day.</param>
            <param name="year">A year.</param>
            <returns>The new DateTime.</returns>
        </member>
        <member name="M:SharpBag.Time.TimeExtensions.June(System.Int32,System.Int32)">
            <summary>
            Returns a new DateTime with the specified day, month and year.
            </summary>
            <param name="day">A day.</param>
            <param name="year">A year.</param>
            <returns>The new DateTime.</returns>
        </member>
        <member name="M:SharpBag.Time.TimeExtensions.July(System.Int32,System.Int32)">
            <summary>
            Returns a new DateTime with the specified day, month and year.
            </summary>
            <param name="day">A day.</param>
            <param name="year">A year.</param>
            <returns>The new DateTime.</returns>
        </member>
        <member name="M:SharpBag.Time.TimeExtensions.August(System.Int32,System.Int32)">
            <summary>
            Returns a new DateTime with the specified day, month and year.
            </summary>
            <param name="day">A day.</param>
            <param name="year">A year.</param>
            <returns>The new DateTime.</returns>
        </member>
        <member name="M:SharpBag.Time.TimeExtensions.September(System.Int32,System.Int32)">
            <summary>
            Returns a new DateTime with the specified day, month and year.
            </summary>
            <param name="day">A day.</param>
            <param name="year">A year.</param>
            <returns>The new DateTime.</returns>
        </member>
        <member name="M:SharpBag.Time.TimeExtensions.October(System.Int32,System.Int32)">
            <summary>
            Returns a new DateTime with the specified day, month and year.
            </summary>
            <param name="day">A day.</param>
            <param name="year">A year.</param>
            <returns>The new DateTime.</returns>
        </member>
        <member name="M:SharpBag.Time.TimeExtensions.November(System.Int32,System.Int32)">
            <summary>
            Returns a new DateTime with the specified day, month and year.
            </summary>
            <param name="day">A day.</param>
            <param name="year">A year.</param>
            <returns>The new DateTime.</returns>
        </member>
        <member name="M:SharpBag.Time.TimeExtensions.December(System.Int32,System.Int32)">
            <summary>
            Returns a new DateTime with the specified day, month and year.
            </summary>
            <param name="day">A day.</param>
            <param name="year">A year.</param>
            <returns>The new DateTime.</returns>
        </member>
        <member name="M:SharpBag.Time.TimeExtensions.At(System.DateTime,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the current instance to the specified hour, minute, second and millisecond.
            </summary>
            <param name="datetime">The current instance.</param>
            <param name="hour">The specified hour.</param>
            <param name="minute">The specified minute.</param>
            <param name="second">The specified second.</param>
            <param name="millisecond">The specified millisecond.</param>
            <returns>The new DateTime.</returns>
        </member>
        <member name="M:SharpBag.Time.TimeExtensions.Ticks(System.Int64)">
            <summary>
            Gets a TimeSpan with current instance as ticks.
            </summary>
            <param name="n">The current instance.</param>
            <returns>The TimeSpan.</returns>
        </member>
        <member name="M:SharpBag.Time.TimeExtensions.Milliseconds(System.Double)">
            <summary>
            Gets a TimeSpan with current instance as milliseconds.
            </summary>
            <param name="n">The current instance.</param>
            <returns>The TimeSpan.</returns>
        </member>
        <member name="M:SharpBag.Time.TimeExtensions.Seconds(System.Double)">
            <summary>
            Gets a TimeSpan with current instance as seconds.
            </summary>
            <param name="n">The current instance.</param>
            <returns>The TimeSpan.</returns>
        </member>
        <member name="M:SharpBag.Time.TimeExtensions.Minutes(System.Double)">
            <summary>
            Gets a TimeSpan with current instance as minutes.
            </summary>
            <param name="n">The current instance.</param>
            <returns>The TimeSpan.</returns>
        </member>
        <member name="M:SharpBag.Time.TimeExtensions.Hours(System.Double)">
            <summary>
            Gets a TimeSpan with current instance as hours.
            </summary>
            <param name="n">The current instance.</param>
            <returns>The TimeSpan.</returns>
        </member>
        <member name="M:SharpBag.Time.TimeExtensions.Days(System.Double)">
            <summary>
            Gets a TimeSpan with current instance as days.
            </summary>
            <param name="n">The current instance.</param>
            <returns>The TimeSpan.</returns>
        </member>
        <member name="M:SharpBag.Time.TimeExtensions.Weeks(System.Double)">
            <summary>
            Gets a TimeSpan with current instance as weeks.
            </summary>
            <param name="n">The current instance.</param>
            <returns>The TimeSpan.</returns>
        </member>
        <member name="M:SharpBag.Time.TimeExtensions.Milliseconds(System.Int32)">
            <summary>
            Gets a TimeSpan with current instance as milliseconds.
            </summary>
            <param name="n">The current instance.</param>
            <returns>The TimeSpan.</returns>
        </member>
        <member name="M:SharpBag.Time.TimeExtensions.Seconds(System.Int32)">
            <summary>
            Gets a TimeSpan with current instance as seconds.
            </summary>
            <param name="n">The current instance.</param>
            <returns>The TimeSpan.</returns>
        </member>
        <member name="M:SharpBag.Time.TimeExtensions.Minutes(System.Int32)">
            <summary>
            Gets a TimeSpan with current instance as minutes.
            </summary>
            <param name="n">The current instance.</param>
            <returns>The TimeSpan.</returns>
        </member>
        <member name="M:SharpBag.Time.TimeExtensions.Hours(System.Int32)">
            <summary>
            Gets a TimeSpan with current instance as hours.
            </summary>
            <param name="n">The current instance.</param>
            <returns>The TimeSpan.</returns>
        </member>
        <member name="M:SharpBag.Time.TimeExtensions.Days(System.Int32)">
            <summary>
            Gets a TimeSpan with current instance as days.
            </summary>
            <param name="n">The current instance.</param>
            <returns>The TimeSpan.</returns>
        </member>
        <member name="M:SharpBag.Time.TimeExtensions.Weeks(System.Int32)">
            <summary>
            Gets a TimeSpan with current instance as weeks.
            </summary>
            <param name="n">The current instance.</param>
            <returns>The TimeSpan.</returns>
        </member>
        <member name="M:SharpBag.Time.TimeExtensions.To(System.DateTime,System.DateTime)">
            <summary>
            Returns a collection of DateTimes with a one date interval.
            </summary>
            <param name="from">The current instance, or the DateTime to start at.</param>
            <param name="to">The DateTime to end at.</param>
            <returns>A collection of DateTimes with a one date interval.</returns>
        </member>
        <member name="M:SharpBag.Time.TimeExtensions.To(System.DateTime,System.DateTime,System.TimeSpan)">
            <summary>
            Returns a collection of DateTimes with a one date interval.
            </summary>
            <param name="from">The current instance, or the DateTime to start at.</param>
            <param name="to">The DateTime to end at.</param>
            <param name="step">The step to take on each iteration.</param>
            <returns>A collection of DateTimes with a one date interval.</returns>
        </member>
        <member name="M:SharpBag.Time.TimeExtensions.Elapsed(System.DateTime)">
            <summary>
            Returns the time that has elapsed since the time of the current instance.
            </summary>
            <param name="datetime">The current instance.</param>
            <returns>The time that has elapsed since the time of the current instance.</returns>
        </member>
        <member name="M:SharpBag.Time.TimeExtensions.WeekOfYear(System.DateTime)">
            <summary>
            Returns what week of the year, the current instance is on.
            </summary>
            <param name="datetime">The current instance.</param>
            <returns>What week of the year, the current instance is on.</returns>
        </member>
        <member name="T:SharpBag.Math.Converters.Weight">
            <summary>
            An abstract class for weight.
            </summary>
        </member>
        <member name="M:SharpBag.Math.Converters.Weight.#ctor(System.Double)">
            <summary>
            The constructor.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:SharpBag.Math.Converters.Weight.As``2">
            <summary>
            Converts one weight to another weight.
            </summary>
            <typeparam name="TValue">The type of input weight.</typeparam>
            <typeparam name="TResult">The type of output weight.</typeparam>
            <returns>The input weight as output weight.</returns>
        </member>
        <member name="M:SharpBag.Math.Converters.Weight.op_Implicit(SharpBag.Math.Converters.Weight)~System.Double">
            <summary>
            An implicit convert from a weight to a double.
            </summary>
            <param name="v">The weight.</param>
            <returns>The weight as a double.</returns>
        </member>
        <member name="M:SharpBag.Math.Converters.Weight.ToString">
            <see cref="M:System.Object.ToString"/>
        </member>
        <member name="M:SharpBag.Math.Converters.Weight.ToString(System.Boolean)">
            <see cref="M:System.Object.ToString"/>
            <param name="unit">Whether or not to append the measurement unit.</param>
        </member>
        <member name="M:SharpBag.Math.Converters.Weight.ToString(System.Boolean,System.Func{System.Double,System.String})">
            <see cref="M:System.Object.ToString"/>
            <param name="unit">Whether or not to append the measurement unit.</param>
            <param name="result">The result.</param>
        </member>
        <member name="P:SharpBag.Math.Converters.Weight.Unit">
            <summary>
            The unit.
            </summary>
        </member>
        <member name="P:SharpBag.Math.Converters.Weight.BaseValue">
            <summary>
            The base value.
            </summary>
        </member>
        <member name="P:SharpBag.Math.Converters.Weight.Value">
            <summary>
            THe value.
            </summary>
        </member>
        <member name="T:SharpBag.Math.Converters.Milligram">
            <summary>
            A class representing a milligram.
            </summary>
        </member>
        <member name="M:SharpBag.Math.Converters.Milligram.#ctor(System.Double)">
            <summary>
            The main constructor.
            </summary>
            <param name="v">The value.</param>
        </member>
        <member name="P:SharpBag.Math.Converters.Milligram.Unit">
            <summary>
            The unit.
            </summary>
        </member>
        <member name="P:SharpBag.Math.Converters.Milligram.BaseValue">
            <summary>
            The base value.
            </summary>
        </member>
        <member name="T:SharpBag.Math.Converters.Gram">
            <summary>
            A class representing a gram.
            </summary>
        </member>
        <member name="M:SharpBag.Math.Converters.Gram.#ctor(System.Double)">
            <summary>
            The main constructor.
            </summary>
            <param name="v">The value.</param>
        </member>
        <member name="P:SharpBag.Math.Converters.Gram.Unit">
            <summary>
            The unit.
            </summary>
        </member>
        <member name="P:SharpBag.Math.Converters.Gram.BaseValue">
            <summary>
            The base value.
            </summary>
        </member>
        <member name="T:SharpBag.Math.Converters.Kilogram">
            <summary>
            A class representing a kilogram.
            </summary>
        </member>
        <member name="M:SharpBag.Math.Converters.Kilogram.#ctor(System.Double)">
            <summary>
            The main constructor.
            </summary>
            <param name="v">The value.</param>
        </member>
        <member name="P:SharpBag.Math.Converters.Kilogram.Unit">
            <summary>
            The unit.
            </summary>
        </member>
        <member name="P:SharpBag.Math.Converters.Kilogram.BaseValue">
            <summary>
            The base value.
            </summary>
        </member>
        <member name="T:SharpBag.Logging.Logger">
            <summary>
            A class used for application logging.
            </summary>
        </member>
        <member name="M:SharpBag.Logging.Logger.#ctor(SharpBag.Logging.Logger.LogFunction,System.Boolean,System.String)">
            <summary>
            A class used for application logging.
            </summary>
            <param name="logger">The log function.</param>
            <param name="timestamp">Whether to put a timestamp on all logs.</param>
            <param name="timeformat">The format of the timestamp.</param>
        </member>
        <member name="M:SharpBag.Logging.Logger.Log(System.String)">
            <summary>
            Log the specified string.
            </summary>
            <param name="s">The string to be logged.</param>
        </member>
        <member name="M:SharpBag.Logging.Logger.LogIf(System.Boolean,System.String)">
            <summary>
            Log the specified string if expression is true.
            </summary>
            <param name="expression">An expression.</param>
            <param name="s">The string to be logged.</param>
        </member>
        <member name="M:SharpBag.Logging.Logger.LogIfNot(System.Boolean,System.String)">
            <summary>
            Log the specified string if expression is false.
            </summary>
            <param name="expression">An expression.</param>
            <param name="s">The string to be logged.</param>
        </member>
        <member name="P:SharpBag.Logging.Logger.LoggerFunction">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="P:SharpBag.Logging.Logger.Timestamp">
            <summary>
            Whether to prepend a timestamp on the output string or not.
            </summary>
        </member>
        <member name="P:SharpBag.Logging.Logger.Timeformat">
            <summary>
            The format of the timestamp. See DateTime.ToString().
            </summary>
        </member>
        <member name="P:SharpBag.Logging.Logger.Enabled">
            <summary>
            Whether the logger is enabled or not.
            </summary>
        </member>
        <member name="T:SharpBag.Logging.Logger.LogFunction">
            <summary>
            A function used for logging.
            </summary>
            <param name="s">The output string that needs to be handled.</param>
        </member>
        <member name="T:SharpBag.FK.MVC.FKModel">
            <summary>
            An MVC model.
            </summary>
        </member>
        <member name="M:SharpBag.FK.MVC.FKModel.Read``1(System.String,System.String)">
            <summary>
            Read an object from the console.
            </summary>
            <typeparam name="T">The type of the object to read.</typeparam>
            <param name="q">A description of the object.</param>
            <param name="separator">A separator between the description and the object.</param>
            <returns>The object that was read.</returns>
        </member>
        <member name="M:SharpBag.FK.MVC.FKModel.Read(System.String,System.String)">
            <summary>
            Read a string from the console.
            </summary>
            <param name="q">A description of the string.</param>
            <param name="separator">A separator between the description and the string.</param>
            <returns>The string that was read.</returns>
        </member>
        <member name="M:SharpBag.FK.MVC.FKModel.ReadInt(System.String,System.String)">
            <summary>
            Read an integer from the console.
            </summary>
            <param name="q">A description of the integer.</param>
            <param name="separator">A separator between the description and the integer.</param>
            <returns>The integer that was read.</returns>
        </member>
        <member name="M:SharpBag.FK.MVC.FKModel.ReadDouble(System.String,System.String)">
            <summary>
            Read an integer from the console.
            </summary>
            <param name="q">A description of the integer.</param>
            <param name="separator">A separator between the description and the integer.</param>
            <returns>The integer that was read.</returns>
        </member>
        <member name="M:SharpBag.FK.MVC.FKModel.ReadFile(System.String,System.Text.Encoding)">
            <summary>
            Reads the specified file.
            </summary>
            <param name="fileName">The name of the file to read.</param>
            <param name="encoding">An encoding.</param>
            <returns>The content of the file.</returns>
        </member>
        <member name="M:SharpBag.FK.MVC.FKModel.ReadFileLines(System.String,System.Text.Encoding)">
            <summary>
            Reads the specified file.
            </summary>
            <param name="fileName">The name of the file to read.</param>
            <param name="encoding">An encoding.</param>
            <returns>The lines of the file.</returns>
        </member>
        <member name="T:SharpBag.FK.MVC.FKController">
            <summary>
            An MVC controller.
            </summary>
        </member>
        <member name="M:SharpBag.FK.MVC.FKController.#ctor(SharpBag.FK.MVC.FKModel,System.String,System.Boolean,System.Char,System.Char,System.String[])">
            <summary>
            The constructor.
            </summary>
            <param name="model">The model for the controller.</param>
            <param name="title">The title of the controller.</param>
            <param name="timeAll">Whether to time all actions.</param>
            <param name="verticalChar">A char for the vertical wall of the title.</param>
            <param name="horizontalChar">A char for the horizontal wall of the title.</param>
            <param name="args">Arguments, or settings, for the controller.</param>
        </member>
        <member name="M:SharpBag.FK.MVC.FKController.ListActions">
            <summary>
            List all the actions in the controller.
            </summary>
        </member>
        <member name="M:SharpBag.FK.MVC.FKController.ExecuteAction(System.String,System.Boolean,System.Boolean)">
            <summary>
            Execute the specified action.
            </summary>
            <param name="actionName">The name of the action.</param>
            <param name="pause">Whether to pause after the action is finished.</param>
            <param name="header">Whether to display a header.</param>
        </member>
        <member name="M:SharpBag.FK.MVC.FKController.All">
            <summary>
            An action that executes all the other actions.
            </summary>
        </member>
        <member name="M:SharpBag.FK.MVC.FKController.Run">
            <summary>
            Run the controller in an interactive mode.
            </summary>
        </member>
        <member name="M:SharpBag.FK.MVC.FKController.Exit">
            <summary>
            An action that exits the program.
            </summary>
        </member>
        <member name="M:SharpBag.FK.MVC.FKController.PreActionExecute">
            <summary>
            A hook that is fired before an action is executed.
            </summary>
        </member>
        <member name="M:SharpBag.FK.MVC.FKController.PostActionExecute">
            <summary>
            A hook that is fired after an action is executed.
            </summary>
        </member>
        <member name="M:SharpBag.FK.MVC.FKController.SimpleView(System.Collections.Generic.IEnumerable{System.Object},System.Boolean)">
            <summary>
            A simple view.
            </summary>
            <param name="objs">A collection of objects.</param>
            <param name="space">Whether to prepend a space before displaying the view.</param>
        </member>
        <member name="M:SharpBag.FK.MVC.FKController.SimpleView``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>
            A simple view.
            </summary>
            <typeparam name="T">The type of items in the collection.</typeparam>
            <param name="objs">A collection of objects.</param>
            <param name="space">Whether to prepend a space before displaying the view.</param>
        </member>
        <member name="M:SharpBag.FK.MVC.FKController.SimpleView(System.Boolean,System.Object[])">
            <summary>
            A simple view.
            </summary>
            <param name="space">Whether to prepend a space before displaying the view.</param>
            <param name="objs">A collection of objects.</param>
        </member>
        <member name="M:SharpBag.FK.MVC.FKController.SimpleView(System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.Boolean)">
            <summary>
            A simple view.
            </summary>
            <param name="objs">A dictionary with keys and values.</param>
            <param name="between">A string to put in between the key and the value.</param>
            <param name="space">Whether to prepend a space before displaying the view.</param>
        </member>
        <member name="M:SharpBag.FK.MVC.FKController.SimpleView(System.String,System.Boolean)">
            <summary>
            A simple view.
            </summary>
            <param name="s">A string to be printed.</param>
            <param name="space">Whether to prepend a space before displaying the view.</param>
        </member>
        <member name="M:SharpBag.FK.MVC.FKController.BoolView(System.Boolean,System.String,System.String,System.Boolean)">
            <summary>
            A boolean view.
            </summary>
            <param name="condition">An expression.</param>
            <param name="trueString">A string that will be printed if the expression is true.</param>
            <param name="falseString">A string that will be printed if the expression is false.</param>
            <param name="space">Whether to prepend a space before displaying the view.</param>
        </member>
        <member name="M:SharpBag.FK.MVC.FKController.BoolView(System.Boolean,System.String,System.String,System.String,System.Boolean)">
            <summary>
            A boolean view.
            </summary>
            <param name="condition">An expression.</param>
            <param name="start">The first part of the string.</param>
            <param name="not">A string that will be printed between start and end if the expression is false.</param>
            <param name="end">The last part of the string.</param>
            <param name="space">Whether to prepend a space before displaying the view.</param>
        </member>
        <member name="P:SharpBag.FK.MVC.FKController.Title">
            <summary>
            The title of the controller.
            </summary>
        </member>
        <member name="P:SharpBag.FK.MVC.FKController.Model">
            <summary>
            The model for the controller.
            </summary>
        </member>
        <member name="P:SharpBag.FK.MVC.FKController.VerticalChar">
            <summary>
            A char for the vertical wall of the title.
            </summary>
        </member>
        <member name="P:SharpBag.FK.MVC.FKController.HorizontalChar">
            <summary>
            A char for the horizontal wall of the title.
            </summary>
        </member>
        <member name="P:SharpBag.FK.MVC.FKController.TimeAll">
            <summary>
            Whether to time all actions.
            </summary>
        </member>
        <member name="T:SharpBag.Database.MySqlDB">
            <summary>
            A class for working with MySQL databases.
            </summary>
        </member>
        <member name="M:SharpBag.Database.MySqlDB.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            The constructor.
            </summary>
            <param name="server">The server to connect to.</param>
            <param name="schema">The default schema.</param>
            <param name="username">The username used to connect.</param>
            <param name="password">The password used to connect.</param>
        </member>
        <member name="M:SharpBag.Database.MySqlDB.SQLEscape(System.String)">
            <summary>
            Escapes a string for use in an SQL query.
            </summary>
            <param name="s">The string to escape.</param>
            <returns>The escaped string.</returns>
        </member>
        <member name="M:SharpBag.Database.MySqlDB.Close">
            <summary>
            Kills the current thread and then closes the connection.
            </summary>
        </member>
        <member name="M:SharpBag.Database.MySqlDB.CreateCommand(System.String,MySql.Data.MySqlClient.MySqlConnection)">
            <summary>
            Creates a query command.
            </summary>
            <param name="q">The query.</param>
            <param name="c">The connection.</param>
            <returns>The query command.</returns>
        </member>
        <member name="M:SharpBag.Database.MySqlDB.CreateConnectionString">
            <summary>
            Creates connection string.
            </summary>
            <returns>The connection string.</returns>
        </member>
        <member name="T:SharpBag.FK.MVC.FKViewAttribute">
            <summary>
            An MVC view.
            </summary>
        </member>
        <member name="T:SharpBag.Strings.StringExtensions">
            <summary>
            Extension methods for the BagStrings namespace.
            </summary>
        </member>
        <member name="M:SharpBag.Strings.StringExtensions.Reverse(System.String)">
            <summary>
            Reverses the current string instance.
            </summary>
            <param name="s">The current instance.</param>
            <returns>The current string instance reversed.</returns>
        </member>
        <member name="M:SharpBag.Strings.StringExtensions.ReverseXor(System.String)">
            <summary>
            Reverses the current string instance using XORing.
            </summary>
            <param name="s">The current instance.</param>
            <returns>The current string instance reversed.</returns>
        </member>
        <member name="M:SharpBag.Strings.StringExtensions.ToStringPretty``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String,System.String)">
            <summary>
            Outputs the enumerable as a pretty string.
            </summary>
            <typeparam name="T">The type of elements.</typeparam>
            <param name="source">The current instance.</param>
            <param name="before">A string to prepend to the output.</param>
            <param name="delimiter">A string to insert in between the elements.</param>
            <param name="after">A string to append to the output.</param>
            <returns>The current instance as a pretty string.</returns>
        </member>
        <member name="M:SharpBag.Strings.StringExtensions.ToTitleCase(System.String)">
            <summary>
            Converts the current instance to title case.
            </summary>
            <param name="text">The current instance.</param>
            <returns>The current instance with title case.</returns>
        </member>
        <member name="M:SharpBag.Strings.StringExtensions.Wordify(System.String)">
            <summary>
            Takes a camelCase or a PascalCase string and splits it up into words.
            </summary>
            <param name="s">A camelCase or a PascalCase string.</param>
            <returns>The words.</returns>
        </member>
        <member name="M:SharpBag.Strings.StringExtensions.Capitalize(System.String)">
            <summary>
            Capitalizes the current instance.
            </summary>
            <param name="word">The current instance.</param>
            <returns>The capitalized string.</returns>
        </member>
        <member name="M:SharpBag.Strings.StringExtensions.Format(System.String,System.Object[])">
            <see cref="M:System.String.Format(System.String,System.Object[])"/>
        </member>
        <member name="M:SharpBag.Strings.StringExtensions.ReplaceAll(System.String,System.String,System.String)">
            <summary>
            Returns a new string in which all occurrences of a specified string in the current instance are replaced with another specified string repeatedly until the new string no longer contains the specified string.
            </summary>
            <param name="s">The current instance.</param>
            <param name="oldValue">The string to be replaced.</param>
            <param name="newValue">The string to replace all occurrences of oldValue.</param>
            <returns>A string that is equivalent to the current string except that all instances of oldValue are repeatedly replaced with newValue until the new string no longer contains oldValue.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:SharpBag.Strings.StringExtensions.Words(System.String)">
            <summary>
            Returns all the words in the string.
            </summary>
            <param name="s">The current instance.</param>
            <returns>All the words in the string.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:SharpBag.Strings.StringExtensions.Lines(System.String)">
            <summary>
            Returns all the lines in the string.
            </summary>
            <param name="s">The current instance.</param>
            <returns>All the lines in the string.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:SharpBag.Strings.StringExtensions.NoCarriageReturns(System.String)">
            <summary>
            Takes the string and removes all carriage returns ('\r').
            </summary>
            <param name="s">The current instance.</param>
            <returns>The string without carriage returns ('\r').</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:SharpBag.Strings.StringExtensions.OneLineNoDoubleSpaceTrimmed(System.String)">
            <summary>
            Takes the string, replaces all line breaks with a space, then replaces all double spaces with a space and finally trims the string.
            </summary>
            <param name="s">The current instance.</param>
            <returns>The string in one line, with no double spaces, trimmed.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:SharpBag.Strings.StringExtensions.ToUpper(System.Char)">
            <summary>
            Returns a copy of this System.Char converted to uppercase, using the casing rules of the current culture.
            </summary>
            <param name="c">The current instance.</param>
            <returns>A copy of this System.Char converted to uppercase.</returns>
        </member>
        <member name="M:SharpBag.Strings.StringExtensions.ToLower(System.Char)">
            <summary>
            Returns a copy of this System.Char converted to lowercase, using the casing rules of the current culture.
            </summary>
            <param name="c">The current instance.</param>
            <returns>A copy of this System.Char converted to lowercase.</returns>
        </member>
        <member name="M:SharpBag.Strings.StringExtensions.Split(System.String,System.String)">
            <summary>
            Returns a string array that contains the substrings in this string that are delimited by the specified string. A parameter specifies whether to return empty array elements.
            </summary>
            <param name="s">The current instance.</param>
            <param name="separator">A string that delimits the substrings in this string.</param>
            <returns>An array whose elements contain the substrings in this string that are delimited by the separator.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:SharpBag.Strings.StringExtensions.Split(System.String,System.String,System.StringSplitOptions)">
            <summary>
            Returns a string array that contains the substrings in this string that are delimited by the specified string. A parameter specifies whether to return empty array elements.
            </summary>
            <param name="s">The current instance.</param>
            <param name="separator">A string that delimits the substrings in this string.</param>
            <param name="options">RemoveEmptyEntries to omit empty array elements from the array returned; or None to include empty array elements in the array returned.</param>
            <returns>An array whose elements contain the substrings in this string that are delimited by the separator.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:SharpBag.Strings.StringExtensions.Split(System.String,System.Char)">
            <summary>
            Returns a string array that contains the substrings in this string that are delimited by the specified char. A parameter specifies whether to return empty array elements.
            </summary>
            <param name="s">The current instance.</param>
            <param name="separator">A char that delimits the substrings in this string.</param>
            <returns>An array whose elements contain the substrings in this string that are delimited by the separator.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:SharpBag.Strings.StringExtensions.Split(System.String,System.Char,System.StringSplitOptions)">
            <summary>
            Returns a string array that contains the substrings in this string that are delimited by the specified char. A parameter specifies whether to return empty array elements.
            </summary>
            <param name="s">The current instance.</param>
            <param name="separator">A char that delimits the substrings in this string.</param>
            <param name="options">RemoveEmptyEntries to omit empty array elements from the array returned; or None to include empty array elements in the array returned.</param>
            <returns>An array whose elements contain the substrings in this string that are delimited by the separator.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:SharpBag.Strings.StringExtensions.SplitIntoInts(System.String,System.String)">
            <summary>
            Splits the current string into substrings using the separator and then converts each substring into an int.
            </summary>
            <param name="s">The current instance.</param>
            <param name="separator">The separator used to split the string into ints.</param>
            <returns>An array of the ints.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:SharpBag.Strings.StringExtensions.SplitIntoInts(System.String,System.Char)">
            <summary>
            Splits the current string into substrings using the separator and then converts each substring into an int.
            </summary>
            <param name="s">The current instance.</param>
            <param name="separator">The separator used to split the string into ints.</param>
            <returns>An array of the ints.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:SharpBag.Strings.StringExtensions.CompareTo(System.String,System.String,System.Char[],System.Boolean)">
            <summary>
            Compares the current instance to another string using the specified char array to determine the results.
            </summary>
            <param name="s">The current instance.</param>
            <param name="b">The string to compare to.</param>
            <param name="c">The char array.</param>
            <param name="caseSensitive">Whether or not the comparison is case-sensitive.</param>
            <returns>Whether the current instance is less than, equal to or greater than the specified string.</returns>
        </member>
        <member name="M:SharpBag.Strings.StringExtensions.CompareTo(System.Char,System.Char,System.Char[])">
            <summary>
            Compares the current instance to another char using the specified char array to determine the results.
            </summary>
            <param name="a">The current instance.</param>
            <param name="b">The char to compare to.</param>
            <param name="c">The char array.</param>
            <returns>Whether the current instance is less than, equal to or greater than the specified char.</returns>
        </member>
        <member name="M:SharpBag.Strings.StringExtensions.DistanceTo(System.String,System.String,System.Boolean)">
            <summary>
            Calculates the edit distance between the current instance and the specified string.
            </summary>
            <param name="s">The current instance.</param>
            <param name="t">The string to compare to.</param>
            <param name="caseSensitive">Whether or not to perform a case sensitive comparison.</param>
            <returns>The edit distance between the current instance and the specified string.</returns>
        </member>
        <member name="M:SharpBag.Strings.StringExtensions.DistanceTo(System.String,System.String)">
            <summary>
            Calculates the edit distance between the current instance and the specified string.
            </summary>
            <param name="s">The current instance.</param>
            <param name="t">The string to compare to.</param>
            <returns>The edit distance between the current instance and the specified string.</returns>
        </member>
        <member name="M:SharpBag.Strings.StringExtensions.EqualsIgnoreCase(System.String,System.String)">
            <summary>
            Whether the current instance equals the specified string, if case is ignored.
            </summary>
            <param name="a">The current instance.</param>
            <param name="b">A string.</param>
            <returns>Whether the current instance equals the specified string, if case is ignored.</returns>
        </member>
        <member name="M:SharpBag.Strings.StringExtensions.StartsWithIgnoreCase(System.String,System.String)">
            <summary>
            Whether the current instance starts with the specified string, if case is ignored.
            </summary>
            <param name="a">The current instance.</param>
            <param name="b">A string.</param>
            <returns>Whether the current instance starts with the specified string, if case is ignored.</returns>
        </member>
        <member name="M:SharpBag.Strings.StringExtensions.EndsWithIgnoreCase(System.String,System.String)">
            <summary>
            Whether the current instance ends with the specified string, if case is ignored.
            </summary>
            <param name="a">The current instance.</param>
            <param name="b">A string.</param>
            <returns>Whether the current instance ends with the specified string, if case is ignored.</returns>
        </member>
        <member name="M:SharpBag.Strings.StringExtensions.ContainsIgnoreCase(System.String,System.String)">
            <summary>
            Whether the current instance contains the specified string, if case is ignored.
            </summary>
            <param name="a">The current instance.</param>
            <param name="b">A string.</param>
            <returns>Whether the current instance contains the specified string, if case is ignored.</returns>
        </member>
        <member name="M:SharpBag.Strings.StringExtensions.IsLike(System.String,System.String)">
            <summary>
            Whether the current instance is a match to the specified regular expression.
            </summary>
            <param name="s">The current instance.</param>
            <param name="regex">A regular expression.</param>
            <returns></returns>
        </member>
        <member name="M:SharpBag.Strings.StringExtensions.ToUpperLowerNameVariant(System.String)">
            <summary>
            Returns the current instance in an upper-lower name variant.
            </summary>
            <param name="value">The current instance.</param>
            <returns>The current instance in an upper-lower name variant.</returns>
        </member>
        <member name="M:SharpBag.Strings.StringExtensions.Encrypt(System.String,System.String)">
            <summary>
            Encrypts a string using the supplied key. Encoding is done using RSA encryption.
            </summary>
            <param name="stringToEncrypt">String that must be encrypted.</param>
            <param name="key">An encryption key.</param>
            <returns>A string representing a byte array separated by a minus sign.</returns>
            <exception cref="T:System.ArgumentException">Occurs when stringToEncrypt or key is null or empty.</exception>
        </member>
        <member name="M:SharpBag.Strings.StringExtensions.Decrypt(System.String,System.String)">
            <summary>
            Decrypts a string using the supplied key. Decoding is done using RSA encryption.
            </summary>
            <param name="stringToDecrypt">String that must be decrypted.</param>
            <param name="key">Decryption key.</param>
            <returns>The decrypted string or null if decryption failed.</returns>
            <exception cref="T:System.ArgumentException">Occurs when stringToDecrypt or key is null or empty.</exception>
        </member>
        <member name="M:SharpBag.Strings.StringExtensions.AddZeroIfLessThan10(System.Int32)">
            <summary>
            Prepends a zero to the current instance, if it's less than 10.
            </summary>
            <param name="i">The current instance.</param>
            <returns>The current instance as a string.</returns>
        </member>
        <member name="T:SharpBag.Math.MathExtensions">
            <summary>
            Extensions methods for the BagMath class.
            </summary>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.ToInfinity(System.Int64)">
            <summary>
            Generates numbers that range from the value of the current instance to positive infinity.
            </summary>
            <param name="start">The current instance.</param>
            <returns>An enumerable containing the numbers.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.ToInfinity(System.Int32)">
            <summary>
            Generates numbers that range from the value of the current instance to positive infinity.
            </summary>
            <param name="start">The current instance.</param>
            <returns>An enumerable containing the numbers.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.ToInfinity(System.Numerics.BigInteger)">
            <summary>
            Generates numbers that range from the value of the current instance to positive infinity.
            </summary>
            <param name="start">The current instance.</param>
            <returns>An enumerable containing the numbers.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.ToInfinity(System.Int64,System.Int64)">
            <summary>
            Generates numbers that range from the value of the current instance to positive infinity.
            </summary>
            <param name="start">The current instance.</param>
            <param name="step">The step to take on each iteration.</param>
            <returns>An enumerable containing the numbers.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.ToInfinity(System.Int32,System.Int32)">
            <summary>
            Generates numbers that range from the value of the current instance to positive infinity.
            </summary>
            <param name="start">The current instance.</param>
            <param name="step">The step to take on each iteration.</param>
            <returns>An enumerable containing the numbers.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.ToInfinity(System.Numerics.BigInteger,System.Numerics.BigInteger)">
            <summary>
            Generates numbers that range from the value of the current instance to positive infinity.
            </summary>
            <param name="start">The current instance.</param>
            <param name="step">The step to take on each iteration.</param>
            <returns>An enumerable containing the numbers.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.IsBetween(System.Int32,System.Int32,System.Int32)">
            <summary>
            Checks if the current instance is between, but not equal to, two integers.
            </summary>
            <param name="n">The current integers.</param>
            <param name="min">The lower boundary.</param>
            <param name="max">The upper boundary.</param>
            <returns>True if the current instance is between, but not equal to, the two integers; otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.IsBetweenOrEqualTo(System.Int32,System.Int32,System.Int32)">
            <summary>
            Checks if the current instance is between or equal to two integers.
            </summary>
            <param name="n">The current integers.</param>
            <param name="min">The minimum integer.</param>
            <param name="max">The maximum integer.</param>
            <returns>True if the current instance is between or equal to the two integers; otherwise false.</returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.IsBetween(System.Double,System.Double,System.Double)">
            <summary>
            Checks if the current instance is between, but not equal to, two integers.
            </summary>
            <param name="n">The current integers.</param>
            <param name="min">The lower boundary.</param>
            <param name="max">The upper boundary.</param>
            <returns>True if the current instance is between, but not equal to, the two integers; otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.IsBetweenOrEqualTo(System.Double,System.Double,System.Double)">
            <summary>
            Checks if the current instance is between or equal to two integers.
            </summary>
            <param name="n">The current integers.</param>
            <param name="min">The minimum integer.</param>
            <param name="max">The maximum integer.</param>
            <returns>True if the current instance is between or equal to the two integers; otherwise false.</returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.CollatzCount(System.Int32)">
            <summary>
            Returns the Collatz count.
            </summary>
            <param name="n">The current instance.</param>
            <returns>The Collatz count.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.CollatzCount(System.Int64)">
            <summary>
            Returns the Collatz count.
            </summary>
            <param name="n">The current instance.</param>
            <returns>The Collatz count.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.CollatzCount(System.Numerics.BigInteger)">
            <summary>
            Returns the Collatz count.
            </summary>
            <param name="n">The current instance.</param>
            <returns>The Collatz count.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.Round(System.Double)">
            <summary>
            Rounds the current instance.
            </summary>
            <param name="d">The current instance.</param>
            <returns>The current instance rounded.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.Round(System.Double,System.Int32)">
            <summary>
            Rounds the current instance.
            </summary>
            <param name="d">The current instance.</param>
            <param name="digits">Number of digits to keep after the comma.</param>
            <returns>The current instance rounded.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.Bound(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the current instance inside the specified boundaries.
            </summary>
            <param name="d">The current instance.</param>
            <param name="lower">The lower boundary.</param>
            <param name="upper">The upper boundary.</param>
            <returns>The current instance inside the spcified boundaries.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.Bound(System.Double,System.Double,System.Double)">
            <summary>
            Gets the current instance inside the specified boundaries.
            </summary>
            <param name="d">The current instance.</param>
            <param name="lower">The lower boundary.</param>
            <param name="upper">The upper boundary.</param>
            <returns>The current instance inside the spcified boundaries.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.IsDivisableBy(System.Int32,System.Int32,System.Int32)">
            <summary>
            Whether the current instance is divisable by all the specified numbers.
            </summary>
            <param name="i">The current instance.</param>
            <param name="from">The smallest number.</param>
            <param name="to">The largest number.</param>
            <returns>Whether the current instance is divisable by all the specified numbers.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.IsDivisableBy(System.Int32,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Whether the current instance is divisable by all the specified numbers.
            </summary>
            <param name="i">The current instance.</param>
            <param name="nums">The numbers.</param>
            <returns>Whether the current instance is divisable by all the specified numbers.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.IsDivisableBy(System.Int32,System.Int32[])">
            <summary>
            Whether the current instance is divisable by all the specified numbers.
            </summary>
            <param name="i">The current instance.</param>
            <param name="nums">The numbers.</param>
            <returns>Whether the current instance is divisable by all the specified numbers.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.IsDivisableBy(System.Int64,System.Int64,System.Int64)">
            <summary>
            Whether the current instance is divisable by all the specified numbers.
            </summary>
            <param name="i">The current instance.</param>
            <param name="from">The smallest number.</param>
            <param name="to">The largest number.</param>
            <returns>Whether the current instance is divisable by all the specified numbers.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.IsDivisableBy(System.Int64,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Whether the current instance is divisable by all the specified numbers.
            </summary>
            <param name="i">The current instance.</param>
            <param name="nums">The numbers.</param>
            <returns>Whether the current instance is divisable by all the specified numbers.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.IsDivisableBy(System.Int64,System.Int64[])">
            <summary>
            Whether the current instance is divisable by all the specified numbers.
            </summary>
            <param name="i">The current instance.</param>
            <param name="nums">The numbers.</param>
            <returns>Whether the current instance is divisable by all the specified numbers.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.IsDivisableBy(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger)">
            <summary>
            Whether the current instance is divisable by all the specified numbers.
            </summary>
            <param name="i">The current instance.</param>
            <param name="from">The smallest number.</param>
            <param name="to">The largest number.</param>
            <returns>Whether the current instance is divisable by all the specified numbers.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.IsDivisableBy(System.Numerics.BigInteger,System.Collections.Generic.IEnumerable{System.Numerics.BigInteger})">
            <summary>
            Whether the current instance is divisable by all the specified numbers.
            </summary>
            <param name="i">The current instance.</param>
            <param name="nums">The numbers.</param>
            <returns>Whether the current instance is divisable by all the specified numbers.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.IsDivisableBy(System.Numerics.BigInteger,System.Numerics.BigInteger[])">
            <summary>
            Whether the current instance is divisable by all the specified numbers.
            </summary>
            <param name="i">The current instance.</param>
            <param name="nums">The numbers.</param>
            <returns>Whether the current instance is divisable by all the specified numbers.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.Factors(System.Int32)">
            <summary>
            The factors of the current instance.
            </summary>
            <param name="n">The current instance.</param>
            <returns>The factors.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.FactorsButSelf(System.Int32)">
            <summary>
            The factors of the current instance, except it self.
            </summary>
            <param name="n">The current instance.</param>
            <returns>The factors.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.Factors(System.Int64)">
            <summary>
            The factors of the current instance.
            </summary>
            <param name="n">The current instance.</param>
            <returns>The factors.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.FactorsButSelf(System.Int64)">
            <summary>
            The factors of the current instance, except it self.
            </summary>
            <param name="n">The current instance.</param>
            <returns>The factors.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.Factors(System.Numerics.BigInteger)">
            <summary>
            The factors of the current instance.
            </summary>
            <param name="n">The current instance.</param>
            <returns>The factors.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.FactorsButSelf(System.Numerics.BigInteger)">
            <summary>
            The factors of the current instance, except it self.
            </summary>
            <param name="n">The current instance.</param>
            <returns>The factors.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.Digits(System.Int32)">
            <summary>
            Returns the digits of the current instance.
            </summary>
            <param name="n">The current instance.</param>
            <returns>The digits.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.Digits(System.Int64)">
            <summary>
            Returns the digits of the current instance.
            </summary>
            <param name="n">The current instance.</param>
            <returns>The digits.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.Digits(System.Numerics.BigInteger)">
            <summary>
            Returns the digits of the current instance.
            </summary>
            <param name="n">The current instance.</param>
            <returns>The digits.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.Reverse(System.Int32)">
            <summary>
            Reverses the number.
            </summary>
            <param name="i">The current instance.</param>
            <returns>The reversed number.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.Reverse(System.Int64)">
            <summary>
            Reverses the number.
            </summary>
            <param name="i">The current instance.</param>
            <returns>The reversed number.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.Reverse(System.Numerics.BigInteger)">
            <summary>
            Reverses the number.
            </summary>
            <param name="i">The current instance.</param>
            <returns>The reversed number.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.Pow(System.Int32,System.Int32)">
            <summary>
            Puts the current instance to the specified power.
            </summary>
            <param name="i">The current instance.</param>
            <param name="power">The specified power.</param>
            <returns>The current instance in the specified power.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.Pow(System.Double,System.Double)">
            <summary>
            Puts the current instance to the specified power.
            </summary>
            <param name="i">The current instance.</param>
            <param name="power">The specified power.</param>
            <returns>The current instance in the specified power.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.Factorial(System.Int32)">
            <summary>
            Calculates the factorial of the current instance.
            </summary>
            <param name="n">The current instance.</param>
            <returns>The factorial.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.IsEven(System.Int32)">
            <summary>
            Whether the current instance is even.
            </summary>
            <param name="n">The current instance.</param>
            <returns>Whether the current instance is even.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.IsEven(System.Int64)">
            <summary>
            Whether the current instance is even.
            </summary>
            <param name="n">The current instance.</param>
            <returns>Whether the current instance is even.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.IsEven(System.Numerics.BigInteger)">
            <summary>
            Whether the current instance is even.
            </summary>
            <param name="n">The current instance.</param>
            <returns>Whether the current instance is even.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.IsOdd(System.Int32)">
            <summary>
            Whether the current instance is odd.
            </summary>
            <param name="n">The current instance.</param>
            <returns>Whether the current instance is odd.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.IsOdd(System.Int64)">
            <summary>
            Whether the current instance is odd.
            </summary>
            <param name="n">The current instance.</param>
            <returns>Whether the current instance is odd.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.IsOdd(System.Numerics.BigInteger)">
            <summary>
            Whether the current instance is even.
            </summary>
            <param name="n">The current instance.</param>
            <returns>Whether the current instance is odd.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.IsPrime(System.Int32)">
            <summary>
            Whether the current instance is prime.
            </summary>
            <param name="n">The current instance.</param>
            <returns>Whether the current instance is prime.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.IsPrime(System.Int64)">
            <summary>
            Whether the current instance is prime.
            </summary>
            <param name="n">The current instance.</param>
            <returns>Whether the current instance is prime.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.IsPrime(System.Numerics.BigInteger)">
            <summary>
            Whether the current instance is prime.
            </summary>
            <param name="n">The current instance.</param>
            <returns>Whether the current instance is prime.</returns>
        </member>
        <member name="T:SharpBag.FK.Tools">
            <summary>
            Allskonar verkfæri
            </summary>
        </member>
        <member name="M:SharpBag.FK.Tools.MergeStrings(System.String,System.String)">
            <summary>
            Mergar tvo strengi saman (mega vera margra lína)
            </summary>
            <param name="a">Fyrri strengurinn</param>
            <param name="b">Seinni strengurinn</param>
            <returns>Strengirnir saman</returns>
        </member>
        <member name="M:SharpBag.FK.Tools.MakeLength(System.String,System.Int32,System.Char)">
            <summary>
            Lætur strenginn verða ákveðið langann hvort sem hann er lengri eða styttri fyrir
            </summary>
            <param name="s"></param>
            <param name="length">Lengdin sem strengurinn verður</param>
            <param name="fill">Stafur sem notaður er til að fylla upp í ef að strengurinn er of stuttur</param>
            <returns>Strengurinn með rétta lengd</returns>
        </member>
        <member name="M:SharpBag.FK.Tools.TwoDArrayOutput(System.String[0:,0:])">
            <summary>
            Tekur inn 2D array og skilar því sem streng
            </summary>
            <param name="a">2D array</param>
            <returns>Arrayið sem strengur</returns>
            <example>{
            {"a","b","c"},
            {"a","b","c"},
            {"a","b","c"}
            }
            verður:
            abc
            abc
            abc</example>
        </member>
        <member name="T:SharpBag.ActionDisposable">
            <summary>
            Makes an action disposable.
            </summary>
        </member>
        <member name="M:SharpBag.ActionDisposable.#ctor(System.Action)">
            <summary>
            The constructor.
            </summary>
            <param name="action">The action to execute when the current instance is disposed.</param>
        </member>
        <member name="M:SharpBag.ActionDisposable.System#IDisposable#Dispose">
            <summary>
            The disposer which executes the dispose action.
            </summary>
        </member>
        <member name="T:SharpBag.Strings.StringUtils">
            <summary>
            A static class with string utilities.
            </summary>
        </member>
        <member name="M:SharpBag.Strings.StringUtils.Concat(System.String,System.String[])">
            <summary>
            Concatenate the specified strings.
            </summary>
            <param name="separator">A separator between the strings.</param>
            <param name="strings">The strings to concatenate.</param>
            <returns>The new string.</returns>
        </member>
    </members>
</doc>
