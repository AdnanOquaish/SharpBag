<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharpBag</name>
    </assembly>
    <members>
        <member name="T:SharpBag.Logging.Logger">
            <summary>
            A class used for application logging.
            </summary>
        </member>
        <member name="M:SharpBag.Logging.Logger.#ctor(SharpBag.Logging.Logger.LogFunction,System.Boolean,System.String)">
            <summary>
            A class used for application logging.
            </summary>
            <param name="logger">The log function.</param>
            <param name="timestamp">Whether to put a timestamp on all logs.</param>
            <param name="timeformat">The format of the timestamp.</param>
        </member>
        <member name="M:SharpBag.Logging.Logger.Log(System.String)">
            <summary>
            Log the specified string.
            </summary>
            <param name="s">The string to be logged.</param>
        </member>
        <member name="M:SharpBag.Logging.Logger.LogIf(System.Boolean,System.String)">
            <summary>
            Log the specified string if expression is true.
            </summary>
            <param name="expression">An expression.</param>
            <param name="s">The string to be logged.</param>
        </member>
        <member name="M:SharpBag.Logging.Logger.LogIfNot(System.Boolean,System.String)">
            <summary>
            Log the specified string if expression is false.
            </summary>
            <param name="expression">An expression.</param>
            <param name="s">The string to be logged.</param>
        </member>
        <member name="P:SharpBag.Logging.Logger.LoggerFunction">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="P:SharpBag.Logging.Logger.Timestamp">
            <summary>
            Whether to prepend a timestamp on the output string or not.
            </summary>
        </member>
        <member name="P:SharpBag.Logging.Logger.Timeformat">
            <summary>
            The format of the timestamp. See DateTime.ToString().
            </summary>
        </member>
        <member name="P:SharpBag.Logging.Logger.Enabled">
            <summary>
            Whether the logger is enabled or not.
            </summary>
        </member>
        <member name="T:SharpBag.Logging.Logger.LogFunction">
            <summary>
            A function used for logging.
            </summary>
            <param name="s">The output string that needs to be handled.</param>
        </member>
        <member name="T:SharpBag.IO.Serialization">
            <summary>
            A static class used for object serialization.
            </summary>
        </member>
        <member name="M:SharpBag.IO.Serialization.Serialize``1(``0,System.String)">
            <summary>
            Serializes an object using a binary serializer.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="obj">The object to serialize.</param>
            <param name="fileName">The file to serialize to.</param>
        </member>
        <member name="M:SharpBag.IO.Serialization.Deserialize``1(System.String)">
            <summary>
            Deserializes an object using a binary deserializer.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="fileName">The file to deserialize from.</param>
            <returns>The object.</returns>
        </member>
        <member name="M:SharpBag.IO.Serialization.XmlSerialize``1(``0,System.String)">
            <summary>
            Serializes an object using an xml serializer.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="obj">The object to serialize.</param>
            <param name="fileName">The file to serialize to.</param>
        </member>
        <member name="M:SharpBag.IO.Serialization.XmlDeserialize``1(System.String)">
            <summary>
            Deserializes an object using an xml deserializer.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="fileName">The file to deserialize from.</param>
            <returns>The object.</returns>
        </member>
        <member name="T:SharpBag.Option`1">
            <summary>
            An option.
            </summary>
            <typeparam name="T">The type of the option.</typeparam>
        </member>
        <member name="M:SharpBag.Option`1.#ctor">
            <summary>
            Initializes a None option.
            </summary>
        </member>
        <member name="M:SharpBag.Option`1.#ctor(`0)">
            <summary>
            Initializes a Some option with the specified value.
            </summary>
        </member>
        <member name="P:SharpBag.Option`1.Value">
            <summary>
            The value of the Option.
            </summary>
        </member>
        <member name="P:SharpBag.Option`1.IsSome">
            <summary>
            Whether the Option is Some.
            </summary>
        </member>
        <member name="P:SharpBag.Option`1.IsNone">
            <summary>
            Whether the Options is None.
            </summary>
        </member>
        <member name="T:SharpBag.Option">
            <summary>
            A factory class for Options.
            </summary>
        </member>
        <member name="M:SharpBag.Option.None``1">
            <summary>
            Create a new None Option.
            </summary>
            <typeparam name="T">The type of the Option.</typeparam>
            <returns>The new None Option.</returns>
        </member>
        <member name="M:SharpBag.Option.Some``1(``0)">
            <summary>
            Create a new Some Option with the specified value.
            </summary>
            <typeparam name="T">The type of the Option.</typeparam>
            <returns>The new Some Option.</returns>
        </member>
        <member name="T:SharpBag.Networking.Ping">
            <summary>
            A structure that is used when pinging the other side.
            </summary>
        </member>
        <member name="T:SharpBag.Math.ForDouble.Point">
            <summary>
            A point.
            </summary>
        </member>
        <member name="M:SharpBag.Math.ForDouble.Point.#ctor(System.Double,System.Double)">
            <summary>
            The constructor.
            </summary>
            <param name="x">The X coordinate.</param>
            <param name="y">The Y coordinate.</param>
        </member>
        <member name="P:SharpBag.Math.ForDouble.Point.X">
            <summary>
            The X coordinate.
            </summary>
        </member>
        <member name="P:SharpBag.Math.ForDouble.Point.Y">
            <summary>
            The Y coordinate.
            </summary>
        </member>
        <member name="T:SharpBag.Combinatorics.Variations`1">
             <summary>
             Variations defines a meta-collection, typically a list of lists, of all possible
             ordered subsets of a particular size from the set of values.
             This list is enumerable and allows the scanning of all possible Variations using a simple
             foreach() loop even though the variations are not all in memory.
             </summary>
             <remarks>
             The MetaCollectionType parameter of the constructor allows for the creation of
             normal Variations and Variations with Repetition.
            
             When given an input collect {A B C} and lower index of 2, the following sets are generated:
             MetaCollectionType.WithoutRepetition generates 6 sets: =>
                 {A B}, {A B}, {B A}, {B C}, {C A}, {C B}
             MetaCollectionType.WithRepetition generates 9 sets:
                 {A A}, {A B}, {A B}, {B A}, {B B }, {B C}, {C A}, {C B}, {C C}
            
             The equality of multiple inputs is not considered when generating variations.
             </remarks>
             <typeparam name="T">The type of the values within the list.</typeparam>
        </member>
        <member name="T:SharpBag.Combinatorics.IMetaCollection`1">
            <summary>
            Interface for Permutations, Combinations and any other classes that present
            a collection of collections based on an input collection.  The enumerators that
            this class inherits defines the mechanism for enumerating through the collections.
            </summary>
            <typeparam name="T">The of the elements in the collection, not the type of the collection.</typeparam>
        </member>
        <member name="P:SharpBag.Combinatorics.IMetaCollection`1.Count">
            <summary>
            The count of items in the collection.  This is not inherited from
            ICollection since this meta-collection cannot be extended by users.
            </summary>
        </member>
        <member name="P:SharpBag.Combinatorics.IMetaCollection`1.Type">
            <summary>
            The type of the meta-collection, determining how the collections are
            determined from the inputs.
            </summary>
        </member>
        <member name="P:SharpBag.Combinatorics.IMetaCollection`1.UpperIndex">
            <summary>
            The upper index of the meta-collection, which is the size of the input collection.
            </summary>
        </member>
        <member name="P:SharpBag.Combinatorics.IMetaCollection`1.LowerIndex">
            <summary>
            The lower index of the meta-collection, which is the size of each output collection.
            </summary>
        </member>
        <member name="M:SharpBag.Combinatorics.Variations`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>
            Create a variation set from the indicated list of values.
            The upper index is calculated as values.Count, the lower index is specified.
            Collection type defaults to MetaCollectionType.WithoutRepetition
            </summary>
            <param name="values">List of values to select Variations from.</param>
            <param name="lowerIndex">The size of each variation set to return.</param>
        </member>
        <member name="M:SharpBag.Combinatorics.Variations`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32,SharpBag.Combinatorics.GenerateOption)">
            <summary>
            Create a variation set from the indicated list of values.
            The upper index is calculated as values.Count, the lower index is specified.
            </summary>
            <param name="values">List of values to select variations from.</param>
            <param name="lowerIndex">The size of each vatiation set to return.</param>
            <param name="type">Type indicates whether to use repetition in set generation.</param>
        </member>
        <member name="M:SharpBag.Combinatorics.Variations`1.GetEnumerator">
            <summary>
            Gets an enumerator for the collection of Variations.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:SharpBag.Combinatorics.Variations`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator for the collection of Variations.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:SharpBag.Combinatorics.Variations`1.Initialize(System.Collections.Generic.IEnumerable{`0},System.Int32,SharpBag.Combinatorics.GenerateOption)">
            <summary>
            Initialize the variations for constructors.
            </summary>
            <param name="values">List of values to select variations from.</param>
            <param name="lowerIndex">The size of each variation set to return.</param>
            <param name="type">The type of variations set to generate.</param>
        </member>
        <member name="F:SharpBag.Combinatorics.Variations`1.myValues">
            <summary>
            Copy of values object is intialized with, required for enumerator reset.
            </summary>
        </member>
        <member name="F:SharpBag.Combinatorics.Variations`1.myPermutations">
            <summary>
            Permutations object that handles permutations on int for variation inclusion and ordering.
            </summary>
        </member>
        <member name="F:SharpBag.Combinatorics.Variations`1.myMetaCollectionType">
            <summary>
            The type of the variation collection.
            </summary>
        </member>
        <member name="F:SharpBag.Combinatorics.Variations`1.myLowerIndex">
            <summary>
            The lower index defined in the constructor.
            </summary>
        </member>
        <member name="P:SharpBag.Combinatorics.Variations`1.Count">
            <summary>
            The number of unique variations that are defined in this meta-collection.
            </summary>
            <remarks>
            Variations with repetitions does not behave like other meta-collections and it's
            count is equal to N^P, where N is the upper index and P is the lower index.
            </remarks>
        </member>
        <member name="P:SharpBag.Combinatorics.Variations`1.Type">
            <summary>
            The type of Variations set that is generated.
            </summary>
        </member>
        <member name="P:SharpBag.Combinatorics.Variations`1.UpperIndex">
            <summary>
            The upper index of the meta-collection, equal to the number of items in the initial set.
            </summary>
        </member>
        <member name="P:SharpBag.Combinatorics.Variations`1.LowerIndex">
            <summary>
            The lower index of the meta-collection, equal to the number of items returned each iteration.
            </summary>
        </member>
        <member name="T:SharpBag.Combinatorics.Variations`1.EnumeratorWithRepetition">
            <summary>
            An enumerator for Variations when the type is set to WithRepetition.
            </summary>
        </member>
        <member name="M:SharpBag.Combinatorics.Variations`1.EnumeratorWithRepetition.#ctor(SharpBag.Combinatorics.Variations{`0})">
            <summary>
            Construct a enumerator with the parent object.
            </summary>
            <param name="source">The source Variations object.</param>
        </member>
        <member name="M:SharpBag.Combinatorics.Variations`1.EnumeratorWithRepetition.Reset">
            <summary>
            Resets the Variations enumerator to the first variation.
            </summary>
        </member>
        <member name="M:SharpBag.Combinatorics.Variations`1.EnumeratorWithRepetition.MoveNext">
            <summary>
            Advances to the next variation.
            </summary>
            <returns>True if successfully moved to next variation, False if no more variations exist.</returns>
            <remarks>
            Increments the internal myListIndexes collection by incrementing the last index
            and overflow/carrying into others just like grade-school arithemtic.  If the
            finaly carry flag is set, then we would wrap around and are therefore done.
            </remarks>
        </member>
        <member name="M:SharpBag.Combinatorics.Variations`1.EnumeratorWithRepetition.Dispose">
            <summary>
            Cleans up non-managed resources, of which there are none used here.
            </summary>
        </member>
        <member name="M:SharpBag.Combinatorics.Variations`1.EnumeratorWithRepetition.ComputeCurrent">
            <summary>
            Computes the current list based on the internal list index.
            </summary>
        </member>
        <member name="F:SharpBag.Combinatorics.Variations`1.EnumeratorWithRepetition.myParent">
            <summary>
            Parent object this is an enumerator for.
            </summary>
        </member>
        <member name="F:SharpBag.Combinatorics.Variations`1.EnumeratorWithRepetition.myCurrentList">
            <summary>
            The current list of values, this is lazy evaluated by the Current property.
            </summary>
        </member>
        <member name="F:SharpBag.Combinatorics.Variations`1.EnumeratorWithRepetition.myListIndexes">
            <summary>
            An enumertor of the parents list of lexicographic orderings.
            </summary>
        </member>
        <member name="P:SharpBag.Combinatorics.Variations`1.EnumeratorWithRepetition.Current">
            <summary>
            The current variation
            </summary>
        </member>
        <member name="P:SharpBag.Combinatorics.Variations`1.EnumeratorWithRepetition.System#Collections#IEnumerator#Current">
            <summary>
            The current variation.
            </summary>
        </member>
        <member name="T:SharpBag.Combinatorics.Variations`1.EnumeratorWithoutRepetition">
            <summary>
            An enumerator for Variations when the type is set to WithoutRepetition.
            </summary>
        </member>
        <member name="M:SharpBag.Combinatorics.Variations`1.EnumeratorWithoutRepetition.#ctor(SharpBag.Combinatorics.Variations{`0})">
            <summary>
            Construct a enumerator with the parent object.
            </summary>
            <param name="source">The source Variations object.</param>
        </member>
        <member name="M:SharpBag.Combinatorics.Variations`1.EnumeratorWithoutRepetition.Reset">
            <summary>
            Resets the Variations enumerator to the first variation.
            </summary>
        </member>
        <member name="M:SharpBag.Combinatorics.Variations`1.EnumeratorWithoutRepetition.MoveNext">
            <summary>
            Advances to the next variation.
            </summary>
            <returns>True if successfully moved to next variation, False if no more variations exist.</returns>
        </member>
        <member name="M:SharpBag.Combinatorics.Variations`1.EnumeratorWithoutRepetition.Dispose">
            <summary>
            Cleans up non-managed resources, of which there are none used here.
            </summary>
        </member>
        <member name="M:SharpBag.Combinatorics.Variations`1.EnumeratorWithoutRepetition.ComputeCurrent">
             <summary>
             Creates a list of original values from the int permutation provided.
             The exception for accessing current (InvalidOperationException) is generated
             by the call to .Current on the underlying enumeration.
             </summary>
             <remarks>
             To compute the current list of values, the element to use is determined by
             a permutation position with a non-MaxValue value.  It is placed at the position in the
             output that the index value indicates.
            
             E.g. Variations of 6 choose 3 without repetition
             Input array:   {A B C D E F}
             Permutations:  {- 1 - - 3 2} (- is Int32.MaxValue)
             Generates set: {B F E}
             </remarks>
        </member>
        <member name="F:SharpBag.Combinatorics.Variations`1.EnumeratorWithoutRepetition.myParent">
            <summary>
            Parent object this is an enumerator for.
            </summary>
        </member>
        <member name="F:SharpBag.Combinatorics.Variations`1.EnumeratorWithoutRepetition.myCurrentList">
            <summary>
            The current list of values, this is lazy evaluated by the Current property.
            </summary>
        </member>
        <member name="F:SharpBag.Combinatorics.Variations`1.EnumeratorWithoutRepetition.myPermutationsEnumerator">
            <summary>
            An enumertor of the parents list of lexicographic orderings.
            </summary>
        </member>
        <member name="P:SharpBag.Combinatorics.Variations`1.EnumeratorWithoutRepetition.Current">
            <summary>
            The current variation.
            </summary>
        </member>
        <member name="P:SharpBag.Combinatorics.Variations`1.EnumeratorWithoutRepetition.System#Collections#IEnumerator#Current">
            <summary>
            The current variation.
            </summary>
        </member>
        <member name="T:SharpBag.Logging.InteractiveConsole">
            <summary>
            A class used for managing the console window, so that the program can both read from the console and write into the console at the samt time.
            </summary>
        </member>
        <member name="F:SharpBag.Logging.InteractiveConsole._Exit">
            <summary>
            Can be set to true to shut down the main reading thread and all readers.
            </summary>
        </member>
        <member name="F:SharpBag.Logging.InteractiveConsole._Reading">
            <summary>
            Whether or not there is a reading going on.
            </summary>
        </member>
        <member name="F:SharpBag.Logging.InteractiveConsole._Command">
            <summary>
            The command that is currently being written into the console.
            </summary>
        </member>
        <member name="F:SharpBag.Logging.InteractiveConsole._ReaderThread">
            <summary>
            The main reader thread.
            </summary>
        </member>
        <member name="F:SharpBag.Logging.InteractiveConsole.ValidInput">
            <summary>
            Valid input characters.
            </summary>
        </member>
        <member name="M:SharpBag.Logging.InteractiveConsole.#ctor(System.String)">
            <summary>
            The main constructor.
            </summary>
            <param name="commandStart">The start of the command line.</param>
        </member>
        <member name="M:SharpBag.Logging.InteractiveConsole.Finalize">
            <summary>
            The main deconstructor.
            </summary>
        </member>
        <member name="M:SharpBag.Logging.InteractiveConsole.Stop">
            <summary>
            Stop all readers and reader threads.
            This should always be called before application shutdown to make sure all threads are terminated.
            </summary>
        </member>
        <member name="M:SharpBag.Logging.InteractiveConsole.ReadCommandAsync">
            <summary>
            Reads commands asynchronously and fires the OnCommandEntered event when a command has been entered.
            </summary>
        </member>
        <member name="M:SharpBag.Logging.InteractiveConsole.ReadCommandListener">
            <summary>
            Reads commands asynchronously and fires the OnCommandEntered event when a command has been entered.
            </summary>
        </member>
        <member name="M:SharpBag.Logging.InteractiveConsole.ReadCommand">
            <summary>
            Reads a command and returns it as a string.
            This method will not return anything until the command is entered. Use ReadCommandAsync to read commands asynchronously.
            </summary>
            <returns>The command.</returns>
        </member>
        <member name="M:SharpBag.Logging.InteractiveConsole.WriteLine(System.Object)">
            <summary>
            Writes a string to the console.
            This should be used instead of Console.WriteLine and Console.Write.
            </summary>
            <param name="o"></param>
        </member>
        <member name="E:SharpBag.Logging.InteractiveConsole.OnCommandEntered">
            <summary>
            An event that will be fired when a user enters a command into the console window.
            </summary>
        </member>
        <member name="P:SharpBag.Logging.InteractiveConsole.CommandStart">
            <summary>
            The start of the command line.
            </summary>
        </member>
        <member name="T:SharpBag.Logging.InteractiveConsole.CommandEnteredEvent">
            <summary>
            A delegate that can be called when a command is entered.
            </summary>
            <param name="command">The command that was entered.</param>
        </member>
        <member name="T:SharpBag.Operator">
            <summary>
            Generic operators.
            </summary>
        </member>
        <member name="M:SharpBag.Operator.HasValue``1(``0)">
            <summary>
            Whether the specified variable has a value.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <param name="value">The variable.</param>
            <returns>Whether the specified variable has a value.</returns>
        </member>
        <member name="M:SharpBag.Operator.AddIfNotNull``1(``0@,``0)">
            <summary>
            Add the specified variable to the specified accumulator, if it has a value.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <param name="accumulator">The accumulator.</param>
            <param name="value">The variable.</param>
            <returns>Whether the specified value was added to the accumulator.</returns>
        </member>
        <member name="M:SharpBag.Operator.Negate``1(``0)">
            <summary>
            Negate the specified value.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <param name="value">The value.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:SharpBag.Operator.Not``1(``0)">
            <summary>
            Bitwise Not the value.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <param name="value">The value.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:SharpBag.Operator.Or``1(``0,``0)">
            <summary>
            Bitwise Or the values.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:SharpBag.Operator.And``1(``0,``0)">
            <summary>
            Bitwise And the values.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:SharpBag.Operator.Xor``1(``0,``0)">
            <summary>
            Bitwise Xor the values.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:SharpBag.Operator.Convert``2(``0)">
            <summary>
            Convert the value to the specified type.
            </summary>
            <typeparam name="TFrom">The type to convert from.</typeparam>
            <typeparam name="TTo">The type to convert to.</typeparam>
            <param name="value">The value.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:SharpBag.Operator.Add``1(``0,``0)">
            <summary>
            Add the values.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:SharpBag.Operator.AddAlternative``2(``0,``1)">
            <summary>
            Add the values.
            </summary>
            <typeparam name="TArg1">The first value.</typeparam>
            <typeparam name="TArg2">The second value.</typeparam>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:SharpBag.Operator.Subtract``1(``0,``0)">
            <summary>
            Subtract the values.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:SharpBag.Operator.SubtractAlternative``2(``0,``1)">
            <summary>
            Subtract the values.
            </summary>
            <typeparam name="TArg1">The first value.</typeparam>
            <typeparam name="TArg2">The second value.</typeparam>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:SharpBag.Operator.Multiply``1(``0,``0)">
            <summary>
            Multiply the values.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:SharpBag.Operator.MultiplyAlternative``2(``0,``1)">
            <summary>
            Multiply the values.
            </summary>
            <typeparam name="TArg1">The first value.</typeparam>
            <typeparam name="TArg2">The second value.</typeparam>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:SharpBag.Operator.Divide``1(``0,``0)">
            <summary>
            Divide the values.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:SharpBag.Operator.Modulo``1(``0,``0)">
            <summary>
            Modulo the values.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:SharpBag.Operator.DivideAlternative``2(``0,``1)">
            <summary>
            Divide the values.
            </summary>
            <typeparam name="TArg1">The first value.</typeparam>
            <typeparam name="TArg2">The second value.</typeparam>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:SharpBag.Operator.Equal``1(``0,``0)">
            <summary>
            Check the values for equality.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:SharpBag.Operator.NotEqual``1(``0,``0)">
            <summary>
            Check the values for inequality.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:SharpBag.Operator.GreaterThan``1(``0,``0)">
            <summary>
            Check whether the first value is greater than the second value.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:SharpBag.Operator.LessThan``1(``0,``0)">
            <summary>
            Check whether the first value is less than the second value.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:SharpBag.Operator.GreaterThanOrEqual``1(``0,``0)">
            <summary>
            Check whether the first value is greater than or equal to the second value.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:SharpBag.Operator.LessThanOrEqual``1(``0,``0)">
            <summary>
            Check whether the first value is less than or equal to the second value.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:SharpBag.Operator.DivideInt32``1(``0,System.Int32)">
            <summary>
            Divide the values.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <param name="value">The first value.</param>
            <param name="divisor">The second value.</param>
            <returns>The result.</returns>
        </member>
        <member name="T:SharpBag.Operator`2">
            <summary>
            Generic operators.
            </summary>
            <typeparam name="TValue">The value.</typeparam>
            <typeparam name="TResult">The result.</typeparam>
        </member>
        <member name="P:SharpBag.Operator`2.Convert">
            <summary>
            Convert from the value to the result.
            </summary>
        </member>
        <member name="P:SharpBag.Operator`2.Add">
            <summary>
            Add the values.
            </summary>
        </member>
        <member name="P:SharpBag.Operator`2.Subtract">
            <summary>
            Subtract the values.
            </summary>
        </member>
        <member name="P:SharpBag.Operator`2.Multiply">
            <summary>
            Multiply the values.
            </summary>
        </member>
        <member name="P:SharpBag.Operator`2.Divide">
            <summary>
            Divide the values.
            </summary>
        </member>
        <member name="P:SharpBag.Operator`2.Modulo">
            <summary>
            Modulo the values.
            </summary>
        </member>
        <member name="T:SharpBag.Operator`1">
            <summary>
            Generic operators.
            </summary>
            <typeparam name="T">The type.</typeparam>
        </member>
        <member name="P:SharpBag.Operator`1.Zero">
            <summary>
            The zero for the current type.
            </summary>
        </member>
        <member name="P:SharpBag.Operator`1.Negate">
            <summary>
            Negate the value.
            </summary>
        </member>
        <member name="P:SharpBag.Operator`1.Not">
            <summary>
            Bitwise Not the value.
            </summary>
        </member>
        <member name="P:SharpBag.Operator`1.Or">
            <summary>
            Bitwise Or the values.
            </summary>
        </member>
        <member name="P:SharpBag.Operator`1.And">
            <summary>
            Bitwise And the values.
            </summary>
        </member>
        <member name="P:SharpBag.Operator`1.Xor">
            <summary>
            Bitwise Xor the values.
            </summary>
        </member>
        <member name="P:SharpBag.Operator`1.Add">
            <summary>
            Add the values.
            </summary>
        </member>
        <member name="P:SharpBag.Operator`1.Subtract">
            <summary>
            Subtract the values.
            </summary>
        </member>
        <member name="P:SharpBag.Operator`1.Multiply">
            <summary>
            Multiply the values.
            </summary>
        </member>
        <member name="P:SharpBag.Operator`1.Divide">
            <summary>
            Divide the values.
            </summary>
        </member>
        <member name="P:SharpBag.Operator`1.Modulo">
            <summary>
            Modulo the values.
            </summary>
        </member>
        <member name="P:SharpBag.Operator`1.Equal">
            <summary>
            Whether the values are equal.
            </summary>
        </member>
        <member name="P:SharpBag.Operator`1.NotEqual">
            <summary>
            Whether the values are not equal.
            </summary>
        </member>
        <member name="P:SharpBag.Operator`1.GreaterThan">
            <summary>
            Whether the first value is greater than the second value.
            </summary>
        </member>
        <member name="P:SharpBag.Operator`1.LessThan">
            <summary>
            Whether the first value is less than the second value.
            </summary>
        </member>
        <member name="P:SharpBag.Operator`1.GreaterThanOrEqual">
            <summary>
            Whether the first value is greater than or equal to the second value.
            </summary>
        </member>
        <member name="P:SharpBag.Operator`1.LessThanOrEqual">
            <summary>
            Whether the first value is less than or equal to the second value.
            </summary>
        </member>
        <member name="T:SharpBag.GenericExtensions">
            <summary>
            A static class containing generic extension methods.
            </summary>
        </member>
        <member name="M:SharpBag.GenericExtensions.IfNotNull``1(``0,System.Action{``0})">
            <summary>
            Invokes the specified action if the current object is not null.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="obj">The object.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:SharpBag.GenericExtensions.IfNotNull``1(``0,System.Action)">
            <summary>
            Invokes the specified action if the current object is not null.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="obj">The object.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:SharpBag.GenericExtensions.InvokeIfRequired(System.Windows.Threading.DispatcherObject,System.Action)">
            <summary>
            Simple helper extension method to marshall to correct thread if its required.
            </summary>
            <param name="control">The source control.</param>
            <param name="methodcall">The method to call.</param>
        </member>
        <member name="M:SharpBag.GenericExtensions.InvokeIfRequired(System.Windows.Threading.DispatcherObject,System.Action,System.Windows.Threading.DispatcherPriority)">
            <summary>
            Simple helper extension method to marshall to correct thread if its required.
            </summary>
            <param name="control">The source control.</param>
            <param name="methodcall">The method to call.</param>
            <param name="priorityForCall">The thread priority.</param>
        </member>
        <member name="M:SharpBag.GenericExtensions.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Whether the current instance is null or empty.
            </summary>
            <typeparam name="T">The type of items in the current instance.</typeparam>
            <param name="collection">The current instance.</param>
            <returns>Whether the current instance is null or empty.</returns>
        </member>
        <member name="M:SharpBag.GenericExtensions.As``1(System.Object,``0)">
            <summary>
            Converts the current instance to the specified type.
            </summary>
            <typeparam name="TOut">Type the current instance will be converted to.</typeparam>
            <param name="original">The current instance.</param>
            <param name="defaultValue">The default value to use in case the current instance can't be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:SharpBag.GenericExtensions.As``1(System.Object,System.IFormatProvider,``0)">
            <summary>
            Converts the current instance to the specified type.
            </summary>
            <typeparam name="TOut">Type the current instance will be converted to.</typeparam>
            <param name="original">The current instance.</param>
            <param name="provider">An IFormatProvider.</param>
            <param name="defaultValue">The default value to use in case the current instance can't be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:SharpBag.GenericExtensions.IsNullableType(System.Type)">
            <summary>
            Returns whether or not the specified type is Nullable{T}
            </summary>
            <param name="type">A Type.</param>
            <returns>True if the specified type is Nullable{T}; otherwise, false.</returns>
            <remarks>Use <see cref="M:System.Nullable.GetUnderlyingType(System.Type)"/> to access the underlying type.</remarks>
        </member>
        <member name="M:SharpBag.GenericExtensions.Write``1(``0)">
            <summary>
            Writes the current instance to the console.
            </summary>
            <param name="o">The specified object.</param>
            <returns>A console helper.</returns>
        </member>
        <member name="M:SharpBag.GenericExtensions.WriteLine``1(``0)">
            <summary>
            Writes the current instance to the console, and then puts the cursor on a new line.
            </summary>
            <param name="o">The specified object.</param>
            <returns>A console helper.</returns>
        </member>
        <member name="M:SharpBag.GenericExtensions.GetHash(System.IO.Stream,System.Security.Cryptography.HashAlgorithm)">
            <summary>
            Gets the current instance's hash.
            </summary>
            <param name="s">The current instance.</param>
            <param name="hasher">The hash function.</param>
            <returns>The hash.</returns>
        </member>
        <member name="M:SharpBag.GenericExtensions.GetHashString(System.IO.Stream,System.Security.Cryptography.HashAlgorithm)">
            <summary>
            Gets the current instance's hash.
            </summary>
            <param name="s">The current instance.</param>
            <param name="hasher">The hash function.</param>
            <returns>The hash.</returns>
        </member>
        <member name="M:SharpBag.GenericExtensions.GetHash(System.String,System.Security.Cryptography.HashAlgorithm)">
            <summary>
            Gets the current instance's hash.
            </summary>
            <param name="s">The current instance.</param>
            <param name="hasher">The hash function.</param>
            <returns>The hash.</returns>
        </member>
        <member name="M:SharpBag.GenericExtensions.GetHashString(System.String,System.Security.Cryptography.HashAlgorithm)">
            <summary>
            Gets the current instance's hash.
            </summary>
            <param name="s">The current instance.</param>
            <param name="hasher">The hash function.</param>
            <returns>The hash.</returns>
        </member>
        <member name="M:SharpBag.GenericExtensions.Do``1(``0,System.Action{``0})">
            <summary>
            Executes the specified action and returns the current instance.
            </summary>
            <typeparam name="T">The type of the current instance.</typeparam>
            <param name="variable">The current instance.</param>
            <param name="action">The action to execute.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:SharpBag.GenericExtensions.Do``2(``0,System.Func{``0,``1})">
            <summary>
            Executes the specified function and returns the result.
            </summary>
            <typeparam name="TIn">The type of the current instance.</typeparam>
            <typeparam name="TOut">The type of the result.</typeparam>
            <param name="variable">The current instance.</param>
            <param name="func">The function to execute.</param>
            <returns>The function result.</returns>
        </member>
        <member name="T:SharpBag.Math.ForInt32.Fraction">
            <summary>
            A rational fraction.
            </summary>
            <remarks>http://www.codeproject.com/KB/recipes/fractiion.aspx</remarks>
        </member>
        <member name="T:SharpBag.Math.Fraction`1">
            <summary>
            A rational fraction.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:SharpBag.Math.Fraction`1.ToString(System.Int32)">
            <summary>
            Object.ToString()
            </summary>
            <param name="digits">The maximum number of digits after the comma.</param>
            <returns>The string representation of the fraction.</returns>
        </member>
        <member name="P:SharpBag.Math.Fraction`1.Numerator">
            <summary>
            The numerator.
            </summary>
        </member>
        <member name="P:SharpBag.Math.Fraction`1.Denominator">
            <summary>
            The denominator.
            </summary>
        </member>
        <member name="P:SharpBag.Math.Fraction`1.AutoReduce">
            <summary>
            Whether to automatically reduce the fraction.
            </summary>
        </member>
        <member name="F:SharpBag.Math.ForInt32.Fraction.PositiveOne">
            <summary>
            A fraction that represents positive one.
            </summary>
        </member>
        <member name="F:SharpBag.Math.ForInt32.Fraction.NegativeOne">
            <summary>
            A fraction that represents negative one.
            </summary>
        </member>
        <member name="F:SharpBag.Math.ForInt32.Fraction.Zero">
            <summary>
            A fraction that represents zero.
            </summary>
        </member>
        <member name="F:SharpBag.Math.ForInt32.Fraction.PositiveInfinity">
            <summary>
            A fraction that represents positive infinity.
            </summary>
        </member>
        <member name="F:SharpBag.Math.ForInt32.Fraction.NegativeInfinity">
            <summary>
            A fraction that represents negative infinity.
            </summary>
        </member>
        <member name="F:SharpBag.Math.ForInt32.Fraction.NaN">
            <summary>
            A fraction that represents NaN (not a number).
            </summary>
        </member>
        <member name="F:SharpBag.Math.ForInt32.Fraction.MaxValue">
            <summary>
            A fraction that represents the maximum value of a fraction.
            </summary>
        </member>
        <member name="F:SharpBag.Math.ForInt32.Fraction.MinValue">
            <summary>
            A fraction that represents the minimum value of a fraction.
            </summary>
        </member>
        <member name="M:SharpBag.Math.ForInt32.Fraction.IsNaN(SharpBag.Math.ForInt32.Fraction)">
            <summary>
            Determines whether the fraction is NaN.
            </summary>
            <param name="fraction">The fraction.</param>
            <returns>Whether the fraction is NaN.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt32.Fraction.IsPositiveInfinity(SharpBag.Math.ForInt32.Fraction)">
            <summary>
            Determines whether the fraction is positive infinity.
            </summary>
            <param name="fraction">The fraction.</param>
            <returns>Whether the fraction is positive infinity.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt32.Fraction.IsNegativeInfinity(SharpBag.Math.ForInt32.Fraction)">
            <summary>
            Determines whether the fraction is negative infinity.
            </summary>
            <param name="fraction">The fraction.</param>
            <returns>Whether the fraction is negative infinity.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt32.Fraction.IsInfinity(SharpBag.Math.ForInt32.Fraction)">
            <summary>
            Determines whether the fraction is infinity.
            </summary>
            <param name="fraction">The fraction.</param>
            <returns>Whether the fraction is infinity.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt32.Fraction.PartialQuotientsOfSquareRootOf(System.Int32)">
            <summary>
            Returns the partial quotients of the square root of the specified number.
            </summary>
            <param name="s">The number.</param>
            <returns>The partial quotients of the square root of the specified number.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt32.Fraction.RecurringCycle(SharpBag.Math.ForInt32.Fraction)">
            <summary>
            Finds the recurring cycle of the specified fraction.
            </summary>
            <param name="fraction">The specified fraction.</param>
            <returns>The cycle start and cycle length. Null if no cycle was found.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt32.Fraction.Pow(SharpBag.Math.ForInt32.Fraction,System.Int32)">
            <summary>
            Raises the fraction to the specified power.
            </summary>
            <param name="fraction">The fraction.</param>
            <param name="power">The power.</param>
            <returns>The fraction raised to the specified power.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt32.Fraction.Sqrt(SharpBag.Math.ForInt32.Fraction)">
            <summary>
            Computes the square root of the fraction.
            </summary>
            <param name="fraction">The fraction.</param>
            <returns>The square root.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt32.Fraction.#ctor(System.Int32,System.Int32)">
            <summary>
            The constructor.
            </summary>
            <param name="numerator">The numerator.</param>
            <param name="denominator">The denominator.</param>
        </member>
        <member name="M:SharpBag.Math.ForInt32.Fraction.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            The constructor.
            </summary>
            <param name="numerator">The numerator.</param>
            <param name="denominator">The denominator.</param>
            <param name="autoReduce">Whether to automatically reduce the fraction.</param>
        </member>
        <member name="M:SharpBag.Math.ForInt32.Fraction.#ctor(System.Int32)">
            <summary>
            The constructor.
            </summary>
            <param name="wholeNumber">The number of wholes.</param>
        </member>
        <member name="M:SharpBag.Math.ForInt32.Fraction.#ctor(System.Int32,System.Boolean)">
            <summary>
            The constructor.
            </summary>
            <param name="wholeNumber">The number of wholes.</param>
            <param name="autoReduce">Whether to automatically reduce the fraction.</param>
        </member>
        <member name="M:SharpBag.Math.ForInt32.Fraction.#ctor(SharpBag.Math.ForInt32.Fraction,SharpBag.Math.ForInt32.Fraction)">
            <summary>
            The constructor.
            </summary>
            <param name="numerator">The numerator.</param>
            <param name="denominator">The denominator.</param>
        </member>
        <member name="M:SharpBag.Math.ForInt32.Fraction.#ctor(SharpBag.Math.Fraction{System.Int32})">
            <summary>
            The constructor.
            </summary>
            <param name="other">Another fraction to copy.</param>
        </member>
        <member name="M:SharpBag.Math.ForInt32.Fraction.FromPartialQuotients(System.Int32[])">
            <summary>
            Returns the fraction represented by the partial quotients.
            </summary>
            <param name="terms">The partial quotients of the continued fraction.</param>
            <returns>The fraction represented by the partial quotients.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt32.Fraction.FromFloatingPoint(System.Double)">
            <summary>
            Returns the fraction represented by the floting point number.
            </summary>
            <param name="value">The floating point number.</param>
            <returns>The fraction represented by the floting point number.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt32.Fraction.Parse(System.String)">
            <summary>
            Parse the specified string.
            </summary>
            <param name="fraction">The fraction as a string.</param>
            <returns>The parsed fraction.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt32.Fraction.op_Addition(SharpBag.Math.ForInt32.Fraction,SharpBag.Math.ForInt32.Fraction)">
            <summary>
            The addition operator.
            </summary>
            <param name="left">The left fraction.</param>
            <param name="right">The right fraction.</param>
            <returns>The added fractions.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt32.Fraction.op_Subtraction(SharpBag.Math.ForInt32.Fraction,SharpBag.Math.ForInt32.Fraction)">
            <summary>
            The subtraction operator.
            </summary>
            <param name="left">The left fraction.</param>
            <param name="right">The right fraction.</param>
            <returns>The subtracted fractions.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt32.Fraction.op_UnaryNegation(SharpBag.Math.ForInt32.Fraction)">
            <summary>
            The negation operator.
            </summary>
            <param name="fraction">The fraction.</param>
            <returns>The negated fraction.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt32.Fraction.op_Multiply(SharpBag.Math.ForInt32.Fraction,SharpBag.Math.ForInt32.Fraction)">
            <summary>
            The multiplication operator.
            </summary>
            <param name="left">The left fraction.</param>
            <param name="right">The right fraction.</param>
            <returns>The fractions multiplied.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt32.Fraction.op_Division(SharpBag.Math.ForInt32.Fraction,SharpBag.Math.ForInt32.Fraction)">
            <summary>
            The division operator.
            </summary>
            <param name="left">The left fraction.</param>
            <param name="right">The right fraction.</param>
            <returns>The fractions divided.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt32.Fraction.op_Modulus(SharpBag.Math.ForInt32.Fraction,SharpBag.Math.ForInt32.Fraction)">
            <summary>
            The modulo operator.
            </summary>
            <param name="left">The left fraction.</param>
            <param name="right">The right fraction.</param>
            <returns>The left fraction modulo the right fraction.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt32.Fraction.op_GreaterThan(SharpBag.Math.ForInt32.Fraction,SharpBag.Math.ForInt32.Fraction)">
            <summary>
            The greater than operator.
            </summary>
            <param name="left">The left fraction.</param>
            <param name="right">The right fraction.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt32.Fraction.op_GreaterThanOrEqual(SharpBag.Math.ForInt32.Fraction,SharpBag.Math.ForInt32.Fraction)">
            <summary>
            The greater than or equal to operator.
            </summary>
            <param name="left">The left fraction.</param>
            <param name="right">The right fraction.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt32.Fraction.op_LessThan(SharpBag.Math.ForInt32.Fraction,SharpBag.Math.ForInt32.Fraction)">
            <summary>
            The less than operator.
            </summary>
            <param name="left">The left fraction.</param>
            <param name="right">The right fraction.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt32.Fraction.op_LessThanOrEqual(SharpBag.Math.ForInt32.Fraction,SharpBag.Math.ForInt32.Fraction)">
            <summary>
            The less than or equal to operator.
            </summary>
            <param name="left">The left fraction.</param>
            <param name="right">The right fraction.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt32.Fraction.op_Equality(SharpBag.Math.ForInt32.Fraction,SharpBag.Math.ForInt32.Fraction)">
            <summary>
            The equal operator.
            </summary>
            <param name="left">The left fraction.</param>
            <param name="right">The right fraction.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt32.Fraction.op_Inequality(SharpBag.Math.ForInt32.Fraction,SharpBag.Math.ForInt32.Fraction)">
            <summary>
            The not equal operator.
            </summary>
            <param name="left">The left fraction.</param>
            <param name="right">The right fraction.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt32.Fraction.Equals(SharpBag.Math.ForInt32.Fraction)">
            <summary>
            Whether the fractions are equal.
            </summary>
            <param name="other">Another fraction.</param>
            <returns>Whether the fractions are equal.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt32.Fraction.CompareTo(SharpBag.Math.ForInt32.Fraction)">
            <summary>
            Compare the fraction to another fraction.
            </summary>
            <param name="other">Another fraction.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt32.Fraction.AsInt64Fraction">
            <summary>
            Converts the fraction to an Int64 fraction.
            </summary>
            <returns>The converted fraction.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt32.Fraction.AsBigIntegerFraction">
            <summary>
            Converts the fraction to a BigInteger fraction.
            </summary>
            <returns>The converted fraction.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt32.Fraction.op_Implicit(System.Int32)~SharpBag.Math.ForInt32.Fraction">
            <summary>
            An implicit cast operator from an integer to a fraction.
            </summary>
            <param name="integer">The integer.</param>
            <returns>The fraction.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt32.Fraction.op_Explicit(System.Int64)~SharpBag.Math.ForInt32.Fraction">
            <summary>
            An explicit cast operator from an integer to a fraction.
            </summary>
            <param name="integer">The integer.</param>
            <returns>The fraction.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt32.Fraction.op_Explicit(System.Numerics.BigInteger)~SharpBag.Math.ForInt32.Fraction">
            <summary>
            An explicit cast operator from an integer to a fraction.
            </summary>
            <param name="integer">The integer.</param>
            <returns>The fraction.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt32.Fraction.op_Explicit(System.Double)~SharpBag.Math.ForInt32.Fraction">
            <summary>
            An explicit cast operator from a floating point number to a fraction.
            </summary>
            <param name="floatingPoint">The floating point number.</param>
            <returns>The fraction.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt32.Fraction.op_Explicit(SharpBag.Math.ForInt32.Fraction)~System.Int32">
            <summary>
            An explicit cast operator from a fraction to an integer.
            </summary>
            <param name="fraction">The fraction.</param>
            <returns>The integer.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt32.Fraction.op_Explicit(SharpBag.Math.ForInt32.Fraction)~System.Int64">
            <summary>
            An explicit cast operator from a fraction to a long integer.
            </summary>
            <param name="fraction">The fraction.</param>
            <returns>The long integer.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt32.Fraction.op_Explicit(SharpBag.Math.ForInt32.Fraction)~System.Numerics.BigInteger">
            <summary>
            An explicit cast operator from a fraction to a BigInteger.
            </summary>
            <param name="fraction">The fraction.</param>
            <returns>The BigInteger.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt32.Fraction.op_Explicit(SharpBag.Math.ForInt32.Fraction)~System.Double">
            <summary>
            An explicit cast operator from a fraction to a double.
            </summary>
            <param name="fraction">The fraction.</param>
            <returns>The double.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt32.Fraction.op_Explicit(SharpBag.Math.ForInt32.Fraction)~System.Decimal">
            <summary>
            An explicit cast operator from a fraction to a decimal.
            </summary>
            <param name="fraction">The fraction.</param>
            <returns>The decimal.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt32.Fraction.op_Explicit(SharpBag.Math.ForInt32.Fraction)~System.Single">
            <summary>
            An explicit cast operator from a fraction to a float.
            </summary>
            <param name="fraction">The fraction.</param>
            <returns>The float.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt32.Fraction.Clone">
            <summary>
            Clones the fraction.
            </summary>
            <returns>The cloned fraction.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt32.Fraction.GetHashCode">
            <summary>
            Object.GetHashCode()
            </summary>
            <returns>The hash code of the fraction.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt32.Fraction.Equals(System.Object)">
            <summary>
            Object.Equals()
            </summary>
            <param name="obj">The other object.</param>
            <returns>Whether the object are equal.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt32.Fraction.ToString">
            <summary>
            Object.ToString()
            </summary>
            <returns>The string representation of the fraction.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt32.Fraction.ToString(System.Int32)">
            <summary>
            Object.ToString()
            </summary>
            <param name="digits">The maximum number of digits after the comma.</param>
            <returns>The string representation of the fraction.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt32.Fraction.ToString(System.String,System.IFormatProvider)">
            <summary>
            IFormattable.ToString()
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>The formatted string.</returns>
            <remarks>
            Format string: type,digits
            Type is either D or C.
            D is the same as ToString(digits) where digits is the number of digits.
            C is is the same as C, but recurring cycles are treated specially.
            If digits is not present, 10 will be used.
            </remarks>
            <example>
            String.Format("{0}",     new Fraction(123, 999) / 100) == 41/33300
            String.Format("{0:C}",   new Fraction(123, 999) / 100) == 0,00(123)
            String.Format("{0:C,2}", new Fraction(123, 999) / 100) == 0,00(123)
            String.Format("{0:D}",   new Fraction(123, 999) / 100) == 0,0012312312
            String.Format("{0:D,2}", new Fraction(123, 999) / 100) == 0
            </example>
        </member>
        <member name="P:SharpBag.Math.ForInt32.Fraction.Numerator">
            <summary>
            The numerator.
            </summary>
        </member>
        <member name="P:SharpBag.Math.ForInt32.Fraction.Denominator">
            <summary>
            The denominator.
            </summary>
        </member>
        <member name="P:SharpBag.Math.ForInt32.Fraction.DefaultAutoReduce">
            <summary>
            The default value of auto-reduce.
            </summary>
        </member>
        <member name="P:SharpBag.Math.ForInt32.Fraction.AutoReduce">
            <summary>
            Whether to automatically reduce the fraction.
            </summary>
        </member>
        <member name="P:SharpBag.Math.ForInt32.Fraction.Reciprocal">
            <summary>
            Returns the reciprocal of the fraction.
            </summary>
        </member>
        <member name="P:SharpBag.Math.ForInt32.Fraction.Wholes">
            <summary>
            Returns the number of wholes in the fraction.
            </summary>
        </member>
        <member name="P:SharpBag.Math.ForInt32.Fraction.Remainder">
            <summary>
            Returns the remainder of the fraction.
            </summary>
        </member>
        <member name="P:SharpBag.Math.ForInt32.Fraction.Floor">
            <summary>
            Returns the floor of the fraction.
            </summary>
        </member>
        <member name="P:SharpBag.Math.ForInt32.Fraction.Ceiling">
            <summary>
            Returns the ceiling of the fraction.
            </summary>
        </member>
        <member name="P:SharpBag.Math.ForInt32.Fraction.Reduced">
            <summary>
            Returns the reduced version of the fraction.
            </summary>
        </member>
        <member name="P:SharpBag.Math.ForInt32.Fraction.PartialQuotients">
            <summary>
            Returns the partial quotients of the fraction.
            </summary>
        </member>
        <member name="T:SharpBag.Math.ForBigInteger.Fraction">
            <summary>
            A rational fraction.
            </summary>
            <remarks>http://www.codeproject.com/KB/recipes/fractiion.aspx</remarks>
        </member>
        <member name="F:SharpBag.Math.ForBigInteger.Fraction.PositiveOne">
            <summary>
            A fraction that represents positive one.
            </summary>
        </member>
        <member name="F:SharpBag.Math.ForBigInteger.Fraction.NegativeOne">
            <summary>
            A fraction that represents negative one.
            </summary>
        </member>
        <member name="F:SharpBag.Math.ForBigInteger.Fraction.Zero">
            <summary>
            A fraction that represents zero.
            </summary>
        </member>
        <member name="F:SharpBag.Math.ForBigInteger.Fraction.PositiveInfinity">
            <summary>
            A fraction that represents positive infinity.
            </summary>
        </member>
        <member name="F:SharpBag.Math.ForBigInteger.Fraction.NegativeInfinity">
            <summary>
            A fraction that represents negative infinity.
            </summary>
        </member>
        <member name="F:SharpBag.Math.ForBigInteger.Fraction.NaN">
            <summary>
            A fraction that represents NaN (not a number).
            </summary>
        </member>
        <member name="F:SharpBag.Math.ForBigInteger.Fraction.MaxValue">
            <summary>
            A fraction that represents the maximum value of a fraction.
            </summary>
        </member>
        <member name="F:SharpBag.Math.ForBigInteger.Fraction.MinValue">
            <summary>
            A fraction that represents the minimum value of a fraction.
            </summary>
        </member>
        <member name="M:SharpBag.Math.ForBigInteger.Fraction.IsNaN(SharpBag.Math.ForBigInteger.Fraction)">
            <summary>
            Determines whether the fraction is NaN.
            </summary>
            <param name="fraction">The fraction.</param>
            <returns>Whether the fraction is NaN.</returns>
        </member>
        <member name="M:SharpBag.Math.ForBigInteger.Fraction.IsPositiveInfinity(SharpBag.Math.ForBigInteger.Fraction)">
            <summary>
            Determines whether the fraction is positive infinity.
            </summary>
            <param name="fraction">The fraction.</param>
            <returns>Whether the fraction is positive infinity.</returns>
        </member>
        <member name="M:SharpBag.Math.ForBigInteger.Fraction.IsNegativeInfinity(SharpBag.Math.ForBigInteger.Fraction)">
            <summary>
            Determines whether the fraction is negative infinity.
            </summary>
            <param name="fraction">The fraction.</param>
            <returns>Whether the fraction is negative infinity.</returns>
        </member>
        <member name="M:SharpBag.Math.ForBigInteger.Fraction.IsInfinity(SharpBag.Math.ForBigInteger.Fraction)">
            <summary>
            Determines whether the fraction is infinity.
            </summary>
            <param name="fraction">The fraction.</param>
            <returns>Whether the fraction is infinity.</returns>
        </member>
        <member name="M:SharpBag.Math.ForBigInteger.Fraction.PartialQuotientsOfSquareRootOf(System.Numerics.BigInteger)">
            <summary>
            Returns the partial quotients of the square root of the specified number.
            </summary>
            <param name="s">The number.</param>
            <returns>The partial quotients of the square root of the specified number.</returns>
        </member>
        <member name="M:SharpBag.Math.ForBigInteger.Fraction.RecurringCycle(SharpBag.Math.ForBigInteger.Fraction)">
            <summary>
            Finds the recurring cycle of the specified fraction.
            </summary>
            <param name="fraction">The specified fraction.</param>
            <returns>The cycle start and cycle length. Null if no cycle was found.</returns>
        </member>
        <member name="M:SharpBag.Math.ForBigInteger.Fraction.Pow(SharpBag.Math.ForBigInteger.Fraction,System.Int32)">
            <summary>
            Raises the fraction to the specified power.
            </summary>
            <param name="fraction">The fraction.</param>
            <param name="power">The power.</param>
            <returns>The fraction raised to the specified power.</returns>
        </member>
        <member name="M:SharpBag.Math.ForBigInteger.Fraction.Sqrt(SharpBag.Math.ForBigInteger.Fraction)">
            <summary>
            Computes the square root of the fraction.
            </summary>
            <param name="fraction">The fraction.</param>
            <returns>The square root.</returns>
        </member>
        <member name="M:SharpBag.Math.ForBigInteger.Fraction.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger)">
            <summary>
            The constructor.
            </summary>
            <param name="numerator">The numerator.</param>
            <param name="denominator">The denominator.</param>
        </member>
        <member name="M:SharpBag.Math.ForBigInteger.Fraction.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean)">
            <summary>
            The constructor.
            </summary>
            <param name="numerator">The numerator.</param>
            <param name="denominator">The denominator.</param>
            <param name="autoReduce">Whether to automatically reduce the fraction.</param>
        </member>
        <member name="M:SharpBag.Math.ForBigInteger.Fraction.#ctor(System.Numerics.BigInteger)">
            <summary>
            The constructor.
            </summary>
            <param name="wholeNumber">The number of wholes.</param>
        </member>
        <member name="M:SharpBag.Math.ForBigInteger.Fraction.#ctor(System.Numerics.BigInteger,System.Boolean)">
            <summary>
            The constructor.
            </summary>
            <param name="wholeNumber">The number of wholes.</param>
            <param name="autoReduce">Whether to automatically reduce the fraction.</param>
        </member>
        <member name="M:SharpBag.Math.ForBigInteger.Fraction.#ctor(SharpBag.Math.ForBigInteger.Fraction,SharpBag.Math.ForBigInteger.Fraction)">
            <summary>
            The constructor.
            </summary>
            <param name="numerator">The numerator.</param>
            <param name="denominator">The denominator.</param>
        </member>
        <member name="M:SharpBag.Math.ForBigInteger.Fraction.#ctor(SharpBag.Math.Fraction{System.Numerics.BigInteger})">
            <summary>
            The constructor.
            </summary>
            <param name="other">Another fraction to copy.</param>
        </member>
        <member name="M:SharpBag.Math.ForBigInteger.Fraction.FromPartialQuotients(System.Numerics.BigInteger[])">
            <summary>
            Returns the fraction represented by the partial quotients.
            </summary>
            <param name="terms">The partial quotients of the continued fraction.</param>
            <returns>The fraction represented by the partial quotients.</returns>
        </member>
        <member name="M:SharpBag.Math.ForBigInteger.Fraction.FromFloatingPoint(System.Double)">
            <summary>
            Returns the fraction represented by the floting point number.
            </summary>
            <param name="value">The floating point number.</param>
            <returns>The fraction represented by the floting point number.</returns>
        </member>
        <member name="M:SharpBag.Math.ForBigInteger.Fraction.Parse(System.String)">
            <summary>
            Parse the specified string.
            </summary>
            <param name="fraction">The fraction as a string.</param>
            <returns>The parsed fraction.</returns>
        </member>
        <member name="M:SharpBag.Math.ForBigInteger.Fraction.op_Addition(SharpBag.Math.ForBigInteger.Fraction,SharpBag.Math.ForBigInteger.Fraction)">
            <summary>
            The addition operator.
            </summary>
            <param name="left">The left fraction.</param>
            <param name="right">The right fraction.</param>
            <returns>The added fractions.</returns>
        </member>
        <member name="M:SharpBag.Math.ForBigInteger.Fraction.op_Subtraction(SharpBag.Math.ForBigInteger.Fraction,SharpBag.Math.ForBigInteger.Fraction)">
            <summary>
            The subtraction operator.
            </summary>
            <param name="left">The left fraction.</param>
            <param name="right">The right fraction.</param>
            <returns>The subtracted fractions.</returns>
        </member>
        <member name="M:SharpBag.Math.ForBigInteger.Fraction.op_UnaryNegation(SharpBag.Math.ForBigInteger.Fraction)">
            <summary>
            The negation operator.
            </summary>
            <param name="fraction">The fraction.</param>
            <returns>The negated fraction.</returns>
        </member>
        <member name="M:SharpBag.Math.ForBigInteger.Fraction.op_Multiply(SharpBag.Math.ForBigInteger.Fraction,SharpBag.Math.ForBigInteger.Fraction)">
            <summary>
            The multiplication operator.
            </summary>
            <param name="left">The left fraction.</param>
            <param name="right">The right fraction.</param>
            <returns>The fractions multiplied.</returns>
        </member>
        <member name="M:SharpBag.Math.ForBigInteger.Fraction.op_Division(SharpBag.Math.ForBigInteger.Fraction,SharpBag.Math.ForBigInteger.Fraction)">
            <summary>
            The division operator.
            </summary>
            <param name="left">The left fraction.</param>
            <param name="right">The right fraction.</param>
            <returns>The fractions divided.</returns>
        </member>
        <member name="M:SharpBag.Math.ForBigInteger.Fraction.op_Modulus(SharpBag.Math.ForBigInteger.Fraction,SharpBag.Math.ForBigInteger.Fraction)">
            <summary>
            The modulo operator.
            </summary>
            <param name="left">The left fraction.</param>
            <param name="right">The right fraction.</param>
            <returns>The left fraction modulo the right fraction.</returns>
        </member>
        <member name="M:SharpBag.Math.ForBigInteger.Fraction.op_GreaterThan(SharpBag.Math.ForBigInteger.Fraction,SharpBag.Math.ForBigInteger.Fraction)">
            <summary>
            The greater than operator.
            </summary>
            <param name="left">The left fraction.</param>
            <param name="right">The right fraction.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:SharpBag.Math.ForBigInteger.Fraction.op_GreaterThanOrEqual(SharpBag.Math.ForBigInteger.Fraction,SharpBag.Math.ForBigInteger.Fraction)">
            <summary>
            The greater than or equal to operator.
            </summary>
            <param name="left">The left fraction.</param>
            <param name="right">The right fraction.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:SharpBag.Math.ForBigInteger.Fraction.op_LessThan(SharpBag.Math.ForBigInteger.Fraction,SharpBag.Math.ForBigInteger.Fraction)">
            <summary>
            The less than operator.
            </summary>
            <param name="left">The left fraction.</param>
            <param name="right">The right fraction.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:SharpBag.Math.ForBigInteger.Fraction.op_LessThanOrEqual(SharpBag.Math.ForBigInteger.Fraction,SharpBag.Math.ForBigInteger.Fraction)">
            <summary>
            The less than or equal to operator.
            </summary>
            <param name="left">The left fraction.</param>
            <param name="right">The right fraction.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:SharpBag.Math.ForBigInteger.Fraction.op_Equality(SharpBag.Math.ForBigInteger.Fraction,SharpBag.Math.ForBigInteger.Fraction)">
            <summary>
            The equal operator.
            </summary>
            <param name="left">The left fraction.</param>
            <param name="right">The right fraction.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:SharpBag.Math.ForBigInteger.Fraction.op_Inequality(SharpBag.Math.ForBigInteger.Fraction,SharpBag.Math.ForBigInteger.Fraction)">
            <summary>
            The not equal operator.
            </summary>
            <param name="left">The left fraction.</param>
            <param name="right">The right fraction.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:SharpBag.Math.ForBigInteger.Fraction.Equals(SharpBag.Math.ForBigInteger.Fraction)">
            <summary>
            Whether the fractions are equal.
            </summary>
            <param name="other">Another fraction.</param>
            <returns>Whether the fractions are equal.</returns>
        </member>
        <member name="M:SharpBag.Math.ForBigInteger.Fraction.CompareTo(SharpBag.Math.ForBigInteger.Fraction)">
            <summary>
            Compare the fraction to another fraction.
            </summary>
            <param name="other">Another fraction.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:SharpBag.Math.ForBigInteger.Fraction.AsInt64Fraction">
            <summary>
            Converts the fraction to an Int64 fraction.
            </summary>
            <returns>The converted fraction.</returns>
        </member>
        <member name="M:SharpBag.Math.ForBigInteger.Fraction.AsInt32Fraction">
            <summary>
            Converts the fraction to an Int32 fraction.
            </summary>
            <returns>The converted fraction.</returns>
        </member>
        <member name="M:SharpBag.Math.ForBigInteger.Fraction.op_Implicit(System.Int32)~SharpBag.Math.ForBigInteger.Fraction">
            <summary>
            An implicit cast operator from an integer to a fraction.
            </summary>
            <param name="integer">The integer.</param>
            <returns>The fraction.</returns>
        </member>
        <member name="M:SharpBag.Math.ForBigInteger.Fraction.op_Implicit(System.Int64)~SharpBag.Math.ForBigInteger.Fraction">
            <summary>
            An implicit cast operator from an integer to a fraction.
            </summary>
            <param name="integer">The integer.</param>
            <returns>The fraction.</returns>
        </member>
        <member name="M:SharpBag.Math.ForBigInteger.Fraction.op_Implicit(System.Numerics.BigInteger)~SharpBag.Math.ForBigInteger.Fraction">
            <summary>
            An implicit cast operator from an integer to a fraction.
            </summary>
            <param name="integer">The integer.</param>
            <returns>The fraction.</returns>
        </member>
        <member name="M:SharpBag.Math.ForBigInteger.Fraction.op_Explicit(System.Double)~SharpBag.Math.ForBigInteger.Fraction">
            <summary>
            An explicit cast operator from a floating point number to a fraction.
            </summary>
            <param name="floatingPoint">The floating point number.</param>
            <returns>The fraction.</returns>
        </member>
        <member name="M:SharpBag.Math.ForBigInteger.Fraction.op_Explicit(SharpBag.Math.ForBigInteger.Fraction)~System.Int32">
            <summary>
            An explicit cast operator from a fraction to an integer.
            </summary>
            <param name="fraction">The fraction.</param>
            <returns>The integer.</returns>
        </member>
        <member name="M:SharpBag.Math.ForBigInteger.Fraction.op_Explicit(SharpBag.Math.ForBigInteger.Fraction)~System.Int64">
            <summary>
            An explicit cast operator from a fraction to a long integer.
            </summary>
            <param name="fraction">The fraction.</param>
            <returns>The long integer.</returns>
        </member>
        <member name="M:SharpBag.Math.ForBigInteger.Fraction.op_Explicit(SharpBag.Math.ForBigInteger.Fraction)~System.Numerics.BigInteger">
            <summary>
            An explicit cast operator from a fraction to a BigInteger.
            </summary>
            <param name="fraction">The fraction.</param>
            <returns>The BigInteger.</returns>
        </member>
        <member name="M:SharpBag.Math.ForBigInteger.Fraction.op_Explicit(SharpBag.Math.ForBigInteger.Fraction)~System.Double">
            <summary>
            An explicit cast operator from a fraction to a double.
            </summary>
            <param name="fraction">The fraction.</param>
            <returns>The double.</returns>
        </member>
        <member name="M:SharpBag.Math.ForBigInteger.Fraction.op_Explicit(SharpBag.Math.ForBigInteger.Fraction)~System.Decimal">
            <summary>
            An explicit cast operator from a fraction to a decimal.
            </summary>
            <param name="fraction">The fraction.</param>
            <returns>The decimal.</returns>
        </member>
        <member name="M:SharpBag.Math.ForBigInteger.Fraction.op_Explicit(SharpBag.Math.ForBigInteger.Fraction)~System.Single">
            <summary>
            An explicit cast operator from a fraction to a float.
            </summary>
            <param name="fraction">The fraction.</param>
            <returns>The float.</returns>
        </member>
        <member name="M:SharpBag.Math.ForBigInteger.Fraction.Clone">
            <summary>
            Clones the fraction.
            </summary>
            <returns>The cloned fraction.</returns>
        </member>
        <member name="M:SharpBag.Math.ForBigInteger.Fraction.GetHashCode">
            <summary>
            Object.GetHashCode()
            </summary>
            <returns>The hash code of the fraction.</returns>
        </member>
        <member name="M:SharpBag.Math.ForBigInteger.Fraction.Equals(System.Object)">
            <summary>
            Object.Equals()
            </summary>
            <param name="obj">The other object.</param>
            <returns>Whether the object are equal.</returns>
        </member>
        <member name="M:SharpBag.Math.ForBigInteger.Fraction.ToString">
            <summary>
            Object.ToString()
            </summary>
            <returns>The string representation of the fraction.</returns>
        </member>
        <member name="M:SharpBag.Math.ForBigInteger.Fraction.ToString(System.Int32)">
            <summary>
            Object.ToString()
            </summary>
            <param name="digits">The maximum number of digits after the comma.</param>
            <returns>The string representation of the fraction.</returns>
        </member>
        <member name="M:SharpBag.Math.ForBigInteger.Fraction.ToString(System.String,System.IFormatProvider)">
            <summary>
            IFormattable.ToString()
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>The formatted string.</returns>
            <remarks>
            Format string: type,digits
            Type is either D or C.
            D is the same as ToString(digits) where digits is the number of digits.
            C is is the same as C, but recurring cycles are treated specially.
            If digits is not present, 10 will be used.
            </remarks>
            <example>
            String.Format("{0}",     new Fraction(123, 999) / 100) == 41/33300
            String.Format("{0:C}",   new Fraction(123, 999) / 100) == 0,00(123)
            String.Format("{0:C,2}", new Fraction(123, 999) / 100) == 0,00(123)
            String.Format("{0:D}",   new Fraction(123, 999) / 100) == 0,0012312312
            String.Format("{0:D,2}", new Fraction(123, 999) / 100) == 0
            </example>
        </member>
        <member name="P:SharpBag.Math.ForBigInteger.Fraction.Numerator">
            <summary>
            The numerator.
            </summary>
        </member>
        <member name="P:SharpBag.Math.ForBigInteger.Fraction.Denominator">
            <summary>
            The denominator.
            </summary>
        </member>
        <member name="P:SharpBag.Math.ForBigInteger.Fraction.DefaultAutoReduce">
            <summary>
            The default value of auto-reduce.
            </summary>
        </member>
        <member name="P:SharpBag.Math.ForBigInteger.Fraction.AutoReduce">
            <summary>
            Whether to automatically reduce the fraction.
            </summary>
        </member>
        <member name="P:SharpBag.Math.ForBigInteger.Fraction.Reciprocal">
            <summary>
            Returns the reciprocal of the fraction.
            </summary>
        </member>
        <member name="P:SharpBag.Math.ForBigInteger.Fraction.Wholes">
            <summary>
            Returns the number of wholes in the fraction.
            </summary>
        </member>
        <member name="P:SharpBag.Math.ForBigInteger.Fraction.Remainder">
            <summary>
            Returns the remainder of the fraction.
            </summary>
        </member>
        <member name="P:SharpBag.Math.ForBigInteger.Fraction.Floor">
            <summary>
            Returns the floor of the fraction.
            </summary>
        </member>
        <member name="P:SharpBag.Math.ForBigInteger.Fraction.Ceiling">
            <summary>
            Returns the ceiling of the fraction.
            </summary>
        </member>
        <member name="P:SharpBag.Math.ForBigInteger.Fraction.Reduced">
            <summary>
            Returns the reduced version of the fraction.
            </summary>
        </member>
        <member name="P:SharpBag.Math.ForBigInteger.Fraction.PartialQuotients">
            <summary>
            Returns the partial quotients of the fraction.
            </summary>
        </member>
        <member name="T:SharpBag.Math.ForBigInteger.Point">
            <summary>
            A point.
            </summary>
        </member>
        <member name="M:SharpBag.Math.ForBigInteger.Point.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger)">
            <summary>
            The constructor.
            </summary>
            <param name="x">The X coordinate.</param>
            <param name="y">The Y coordinate.</param>
        </member>
        <member name="P:SharpBag.Math.ForBigInteger.Point.X">
            <summary>
            The X coordinate.
            </summary>
        </member>
        <member name="P:SharpBag.Math.ForBigInteger.Point.Y">
            <summary>
            The Y coordinate.
            </summary>
        </member>
        <member name="T:SharpBag.Math.BaseConverter">
            <summary>
            Converts numbers between bases.
            </summary>
        </member>
        <member name="M:SharpBag.Math.BaseConverter.ToBase(System.String,System.Int32,System.Int32)">
            <summary>
            Converts the specified number from the specified start base to the specified target base.
            </summary>
            <param name="number">The number as a string.</param>
            <param name="startBase">The base of the number.</param>
            <param name="targetBase">The base to convert to.</param>
            <returns>The specified number in the specified target base.</returns>
            <remarks>Bases must be in the range 2 to 36.</remarks>
        </member>
        <member name="M:SharpBag.Math.BaseConverter.ToBase10(System.String,System.Int32)">
            <summary>
            Converts the specified number from the specified start base to base 10.
            </summary>
            <param name="number">The number as a string.</param>
            <param name="startBase">The base of the number.</param>
            <returns>The number in base 10.</returns>
            <remarks>Bases must be in the range 2 to 36.</remarks>
        </member>
        <member name="M:SharpBag.Math.BaseConverter.FromBase10(System.Int32,System.Int32)">
            <summary>
            Converts the specified base 10 number to the specified target base.
            </summary>
            <param name="number">The base 10 number.</param>
            <param name="targetBase">The target base.</param>
            <returns>The target in the target base.</returns>
            <remarks>Bases must be in the range 2 to 36.</remarks>
        </member>
        <member name="T:SharpBag.LambdaComparer`1">
            <summary>
            An IEqualityComparer for use with lambda functions.
            </summary>
            <typeparam name="T">The type of object to compare.</typeparam>
        </member>
        <member name="M:SharpBag.LambdaComparer`1.#ctor(System.Func{`0,`0,System.Boolean},System.Func{`0,System.Int32})">
            <summary>
            The constructor.
            </summary>
            <param name="compare">The compare function.</param>
            <param name="hash">The hash function.</param>
        </member>
        <member name="M:SharpBag.LambdaComparer`1.Equals(`0,`0)">
            <summary>
            IEqualityComparer{T}.Equals(T, T)
            </summary>
        </member>
        <member name="M:SharpBag.LambdaComparer`1.GetHashCode(`0)">
            <summary>
            IEqualityComparer{T}.GetHashCode(T)
            </summary>
        </member>
        <member name="T:SharpBag.Database.MySqlDatabase">
            <summary>
            A class for working with MySQL databases.
            </summary>
        </member>
        <member name="T:SharpBag.Database.GenericDatabase`1">
            <summary>
            A class for working with databases.
            </summary>
            <typeparam name="TConn">The type of the connection.</typeparam>
        </member>
        <member name="M:SharpBag.Database.GenericDatabase`1.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            The constructor.
            </summary>
            <param name="server">The server to connect to.</param>
            <param name="schema">The default schema.</param>
            <param name="username">The username used to connect.</param>
            <param name="password">The password used to connect.</param>
        </member>
        <member name="M:SharpBag.Database.GenericDatabase`1.Connect">
            <summary>
            Connects, or reconnects, to the database.
            </summary>
        </member>
        <member name="M:SharpBag.Database.GenericDatabase`1.Query(System.String)">
            <summary>
            Send a query to the database.
            </summary>
            <param name="q">The query string.</param>
            <returns>A DataTable object with the results from the query.</returns>
        </member>
        <member name="M:SharpBag.Database.GenericDatabase`1.QuerySingle(System.String)">
            <summary>
            Send a query to the database and returns a scalar value.
            </summary>
            <param name="q">The query string.</param>
            <returns>The scalar value.</returns>
        </member>
        <member name="M:SharpBag.Database.GenericDatabase`1.QuerySingle``1(System.String)">
            <summary>
            Send a query to the database and returns a scalar value, as the type of T.
            </summary>
            <typeparam name="T">The type of the first column.</typeparam>
            <param name="q">The query string.</param>
            <returns>The scalar value, as the type of T.</returns>
        </member>
        <member name="M:SharpBag.Database.GenericDatabase`1.Execute(System.String)">
            <summary>
            Executes a query on the database and returns how many rows were affected.
            </summary>
            <param name="q">The query to execute.</param>
            <returns>How many rows were affected.</returns>
        </member>
        <member name="M:SharpBag.Database.GenericDatabase`1.Close">
            <summary>
            Closes the connection.
            </summary>
        </member>
        <member name="M:SharpBag.Database.GenericDatabase`1.DateTimeToSQL(System.DateTime)">
            <summary>
            Converts a DateTime object into an SQL compatible string.
            </summary>
            <param name="dt">The DateTime object.</param>
            <returns>An SQL formatted string.</returns>
        </member>
        <member name="M:SharpBag.Database.GenericDatabase`1.DataTableToSQL(System.Data.DataTable,System.String)">
            <summary>
            Generates a SQL insert query for the specified DataTable.
            </summary>
            <param name="dt">The DataTable.</param>
            <param name="schema">The schema to insert into.</param>
            <returns>An SQL string.</returns>
        </member>
        <member name="M:SharpBag.Database.GenericDatabase`1.CreateConnectionString">
            <summary>
            Creates connection string.
            </summary>
            <returns>The connection string.</returns>
        </member>
        <member name="M:SharpBag.Database.GenericDatabase`1.CreateCommand(System.String,`0)">
            <summary>
            Creates a query command.
            </summary>
            <param name="q">The query.</param>
            <param name="c">The connection.</param>
            <returns>The query command.</returns>
        </member>
        <member name="M:SharpBag.Database.GenericDatabase`1.SQLEscape(System.String)">
            <summary>
            Escapes a string for use in an SQL query.
            </summary>
            <param name="s">The string to escape.</param>
            <returns>The escaped string.</returns>
        </member>
        <member name="P:SharpBag.Database.GenericDatabase`1.Server">
            <summary>
            The server to connect to.
            </summary>
        </member>
        <member name="P:SharpBag.Database.GenericDatabase`1.Schema">
            <summary>
            The default schema.
            </summary>
        </member>
        <member name="P:SharpBag.Database.GenericDatabase`1.Username">
            <summary>
            The username used to connect.
            </summary>
        </member>
        <member name="P:SharpBag.Database.GenericDatabase`1.Password">
            <summary>
            The password used to connect.
            </summary>
        </member>
        <member name="P:SharpBag.Database.GenericDatabase`1.CommandTimeout">
            <summary>
            The time before the connection times out.
            </summary>
        </member>
        <member name="P:SharpBag.Database.GenericDatabase`1.State">
            <summary>
            The state of the connection.
            </summary>
        </member>
        <member name="P:SharpBag.Database.GenericDatabase`1.Connection">
            <summary>
            The connection.
            </summary>
        </member>
        <member name="M:SharpBag.Database.MySqlDatabase.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            The constructor.
            </summary>
            <param name="server">The server to connect to.</param>
            <param name="schema">The default schema.</param>
            <param name="username">The username used to connect.</param>
            <param name="password">The password used to connect.</param>
        </member>
        <member name="M:SharpBag.Database.MySqlDatabase.SQLEscape(System.String)">
            <summary>
            Escapes a string for use in an SQL query.
            </summary>
            <param name="s">The string to escape.</param>
            <returns>The escaped string.</returns>
        </member>
        <member name="M:SharpBag.Database.MySqlDatabase.Close">
            <summary>
            Kills the current thread and then closes the connection.
            </summary>
        </member>
        <member name="M:SharpBag.Database.MySqlDatabase.CreateCommand(System.String,MySql.Data.MySqlClient.MySqlConnection)">
            <summary>
            Creates a query command.
            </summary>
            <param name="q">The query.</param>
            <param name="c">The connection.</param>
            <returns>The query command.</returns>
        </member>
        <member name="M:SharpBag.Database.MySqlDatabase.CreateConnectionString">
            <summary>
            Creates connection string.
            </summary>
            <returns>The connection string.</returns>
        </member>
        <member name="T:SharpBag.Collections.PriorityQueue`2">
            <summary>
            A priority queue.
            </summary>
            <typeparam name="T">The type of values in the queue.</typeparam>
            <typeparam name="C">The type of keys in the queue.</typeparam>
        </member>
        <member name="F:SharpBag.Collections.PriorityQueue`2.InternalHeap">
            <summary>
            The internal heap.
            </summary>
        </member>
        <member name="M:SharpBag.Collections.PriorityQueue`2.#ctor">
            <summary>
            The constructor.
            </summary>
        </member>
        <member name="M:SharpBag.Collections.PriorityQueue`2.#ctor(System.Int32)">
            <summary>
            The constructor.
            </summary>
            <param name="capacity">The initial capacity.</param>
        </member>
        <member name="M:SharpBag.Collections.PriorityQueue`2.Enqueue(`0,`1)">
            <summary>
            Enqueue the specified item with the specified priority.
            </summary>
            <param name="item">The item.</param>
            <param name="priority">The priority.</param>
        </member>
        <member name="M:SharpBag.Collections.PriorityQueue`2.Dequeue(System.Boolean)">
            <summary>
            Dequeue the next item from the queue.
            </summary>
            <param name="remove">Whether to remove the item.</param>
            <returns>The next item from the queue.</returns>
        </member>
        <member name="M:SharpBag.Collections.PriorityQueue`2.Clear">
            <summary>
            Clear the items from the queue.
            </summary>
        </member>
        <member name="M:SharpBag.Collections.PriorityQueue`2.GetEnumerator">
            <summary>
            Get an enumerator.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:SharpBag.Collections.PriorityQueue`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get an enumerator.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="P:SharpBag.Collections.PriorityQueue`2.Count">
            <summary>
            The number of items in the queue.
            </summary>
        </member>
        <member name="P:SharpBag.Collections.PriorityQueue`2.Capacity">
            <summary>
            The maximum number of items in the queue.
            </summary>
        </member>
        <member name="T:SharpBag.Collections.PriorityQueue`2.Node">
            <summary>
            A priority queue node.
            </summary>
        </member>
        <member name="F:SharpBag.Collections.PriorityQueue`2.Node.Key">
            <summary>
            The key.
            </summary>
        </member>
        <member name="F:SharpBag.Collections.PriorityQueue`2.Node.Value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="F:SharpBag.Collections.PriorityQueue`2.Node.Number">
            <summary>
            The number.
            </summary>
        </member>
        <member name="M:SharpBag.Collections.PriorityQueue`2.Node.#ctor(`1,`0,System.UInt32)">
            <summary>
            The constructor.
            </summary>
            <param name="key">The key of the node.</param>
            <param name="value">The value of the node.</param>
            <param name="number">The number of the node.</param>
        </member>
        <member name="M:SharpBag.Collections.PriorityQueue`2.Node.CompareTo(SharpBag.Collections.PriorityQueue{`0,`1}.Node)">
            <summary>
            The comparer.
            </summary>
            <param name="other">The node to compare to.</param>
            <returns>The order.</returns>
        </member>
        <member name="T:SharpBag.Math.Constants">
            <summary>
            Mathematical constants.
            </summary>
        </member>
        <member name="P:SharpBag.Math.Constants.GoldenRatio">
            <summary>
            The golden ratio.
            </summary>
            <remarks>(1 + Sqrt(5)) / 2</remarks>
        </member>
        <member name="T:SharpBag.Comparers.AlphaNumberSettings">
            <summary>
            Settings for the AlphaNumberComparer.
            </summary>
        </member>
        <member name="F:SharpBag.Comparers.AlphaNumberSettings.Leading">
            <summary>
            Leading numbers.
            </summary>
        </member>
        <member name="F:SharpBag.Comparers.AlphaNumberSettings.Trailing">
            <summary>
            Trailing numbers.
            </summary>
        </member>
        <member name="T:SharpBag.Combinatorics.Permutations`1">
             <summary>
             Permutations defines a meta-collection, typically a list of lists, of all
             possible orderings of a set of values.  This list is enumerable and allows
             the scanning of all possible permutations using a simple foreach() loop.
             The MetaCollectionType parameter of the constructor allows for the creation of
             two types of sets,  those with and without repetition in the output set when
             presented with repetition in the input set.
             </summary>
             <remarks>
             When given a input collect {A A B}, the following sets are generated:
             MetaCollectionType.WithRepetition =>
             {A A B}, {A B A}, {A A B}, {A B A}, {B A A}, {B A A}
             MetaCollectionType.WithoutRepetition =>
             {A A B}, {A B A}, {B A A}
            
             When generating non-repetition sets, ordering is based on the lexicographic
             ordering of the lists based on the provided Comparer.
             If no comparer is provided, then T must be IComparable on T.
            
             When generating repetition sets, no comparisions are performed and therefore
             no comparer is required and T does not need to be IComparable.
             </remarks>
             <typeparam name="T">The type of the values within the list.</typeparam>
        </member>
        <member name="M:SharpBag.Combinatorics.Permutations`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Create a permutation set from the provided list of values.
            The values (T) must implement IComparable.
            If T does not implement IComparable use a constructor with an explict IComparer.
            The repetition type defaults to MetaCollectionType.WithholdRepetitionSets
            </summary>
            <param name="values">List of values to permute.</param>
        </member>
        <member name="M:SharpBag.Combinatorics.Permutations`1.#ctor(System.Collections.Generic.IList{`0},SharpBag.Combinatorics.GenerateOption)">
            <summary>
            Create a permutation set from the provided list of values.
            If type is MetaCollectionType.WithholdRepetitionSets, then values (T) must implement IComparable.
            If T does not implement IComparable use a constructor with an explict IComparer.
            </summary>
            <param name="values">List of values to permute.</param>
            <param name="type">The type of permutation set to calculate.</param>
        </member>
        <member name="M:SharpBag.Combinatorics.Permutations`1.#ctor(System.Collections.Generic.IList{`0},System.Collections.Generic.IComparer{`0})">
            <summary>
            Create a permutation set from the provided list of values.
            The values will be compared using the supplied IComparer.
            The repetition type defaults to MetaCollectionType.WithholdRepetitionSets
            </summary>
            <param name="values">List of values to permute.</param>
            <param name="comparer">Comparer used for defining the lexigraphic order.</param>
        </member>
        <member name="M:SharpBag.Combinatorics.Permutations`1.GetEnumerator">
            <summary>
            Gets an enumerator for collecting the list of permutations.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:SharpBag.Combinatorics.Permutations`1.System#Collections#Generic#IEnumerable{System#Collections#Generic#IList{T}}#GetEnumerator">
            <summary>
            Gets an enumerator for collecting the list of permutations.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:SharpBag.Combinatorics.Permutations`1.Initialize(System.Collections.Generic.IList{`0},SharpBag.Combinatorics.GenerateOption,System.Collections.Generic.IComparer{`0})">
             <summary>
             Common intializer used by the multiple flavors of constructors.
             </summary>
             <remarks>
             Copies information provided and then creates a parellel int array of lexicographic
             orders that will be used for the actual permutation algorithm.
             The input array is first sorted as required for WithoutRepetition and always just for consistency.
             This array is constructed one of two way depending on the type of the collection.
            
             When type is MetaCollectionType.WithRepetition, then all N! permutations are returned
             and the lexicographic orders are simply generated as 1, 2, ... N.
             E.g.
             Input array:          {A A B C D E E}
             Lexicograhpic Orders: {1 2 3 4 5 6 7}
            
             When type is MetaCollectionType.WithoutRepetition, then fewer are generated, with each
             identical element in the input array not repeated.  The lexicographic sort algorithm
             handles this natively as long as the repetition is repeated.
             E.g.
             Input array:          {A A B C D E E}
             Lexicograhpic Orders: {1 1 2 3 4 5 5}
             </remarks>
        </member>
        <member name="M:SharpBag.Combinatorics.Permutations`1.GetCount">
            <summary>
            Calculates the total number of permutations that will be returned.
            As this can grow very large, extra effort is taken to avoid overflowing the accumulator.
            While the algorithm looks complex, it really is just collecting numerator and denominator terms
            and cancelling out all of the denominator terms before taking the product of the numerator terms.
            </summary>
            <returns>The number of permutations.</returns>
        </member>
        <member name="F:SharpBag.Combinatorics.Permutations`1.myValues">
            <summary>
            A list of T that represents the order of elements as originally provided, used for Reset.
            </summary>
        </member>
        <member name="F:SharpBag.Combinatorics.Permutations`1.myLexicographicOrders">
            <summary>
            Parrellel array of integers that represent the location of items in the myValues array.
            This is generated at Initialization and is used as a performance speed up rather that
            comparing T each time, much faster to let the CLR optimize around integers.
            </summary>
        </member>
        <member name="F:SharpBag.Combinatorics.Permutations`1.myCount">
            <summary>
            The count of all permutations.  Calculated at Initialization and returned by Count property.
            </summary>
        </member>
        <member name="F:SharpBag.Combinatorics.Permutations`1.myMetaCollectionType">
            <summary>
            The type of Permutations that this was intialized from.
            </summary>
        </member>
        <member name="P:SharpBag.Combinatorics.Permutations`1.Count">
            <summary>
            The count of all permutations that will be returned.
            If type is MetaCollectionType.WithholdGeneratedSets, then this does not double count permutations with multiple identical values.
            I.e. count of permutations of "AAB" will be 3 instead of 6.
            If type is MetaCollectionType.WithRepetition, then this is all combinations and is therefore N!, where N is the number of values.
            </summary>
        </member>
        <member name="P:SharpBag.Combinatorics.Permutations`1.Type">
            <summary>
            The type of Permutations set that is generated.
            </summary>
        </member>
        <member name="P:SharpBag.Combinatorics.Permutations`1.UpperIndex">
            <summary>
            The upper index of the meta-collection, equal to the number of items in the initial set.
            </summary>
        </member>
        <member name="P:SharpBag.Combinatorics.Permutations`1.LowerIndex">
            <summary>
            The lower index of the meta-collection, equal to the number of items returned each iteration.
            For Permutation, this is always equal to the UpperIndex.
            </summary>
        </member>
        <member name="T:SharpBag.Combinatorics.Permutations`1.Enumerator">
            <summary>
            The enumerator that enumerates each meta-collection of the enclosing Permutations class.
            </summary>
        </member>
        <member name="M:SharpBag.Combinatorics.Permutations`1.Enumerator.#ctor(SharpBag.Combinatorics.Permutations{`0})">
            <summary>
            Construct a enumerator with the parent object.
            </summary>
            <param name="source">The source Permutations object.</param>
        </member>
        <member name="M:SharpBag.Combinatorics.Permutations`1.Enumerator.Reset">
            <summary>
            Resets the permutations enumerator to the first permutation.
            This will be the first lexicographically order permutation.
            </summary>
        </member>
        <member name="M:SharpBag.Combinatorics.Permutations`1.Enumerator.MoveNext">
            <summary>
            Advances to the next permutation.
            </summary>
            <returns>True if successfully moved to next permutation, False if no more permutations exist.</returns>
            <remarks>
            Continuation was tried (i.e. yield return) by was not nearly as efficient.
            Performance is further increased by using value types and removing generics, that is, the LexicographicOrder parellel array.
            This is a issue with the .NET CLR not optimizing as well as it could in this infrequently used scenario.
            </remarks>
        </member>
        <member name="M:SharpBag.Combinatorics.Permutations`1.Enumerator.Dispose">
            <summary>
            Cleans up non-managed resources, of which there are none used here.
            </summary>
        </member>
        <member name="M:SharpBag.Combinatorics.Permutations`1.Enumerator.NextPermutation">
            <summary>
            Calculates the next lexicographical permutation of the set.
            This is a permutation with repetition where values that compare as equal will not
            swap positions to create a new permutation.
            http://www.cut-the-knot.org/do_you_know/AllPerm.shtml
            E. W. Dijkstra, A Discipline of Programming, Prentice-Hall, 1997
            </summary>
            <returns>True if a new permutation has been returned, false if not.</returns>
            <remarks>
            This uses the integers of the lexicographical order of the values so that any
            comparison of values are only performed during initialization.
            </remarks>
        </member>
        <member name="M:SharpBag.Combinatorics.Permutations`1.Enumerator.Swap(System.Int32,System.Int32)">
            <summary>
            Helper function for swapping two elements within the internal collection.
            This swaps both the lexicographical order and the values, maintaining the parallel array.
            </summary>
        </member>
        <member name="F:SharpBag.Combinatorics.Permutations`1.Enumerator.myTemp">
            <summary>
            Single instance of swap variable for T, small performance improvement over declaring in Swap function scope.
            </summary>
        </member>
        <member name="F:SharpBag.Combinatorics.Permutations`1.Enumerator.myKviTemp">
            <summary>
            Single instance of swap variable for int, small performance improvement over declaring in Swap function scope.
            </summary>
        </member>
        <member name="F:SharpBag.Combinatorics.Permutations`1.Enumerator.myPosition">
            <summary>
            Flag indicating the position of the enumerator.
            </summary>
        </member>
        <member name="F:SharpBag.Combinatorics.Permutations`1.Enumerator.myLexicographicalOrders">
            <summary>
            Parrellel array of integers that represent the location of items in the myValues array.
            This is generated at Initialization and is used as a performance speed up rather that
            comparing T each time, much faster to let the CLR optimize around integers.
            </summary>
        </member>
        <member name="F:SharpBag.Combinatorics.Permutations`1.Enumerator.myValues">
            <summary>
            The list of values that are current to the enumerator.
            </summary>
        </member>
        <member name="F:SharpBag.Combinatorics.Permutations`1.Enumerator.myParent">
            <summary>
            The set of permuations that this enumerator enumerates.
            </summary>
        </member>
        <member name="P:SharpBag.Combinatorics.Permutations`1.Enumerator.Current">
            <summary>
            The current permutation.
            </summary>
        </member>
        <member name="P:SharpBag.Combinatorics.Permutations`1.Enumerator.System#Collections#Generic#IEnumerator{System#Collections#Generic#IList{T}}#Current">
            <summary>
            The current permutation.
            </summary>
        </member>
        <member name="T:SharpBag.Combinatorics.Permutations`1.Enumerator.Position">
            <summary>
            Internal position type for tracking enumertor position.
            </summary>
        </member>
        <member name="T:SharpBag.Combinatorics.Permutations`1.SelfComparer`1">
            <summary>
            Inner class that wraps an IComparer around a type T when it is IComparable
            </summary>
        </member>
        <member name="T:SharpBag.Networking.TcpServer">
            <summary>
            A class that manages a multithreaded Tcp server.
            </summary>
        </member>
        <member name="M:SharpBag.Networking.TcpServer.Create(System.Collections.Generic.IEnumerable{System.Int32},System.Int32)">
            <summary>
            Creates a TcpServer.
            </summary>
            <param name="ports">A collection of ports. The first free port in the collection will be used.</param>
            <param name="checkInterval">The interval to check for new connections.</param>
            <returns>A new TcpServer instance.</returns>
        </member>
        <member name="M:SharpBag.Networking.TcpServer.#ctor(System.Net.Sockets.TcpListener,System.Int32,System.Int32,System.Boolean)">
            <summary>
            The constructor.
            </summary>
            <param name="listener">The TcpListener.</param>
            <param name="checkInterval">The interval to check for incoming clients.</param>
            <param name="receiveTimeout">The time, in milliseconds, before a timeout occurs when reading data from a client.</param>
            <param name="start">Whether to start the server.</param>
        </member>
        <member name="M:SharpBag.Networking.TcpServer.Start">
            <summary>
            Opens the TcpListener, starts the listening thread and starts listening for incoming clients.
            </summary>
        </member>
        <member name="M:SharpBag.Networking.TcpServer.Stop">
            <summary>
            Stops listening for incoming clients, stops the listening thread and closes the TcpListener.
            </summary>
        </member>
        <member name="M:SharpBag.Networking.TcpServer.Listen">
            <summary>
            Listen for incoming clients.
            </summary>
        </member>
        <member name="M:SharpBag.Networking.TcpServer.Dispose">
            <see cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="P:SharpBag.Networking.TcpServer.Thread">
            <summary>
            The thread to listen for incoming clients.
            </summary>
        </member>
        <member name="P:SharpBag.Networking.TcpServer.Listener">
            <summary>
            The TcpListener.
            </summary>
        </member>
        <member name="P:SharpBag.Networking.TcpServer.Listening">
            <summary>
            Whether the server is listening for incoming clients.
            </summary>
        </member>
        <member name="P:SharpBag.Networking.TcpServer.CheckInterval">
            <summary>
            The interval, in milliseconds, to check for incoming clients.
            </summary>
        </member>
        <member name="E:SharpBag.Networking.TcpServer.ClientReceived">
            <summary>
            An event that is fired when a client is received.
            </summary>
        </member>
        <member name="T:SharpBag.Games.Card">
            <summary>
            A class representing a Card in a Card Game.
            </summary>
        </member>
        <member name="M:SharpBag.Games.Card.#ctor(SharpBag.Games.CardType,SharpBag.Games.CardValue,System.Boolean)">
            <summary>
            The main constructor.
            </summary>
            <param name="type">The type of the card.</param>
            <param name="value">The value of the card.</param>
            <param name="isDown">Whether the card is face down or face up.</param>
        </member>
        <member name="M:SharpBag.Games.Card.GetValue">
            <summary>
            Gets the value of the card.
            </summary>
            <returns>The value of the card.</returns>
        </member>
        <member name="M:SharpBag.Games.Card.GetValue(System.Collections.Generic.Dictionary{SharpBag.Games.CardValue,System.Int32})">
            <summary>
            Gets the value of the card, using the specified rules.
            </summary>
            <param name="values">The values.</param>
            <returns>The value of the card.</returns>
        </member>
        <member name="P:SharpBag.Games.Card.Type">
            <summary>
            The type of the card.
            </summary>
        </member>
        <member name="P:SharpBag.Games.Card.Value">
            <summary>
            The value of the card.
            </summary>
        </member>
        <member name="P:SharpBag.Games.Card.IsDown">
            <summary>
            Whether the card is face down or face up.
            </summary>
        </member>
        <member name="E:SharpBag.Games.Card.CardTurned">
            <summary>
            An event that is fired when a card is turned.
            </summary>
        </member>
        <member name="T:SharpBag.EnumerableEntry">
            <summary>
            A wrapper class for IEnumerable entries.
            </summary>
        </member>
        <member name="T:SharpBag.EnumerableEntry.WithInfo`1">
            <summary>
            An IEnumerable entry with extended info.
            </summary>
            <typeparam name="T">The type.</typeparam>
        </member>
        <member name="T:SharpBag.EnumerableEntry.WithIndex`1">
            <summary>
            An IEnumerable entry with index.
            </summary>
            <typeparam name="T">The type.</typeparam>
        </member>
        <member name="P:SharpBag.EnumerableEntry.WithIndex`1.Value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="P:SharpBag.EnumerableEntry.WithIndex`1.Index">
            <summary>
            The index.
            </summary>
        </member>
        <member name="P:SharpBag.EnumerableEntry.WithInfo`1.Previous">
            <summary>
            The previous entry.
            </summary>
        </member>
        <member name="P:SharpBag.EnumerableEntry.WithInfo`1.Next">
            <summary>
            The next entry.
            </summary>
        </member>
        <member name="P:SharpBag.EnumerableEntry.WithInfo`1.IsFirst">
            <summary>
            Whether the current entry is the first entry.
            </summary>
        </member>
        <member name="P:SharpBag.EnumerableEntry.WithInfo`1.IsLast">
            <summary>
            Whether the current entry is the last entry.
            </summary>
        </member>
        <member name="T:SharpBag.Utils">
            <summary>
            A static class with utility methods.
            </summary>
        </member>
        <member name="M:SharpBag.Utils.ExecutionTime(System.Action,System.Boolean)">
            <summary>
            Calculates the execution time of the specified action.
            </summary>
            <param name="a">The action.</param>
            <param name="handleGc">Whether to handle the garbage collector. If true, the GC will be forced to clean up before taking the time.</param>
            <returns>The execution time in milliseconds.</returns>
        </member>
        <member name="M:SharpBag.Utils.CreateIEnumerable``1(``0[])">
            <summary>
            Creates an IEnumerable from the specified objects.
            </summary>
            <typeparam name="T">The type of the IEnumerable to create.</typeparam>
            <param name="objects">The objects.</param>
            <returns>The IEnumerable.</returns>
        </member>
        <member name="M:SharpBag.Utils.Single``1(``0)">
            <summary>
            Converts a single value to an enumerable.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="value">The value.</param>
            <returns>The value as an enumerable.</returns>
            <remarks>Igor Ostrovsky - http://igoro.com/archive/extended-linq-additional-operators-for-linq-to-objects/</remarks>
        </member>
        <member name="M:SharpBag.Utils.Swap``1(``0@,``0@)">
            <summary>
            Swap the specified variables.
            </summary>
            <typeparam name="T">The type of the variables.</typeparam>
            <param name="a">The first variable.</param>
            <param name="b">The second variable.</param>
        </member>
        <member name="T:SharpBag.Networking.ConnectionPacket">
            <summary>
            A packet.
            </summary>
        </member>
        <member name="P:SharpBag.Networking.ConnectionPacket.EventID">
            <summary>
            The ID of an event.
            </summary>
        </member>
        <member name="P:SharpBag.Networking.ConnectionPacket.Data">
            <summary>
            The data.
            </summary>
        </member>
        <member name="T:SharpBag.Math.Sequences">
            <summary>
            A class for sequences.
            </summary>
        </member>
        <member name="M:SharpBag.Math.Sequences.FigurateNumbers(System.Int32)">
            <summary>
            Numbers which are n-figurate.
            </summary>
            <param name="n">The n in n-figurate.</param>
            <returns>The numbers.</returns>
        </member>
        <member name="M:SharpBag.Math.Sequences.FigurateNumbers(System.Int64)">
            <summary>
            Numbers which are n-figurate.
            </summary>
            <param name="n">The n in n-figurate.</param>
            <returns>The numbers.</returns>
        </member>
        <member name="M:SharpBag.Math.Sequences.FigurateNumbers(System.Numerics.BigInteger)">
            <summary>
            Numbers which are n-figurate.
            </summary>
            <param name="n">The n in n-figurate.</param>
            <returns>The numbers.</returns>
        </member>
        <member name="P:SharpBag.Math.Sequences.Fibonacci">
            <summary>
            An endless source of fibonacci numbers.
            </summary>
        </member>
        <member name="P:SharpBag.Math.Sequences.Fibonacci64">
            <summary>
            An endless source of fibonacci numbers.
            </summary>
        </member>
        <member name="P:SharpBag.Math.Sequences.FibonacciBig">
            <summary>
            An endless source of fibonacci numbers.
            </summary>
        </member>
        <member name="P:SharpBag.Math.Sequences.Factorial">
            <summary>
            An endless source of factorial numbers.
            </summary>
        </member>
        <member name="P:SharpBag.Math.Sequences.Factorial64">
            <summary>
            An endless source of factorial numbers.
            </summary>
        </member>
        <member name="P:SharpBag.Math.Sequences.FactorialBig">
            <summary>
            An endless source of factorial numbers.
            </summary>
        </member>
        <member name="P:SharpBag.Math.Sequences.Primes">
            <summary>
            An endless source of prime numbers.
            </summary>
        </member>
        <member name="P:SharpBag.Math.Sequences.Primes64">
            <summary>
            An endless source of prime numbers.
            </summary>
        </member>
        <member name="P:SharpBag.Math.Sequences.PrimesBig">
            <summary>
            An endless source of prime numbers.
            </summary>
        </member>
        <member name="P:SharpBag.Math.Sequences.PerfectNumbers">
            <summary>
            An endless source of perfect numbers.
            </summary>
        </member>
        <member name="P:SharpBag.Math.Sequences.PerfectNumbers64">
            <summary>
            An endless source of perfect numbers.
            </summary>
        </member>
        <member name="P:SharpBag.Math.Sequences.PerfectNumbersBig">
            <summary>
            An endless source of perfect numbers.
            </summary>
        </member>
        <member name="P:SharpBag.Math.Sequences.DeficientNumbers">
            <summary>
            An endless source of deficient numbers.
            </summary>
        </member>
        <member name="P:SharpBag.Math.Sequences.DeficientNumbers64">
            <summary>
            An endless source of deficient numbers.
            </summary>
        </member>
        <member name="P:SharpBag.Math.Sequences.DeficientNumbersBig">
            <summary>
            An endless source of deficient numbers.
            </summary>
        </member>
        <member name="P:SharpBag.Math.Sequences.AbundantNumbers">
            <summary>
            An endless source of abundant number.
            </summary>
        </member>
        <member name="P:SharpBag.Math.Sequences.AbundantNumbers64">
            <summary>
            An endless source of abundant number.
            </summary>
        </member>
        <member name="P:SharpBag.Math.Sequences.AbundantNumbersBig">
            <summary>
            An endless source of abundant number.
            </summary>
        </member>
        <member name="P:SharpBag.Math.Sequences.PythagoreanTriplets">
            <summary>
            An endless source of Pythagorean Triplets.
            </summary>
        </member>
        <member name="P:SharpBag.Math.Sequences.PythagoreanTriplets64">
            <summary>
            An endless source of Pythagorean Triplets.
            </summary>
        </member>
        <member name="P:SharpBag.Math.Sequences.PythagoreanTripletsBig">
            <summary>
            An endless source of Pythagorean Triplets.
            </summary>
        </member>
        <member name="T:SharpBag.Time.TimeExtensions">
            <summary>
            A static class with extension methods for date and time.
            </summary>
        </member>
        <member name="M:SharpBag.Time.TimeExtensions.At(System.DateTime,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the current instance to the specified hour, minute, second and millisecond.
            </summary>
            <param name="datetime">The current instance.</param>
            <param name="hour">The specified hour.</param>
            <param name="minute">The specified minute.</param>
            <param name="second">The specified second.</param>
            <param name="millisecond">The specified millisecond.</param>
            <returns>The new DateTime.</returns>
        </member>
        <member name="M:SharpBag.Time.TimeExtensions.To(System.DateTime,System.DateTime)">
            <summary>
            Returns a collection of DateTimes with a one date interval.
            </summary>
            <param name="from">The current instance, or the DateTime to start at.</param>
            <param name="to">The DateTime to end at.</param>
            <returns>A collection of DateTimes with a one date interval.</returns>
        </member>
        <member name="M:SharpBag.Time.TimeExtensions.To(System.DateTime,System.DateTime,System.TimeSpan)">
            <summary>
            Returns a collection of DateTimes with the specified interval.
            </summary>
            <param name="from">The current instance, or the DateTime to start at.</param>
            <param name="to">The DateTime to end at.</param>
            <param name="step">The step to take on each iteration.</param>
            <returns>A collection of DateTimes with a one date interval.</returns>
        </member>
        <member name="M:SharpBag.Time.TimeExtensions.To(System.DateTime,System.DateTime,System.Func{System.DateTime,System.DateTime})">
            <summary>
            Returns a collection of DateTimes with a the specified interval.
            </summary>
            <param name="from">The current instance, or the DateTime to start at.</param>
            <param name="to">The DateTime to end at.</param>
            <param name="step">The step to take on each iteration.</param>
            <returns>A collection of DateTimes with a one date interval.</returns>
        </member>
        <member name="M:SharpBag.Time.TimeExtensions.WeekOfYear(System.DateTime)">
            <summary>
            Returns what week of the year, the current instance is on.
            </summary>
            <param name="datetime">The current instance.</param>
            <returns>What week of the year, the current instance is on.</returns>
        </member>
        <member name="T:SharpBag.Math.PascalsTriangle">
            <summary>
            A static class with methods concerning Pascals triangle.
            </summary>
        </member>
        <member name="M:SharpBag.Math.PascalsTriangle.GetEntry(System.Int32,System.Int32)">
            <summary>
            Gets an entry at the specified row and column.
            </summary>
            <param name="row">The specified row.</param>
            <param name="column">The specified column.</param>
            <returns>The value at the specified row and column.</returns>
        </member>
        <member name="M:SharpBag.Math.PascalsTriangle.GetEntry(System.Int64,System.Int64)">
            <summary>
            Gets an entry at the specified row and column.
            </summary>
            <param name="row">The specified row.</param>
            <param name="column">The specified column.</param>
            <returns>The value at the specified row and column.</returns>
        </member>
        <member name="M:SharpBag.Math.PascalsTriangle.Rows">
            <summary>
            Calculates the rows of Pascal's triangle.
            </summary>
            <returns>The rows.</returns>
        </member>
        <member name="M:SharpBag.Math.PascalsTriangle.Rows64">
            <summary>
            Calculates the rows of Pascal's triangle.
            </summary>
            <returns>The rows.</returns>
        </member>
        <member name="M:SharpBag.Math.PascalsTriangle.RowsBig">
            <summary>
            Calculates the rows of Pascal's triangle.
            </summary>
            <returns>The rows.</returns>
        </member>
        <member name="T:SharpBag.Math.ForInt32.Point">
            <summary>
            A point.
            </summary>
        </member>
        <member name="M:SharpBag.Math.ForInt32.Point.#ctor(System.Int32,System.Int32)">
            <summary>
            The constructor.
            </summary>
            <param name="x">The X coordinate.</param>
            <param name="y">The Y coordinate.</param>
        </member>
        <member name="P:SharpBag.Math.ForInt32.Point.X">
            <summary>
            The X coordinate.
            </summary>
        </member>
        <member name="P:SharpBag.Math.ForInt32.Point.Y">
            <summary>
            The Y coordinate.
            </summary>
        </member>
        <member name="T:SharpBag.Math.ForLong.Polynomial">
            <summary>
            A polynomial.
            </summary>
        </member>
        <member name="M:SharpBag.Math.ForLong.Polynomial.#ctor">
            <summary>
            The constructor.
            </summary>
        </member>
        <member name="M:SharpBag.Math.ForLong.Polynomial.#ctor(System.Int64[])">
            <summary>
            The constructor.
            </summary>
            <param name="coefficients">The coefficients.</param>
        </member>
        <member name="M:SharpBag.Math.ForLong.Polynomial.Evaluate(System.Int64)">
            <summary>
            Evalute the polynomial at the specified x.
            </summary>
            <param name="x">The specified x.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:SharpBag.Math.ForLong.Polynomial.op_Addition(SharpBag.Math.ForLong.Polynomial,SharpBag.Math.ForLong.Polynomial)">
            <summary>
            Add the specified polynomials.
            </summary>
            <param name="left">The left polynomial.</param>
            <param name="right">The right polynomial.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:SharpBag.Math.ForLong.Polynomial.op_Subtraction(SharpBag.Math.ForLong.Polynomial,SharpBag.Math.ForLong.Polynomial)">
            <summary>
            Subtract the specified polynomials.
            </summary>
            <param name="left">The left polynomial.</param>
            <param name="right">The right polynomial.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:SharpBag.Math.ForLong.Polynomial.op_Multiply(SharpBag.Math.ForLong.Polynomial,SharpBag.Math.ForLong.Polynomial)">
            <summary>
            Multiply the specified polynomials.
            </summary>
            <param name="left">The left polynomial.</param>
            <param name="right">The right polynomial.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:SharpBag.Math.ForLong.Polynomial.op_Implicit(System.Int64)~SharpBag.Math.ForLong.Polynomial">
            <summary>
            An implicit cast to a polynomial.
            </summary>
            <param name="n">The value to cast.</param>
            <returns>The polynomial.</returns>
        </member>
        <member name="M:SharpBag.Math.ForLong.Polynomial.Differentiate">
            <summary>
            Differentiates the polynomial.
            </summary>
            <returns>The differentiated polynomial.</returns>
        </member>
        <member name="M:SharpBag.Math.ForLong.Polynomial.ToString">
            <summary>
            Object.ToString()
            </summary>
            <returns>The polynomial as a string.</returns>
        </member>
        <member name="P:SharpBag.Math.ForLong.Polynomial.Degree">
            <summary>
            The degree of the polynomial.
            </summary>
        </member>
        <member name="P:SharpBag.Math.ForLong.Polynomial.Item(System.Int32)">
            <summary>
            The i-th coefficient.
            </summary>
            <param name="i">The i.</param>
            <returns>The i-th coefficient.</returns>
        </member>
        <member name="T:SharpBag.Combinatorics.SmallPrimeUtility">
            <summary>
            Utility class that maintains a small table of prime numbers and provides
            simple implementations of Prime Factorization algorithms.
            This is a quick and dirty utility class to support calculations of permutation
            sets with indexes under 2^31.
            The prime table contains all primes up to Sqrt(2^31) which are all of the primes
            requires to factorize any Int32 positive integer.
            </summary>
        </member>
        <member name="M:SharpBag.Combinatorics.SmallPrimeUtility.Factor(System.Int32)">
            <summary>
            Performs a prime factorization of a given integer using the table of primes in PrimeTable.
            Since this will only factor Int32 sized integers, a simple list of factors is returned instead
            of the more scalable, but more difficult to consume, list of primes and associated exponents.
            </summary>
            <param name="i">The number to factorize, must be positive.</param>
            <returns>A simple list of factors.</returns>
        </member>
        <member name="M:SharpBag.Combinatorics.SmallPrimeUtility.MultiplyPrimeFactors(System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Given two integers expressed as a list of prime factors, multiplies these numbers
            together and returns an integer also expressed as a set of prime factors.
            This allows multiplication to overflow well beyond a Int64 if necessary.
            </summary>
            <param name="lhs">Left Hand Side argument, expressed as list of prime factors.</param>
            <param name="rhs">Right Hand Side argument, expressed as list of prime factors.</param>
            <returns>Product, expressed as list of prime factors.</returns>
        </member>
        <member name="M:SharpBag.Combinatorics.SmallPrimeUtility.DividePrimeFactors(System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Given two integers expressed as a list of prime factors, divides these numbers
            and returns an integer also expressed as a set of prime factors.
            If the result is not a integer, then the result is undefined.  That is, 11 / 5
            when divided by this function will not yield a correct result.
            As such, this function is ONLY useful for division with combinatorial results where
            the result is known to be an integer AND the division occurs as the last operation(s).
            </summary>
            <param name="numerator">Numerator argument, expressed as list of prime factors.</param>
            <param name="denominator">Denominator argument, expressed as list of prime factors.</param>
            <returns>Resultant, expressed as list of prime factors.</returns>
        </member>
        <member name="M:SharpBag.Combinatorics.SmallPrimeUtility.EvaluatePrimeFactors(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Given a list of prime factors returns the long representation.
            </summary>
            <param name="value">Integer, expressed as list of prime factors.</param>
            <returns>Standard long representation.</returns>
        </member>
        <member name="M:SharpBag.Combinatorics.SmallPrimeUtility.#cctor">
            <summary>
            Static initializer, set up prime table.
            </summary>
        </member>
        <member name="M:SharpBag.Combinatorics.SmallPrimeUtility.CalculatePrimes">
            <summary>
            Calculate all primes up to Sqrt(2^32) = 2^16.
            This table will be large enough for all factorizations for Int32's.
            Small tables are best built using the Sieve Of Eratosthenes,
            Reference: http://primes.utm.edu/glossary/page.php?sort=SieveOfEratosthenes
            </summary>
        </member>
        <member name="P:SharpBag.Combinatorics.SmallPrimeUtility.PrimeTable">
            <summary>
            A List of all primes from 2 to 2^16.
            </summary>
        </member>
        <member name="T:SharpBag.Combinatorics.GenerateOption">
            <summary>
            Indicates whether a Permutation, Combination or Variation meta-collections
            generate repetition sets.
            </summary>
        </member>
        <member name="F:SharpBag.Combinatorics.GenerateOption.WithoutRepetition">
            <summary>
            Do not generate additional sets, typical implementation.
            </summary>
        </member>
        <member name="F:SharpBag.Combinatorics.GenerateOption.WithRepetition">
            <summary>
            Generate additional sets even if repetition is required.
            </summary>
        </member>
        <member name="T:SharpBag.FunctionalExtensions">
            <summary>
            Functional methods.
            </summary>
        </member>
        <member name="M:SharpBag.FunctionalExtensions.Iter``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Performs an action on each element of the enumerable.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="source">The current instance.</param>
            <param name="action">The action to perform on each element.</param>
            <returns>The current instance.</returns>
            <remarks>Igor Ostrovsky - http://igoro.com/archive/extended-linq-additional-operators-for-linq-to-objects/</remarks>
        </member>
        <member name="M:SharpBag.FunctionalExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Performs an action on each element of the enumerable.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="source">The current instance.</param>
            <param name="action">The action to perform on each element.</param>
            <remarks>Igor Ostrovsky - http://igoro.com/archive/extended-linq-additional-operators-for-linq-to-objects/</remarks>
        </member>
        <member name="M:SharpBag.FunctionalExtensions.To(System.Int32,System.Int32,System.Int32)">
            <summary>
            Generates numbers that range from the value of the current instance to the value of end.
            </summary>
            <param name="start">The current instance.</param>
            <param name="end">The number to end at.</param>
            <param name="step">The step to take on each iteration.</param>
            <returns>An enumerable containing the numbers.</returns>
            <remarks>Yet Another Language Geek - http://blogs.msdn.com/b/wesdyer/archive/2007/02/23/linq-to-ascii-art.aspx</remarks>
        </member>
        <member name="M:SharpBag.FunctionalExtensions.To(System.Int32,System.Int32,System.Func{System.Int32,System.Int32})">
            <summary>
            Generates numbers that range from the value of the current instance to the value of end.
            </summary>
            <param name="start">The current instance.</param>
            <param name="end">The number to end at.</param>
            <param name="step">The step to take on each iteration.</param>
            <returns>An enumerable containing the numbers.</returns>
            <remarks>Yet Another Language Geek - http://blogs.msdn.com/b/wesdyer/archive/2007/02/23/linq-to-ascii-art.aspx</remarks>
        </member>
        <member name="M:SharpBag.FunctionalExtensions.To(System.Int64,System.Int64,System.Int64)">
            <summary>
            Generates numbers that range from the value of the current instance to the value of end.
            </summary>
            <param name="start">The current instance.</param>
            <param name="end">The number to end at.</param>
            <param name="step">The step to take on each iteration.</param>
            <returns>An enumerable containing the numbers.</returns>
            <remarks>Yet Another Language Geek - http://blogs.msdn.com/b/wesdyer/archive/2007/02/23/linq-to-ascii-art.aspx</remarks>
        </member>
        <member name="M:SharpBag.FunctionalExtensions.To(System.Int64,System.Int64,System.Func{System.Int64,System.Int64})">
            <summary>
            Generates numbers that range from the value of the current instance to the value of end.
            </summary>
            <param name="start">The current instance.</param>
            <param name="end">The number to end at.</param>
            <param name="step">The step to take on each iteration.</param>
            <returns>An enumerable containing the numbers.</returns>
            <remarks>Yet Another Language Geek - http://blogs.msdn.com/b/wesdyer/archive/2007/02/23/linq-to-ascii-art.aspx</remarks>
        </member>
        <member name="M:SharpBag.FunctionalExtensions.To(System.Numerics.BigInteger,System.Numerics.BigInteger)">
            <summary>
            Generates numbers that range from the value of the current instance to the value of end.
            </summary>
            <param name="start">The current instance.</param>
            <param name="end">The number to end at.</param>
            <returns>An enumerable containing the numbers.</returns>
            <remarks>Yet Another Language Geek - http://blogs.msdn.com/b/wesdyer/archive/2007/02/23/linq-to-ascii-art.aspx</remarks>
        </member>
        <member name="M:SharpBag.FunctionalExtensions.To(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger)">
            <summary>
            Generates numbers that range from the value of the current instance to the value of end.
            </summary>
            <param name="start">The current instance.</param>
            <param name="end">The number to end at.</param>
            <param name="step">The step to take on each iteration.</param>
            <returns>An enumerable containing the numbers.</returns>
            <remarks>Yet Another Language Geek - http://blogs.msdn.com/b/wesdyer/archive/2007/02/23/linq-to-ascii-art.aspx</remarks>
        </member>
        <member name="M:SharpBag.FunctionalExtensions.To(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Func{System.Numerics.BigInteger,System.Numerics.BigInteger})">
            <summary>
            Generates numbers that range from the value of the current instance to the value of end.
            </summary>
            <param name="start">The current instance.</param>
            <param name="end">The number to end at.</param>
            <param name="step">The step to take on each iteration.</param>
            <returns>An enumerable containing the numbers.</returns>
            <remarks>Yet Another Language Geek - http://blogs.msdn.com/b/wesdyer/archive/2007/02/23/linq-to-ascii-art.aspx</remarks>
        </member>
        <member name="M:SharpBag.FunctionalExtensions.To(System.Char,System.Char,System.Int32)">
            <summary>
            Generates chars that range from the current instance to end.
            </summary>
            <param name="start">The current instance.</param>
            <param name="end">The char to end at.</param>
            <param name="step">The step to take on each iteration.</param>
            <returns>An enumerable containing the numbers.</returns>
            <remarks>Yet Another Language Geek - http://blogs.msdn.com/b/wesdyer/archive/2007/02/23/linq-to-ascii-art.aspx</remarks>
        </member>
        <member name="M:SharpBag.FunctionalExtensions.To(System.Char,System.Char,System.Func{System.Int32,System.Int32})">
            <summary>
            Generates chars that range from the current instance to end.
            </summary>
            <param name="start">The current instance.</param>
            <param name="end">The char to end at.</param>
            <param name="step">The step to take on each iteration.</param>
            <returns>An enumerable containing the numbers.</returns>
            <remarks>Yet Another Language Geek - http://blogs.msdn.com/b/wesdyer/archive/2007/02/23/linq-to-ascii-art.aspx</remarks>
        </member>
        <member name="M:SharpBag.FunctionalExtensions.Times``1(System.Int32,System.Func{``0})">
            <summary>
            Executes the specified function N times where N is the value of the current instance.
            </summary>
            <typeparam name="T">The type of the value returned from the function.</typeparam>
            <param name="i">The current instance.</param>
            <param name="f">The function to execute.</param>
            <returns>An enumerable with the returned values of the function.</returns>
            <remarks>Yet Another Language Geek - http://blogs.msdn.com/b/wesdyer/archive/2007/02/23/linq-to-ascii-art.aspx</remarks>
        </member>
        <member name="M:SharpBag.FunctionalExtensions.Memoize``2(System.Func{``0,``1},System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Memoizes the current instance.
            </summary>
            <param name="func">The current instance.</param>
            <param name="memo">The memo.</param>
        </member>
        <member name="M:SharpBag.FunctionalExtensions.Memoize``2(System.Func{System.Func{``0,``1},``0,``1},System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Memoizes the current instance.
            This overload allows for recursive memoization.
            </summary>
            <param name="func">The current instance.</param>
            <param name="memo">The memo.</param>
        </member>
        <member name="M:SharpBag.FunctionalExtensions.And``1(System.Func{``0,System.Boolean},System.Func{``0,System.Boolean})">
            <summary>
            Returns a function that returns true if both of the specified functions return true.
            </summary>
            <typeparam name="T">The return type.</typeparam>
            <param name="f1">The current instance.</param>
            <param name="f2">Another function.</param>
            <returns>A boolean.</returns>
        </member>
        <member name="M:SharpBag.FunctionalExtensions.Or``1(System.Func{``0,System.Boolean},System.Func{``0,System.Boolean})">
            <summary>
            Returns a function that returns true if either of the specified functions return true.
            </summary>
            <typeparam name="T">The return type.</typeparam>
            <param name="f1">The current instance.</param>
            <param name="f2">Another function.</param>
            <returns>A boolean.</returns>
        </member>
        <member name="M:SharpBag.FunctionalExtensions.Not``1(System.Func{``0,System.Boolean})">
            <summary>
            Returns a function that returns the opposite of the current instance when called.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <param name="f">The current instance.</param>
            <returns>A function that returns the opposite of the current instance when called.</returns>
        </member>
        <member name="M:SharpBag.FunctionalExtensions.Then``2(System.Func{``0,System.Boolean},``1,``1)">
            <summary>
            Returns a function, that when called, returns the specified value or the default specified value, depending on the return value of the expression function.
            </summary>
            <typeparam name="TIn">The input type.</typeparam>
            <typeparam name="TOut">The output type.</typeparam>
            <param name="expression">The expression function.</param>
            <param name="obj">The value.</param>
            <param name="def">The default value.</param>
            <returns>A function, that when called, returns the specified value or the default specified value, depending on the return value of the expression function.</returns>
        </member>
        <member name="M:SharpBag.FunctionalExtensions.Unfold``1(System.Func{System.Int32,SharpBag.Option{``0}})">
            <summary>
            Unfolds the current instance.
            </summary>
            <typeparam name="T">The type of the unfolded values.</typeparam>
            <param name="f">The function to unfold.</param>
            <returns>The unfolded values.</returns>
        </member>
        <member name="M:SharpBag.FunctionalExtensions.Unfold``1(System.Func{SharpBag.Option{``0}})">
            <summary>
            Unfolds the current instance.
            </summary>
            <typeparam name="T">The type of the unfolded values.</typeparam>
            <param name="f">The function to unfold.</param>
            <returns>The unfolded values.</returns>
        </member>
        <member name="M:SharpBag.FunctionalExtensions.Unfold``1(System.Func{``0,SharpBag.Option{``0}},``0,System.Func{``0,``0})">
            <summary>
            Unfolds the current instance.
            </summary>
            <typeparam name="T">The type of the unfolded values.</typeparam>
            <param name="f">The function to unfold.</param>
            <param name="seed">The seed to feed the function.</param>
            <param name="step">A function to apply on every unfolded value, to update the seed.</param>
            <returns>The unfolded values.</returns>
        </member>
        <member name="M:SharpBag.FunctionalExtensions.Unfold``1(System.Func{System.Int32,``0})">
            <summary>
            Unfolds the current instance.
            </summary>
            <typeparam name="T">The type of the unfolded values.</typeparam>
            <param name="f">The function to unfold.</param>
            <returns>The unfolded values.</returns>
        </member>
        <member name="M:SharpBag.FunctionalExtensions.Unfold``1(System.Func{``0})">
            <summary>
            Unfolds the current instance.
            </summary>
            <typeparam name="T">The type of the unfolded values.</typeparam>
            <param name="f">The function to unfold.</param>
            <returns>The unfolded values.</returns>
        </member>
        <member name="M:SharpBag.FunctionalExtensions.Unfold``1(System.Func{``0,``0},``0,System.Func{``0,``0})">
            <summary>
            Unfolds the current instance.
            </summary>
            <typeparam name="T">The type of the unfolded values.</typeparam>
            <param name="f">The function to unfold.</param>
            <param name="seed">The seed to feed the function.</param>
            <param name="step">A function to apply on every unfolded value, to update the seed.</param>
            <returns>The unfolded values.</returns>
        </member>
        <member name="M:SharpBag.FunctionalExtensions.Unfold``2(System.Func{``1,SharpBag.Option{``0}},System.Func{``1},System.Action{``1})">
            <summary>
            Unfolds the current instance.
            </summary>
            <typeparam name="T">The type of the unfolded values.</typeparam>
            <typeparam name="T2">The type of the seed.</typeparam>
            <param name="f">The function to unfold.</param>
            <param name="open">The opener.</param>
            <param name="close">The closer.</param>
            <returns>The unfolded values.</returns>
        </member>
        <member name="M:SharpBag.FunctionalExtensions.Unfold``2(System.Func{``1,SharpBag.Option{``0}},System.Func{``1})">
            <summary>
            Unfolds the current instance, and then disposes it.
            </summary>
            <typeparam name="T">The type of the unfolded values.</typeparam>
            <typeparam name="T2">The type of the seed.</typeparam>
            <param name="f">The function to unfold.</param>
            <param name="open">The opener.</param>
            <returns>The unfolded values.</returns>
        </member>
        <member name="M:SharpBag.FunctionalExtensions.Match``2(``0)">
            <summary>
            Returns a new Matcher with the current instance as the target.
            </summary>
            <typeparam name="TIn">The type of the current instance.</typeparam>
            <typeparam name="TOut">The result of the match.</typeparam>
            <param name="value">The current instance.</param>
            <returns>The result of the match.</returns>
        </member>
        <member name="M:SharpBag.FunctionalExtensions.LazilyAggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
            <summary>
            Lazily aggregate the current instance.
            </summary>
            <typeparam name="T">The type of items in the current instance.</typeparam>
            <typeparam name="TAccumulate">The result of the aggregation.</typeparam>
            <param name="sequence">The current instance.</param>
            <param name="seed">The seed.</param>
            <param name="aggregator">The aggregator.</param>
            <returns>The aggregates.</returns>
        </member>
        <member name="M:SharpBag.FunctionalExtensions.LazilyAggregate``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1,``0,``1})">
            <summary>
            Lazily aggregate the current instance.
            </summary>
            <typeparam name="T">The type of items in the current instance.</typeparam>
            <typeparam name="TAccumulate">The result of the aggregation.</typeparam>
            <param name="sequence">The current instance.</param>
            <param name="aggregator">The aggregator.</param>
            <returns>The aggregates.</returns>
        </member>
        <member name="M:SharpBag.FunctionalExtensions.Unfold``1(``0,System.Func{``0,``0})">
            <summary>
            Unfolds the current instance using the unfolder.
            </summary>
            <typeparam name="T">The type of the current instance.</typeparam>
            <param name="item">The current instance.</param>
            <param name="unfolder">The unfolder.</param>
            <returns>The unfolded elements.</returns>
        </member>
        <member name="T:SharpBag.Networking.ConnectionHandler">
            <summary>
            A connection handler.
            </summary>
        </member>
        <member name="T:SharpBag.Networking.PacketEventHandler">
            <summary>
            A packet-event handler.
            </summary>
        </member>
        <member name="M:SharpBag.Networking.PacketEventHandler.Fire``1(System.Int32,``0)">
            <summary>
            Fire the specified event on the other side.
            </summary>
            <typeparam name="T">The type of data to send.</typeparam>
            <param name="eventID">The ID of the event.</param>
            <param name="obj">The data to send.</param>
            <returns>The current instance (for chaining).</returns>
        </member>
        <member name="M:SharpBag.Networking.PacketEventHandler.Fire(System.Int32)">
            <summary>
            Fire the specified event on the server.
            </summary>
            <param name="eventID">The ID of the event.</param>
            <returns>The current instance (for chaining).</returns>
        </member>
        <member name="F:SharpBag.Networking.PacketEventHandler.Events">
            <summary>
            The events.
            </summary>
        </member>
        <member name="M:SharpBag.Networking.PacketEventHandler.Subscribe(System.Int32,System.Action{System.Object,SharpBag.Networking.PacketEventArgs})">
            <summary>
            Subscribe to the specified event.
            </summary>
            <param name="eventID">The ID of the event.</param>
            <param name="action">The action to call when the event occurs.</param>
            <returns>The current instance (for chaining).</returns>
        </member>
        <member name="M:SharpBag.Networking.PacketEventHandler.Subscribe``1(System.Int32,System.Action{``0,SharpBag.Networking.PacketEventArgs})">
            <summary>
            Subscribe to the specified event.
            </summary>
            <typeparam name="T">The type of the data.</typeparam>
            <param name="eventID">The ID of the event.</param>
            <param name="action">The action to call when the event occurs.</param>
            <returns>The current instance (for chaining).</returns>
        </member>
        <member name="M:SharpBag.Networking.PacketEventHandler.Unsubscribe(System.Int32)">
            <summary>
            Unsubscribe from the specified event.
            </summary>
            <param name="eventID">The ID of the event.</param>
            <returns>The current instance (for chaining).</returns>
        </member>
        <member name="M:SharpBag.Networking.ConnectionHandler.#ctor(System.Net.Sockets.TcpClient)">
            <summary>
            Create a connection handler.
            </summary>
            <param name="connection">The connection to handle.</param>
        </member>
        <member name="M:SharpBag.Networking.ConnectionHandler.Fire(System.Int32)">
            <summary>
            Fire the specified event on the other side.
            </summary>
            <param name="eventID">The ID of the event.</param>
        </member>
        <member name="M:SharpBag.Networking.ConnectionHandler.Fire``1(System.Int32,``0)">
            <summary>
            Fire the specified event on the other side.
            </summary>
            <typeparam name="T">The type of data to send.</typeparam>
            <param name="eventID">The ID of the event.</param>
            <param name="obj">The data to send.</param>
        </member>
        <member name="M:SharpBag.Networking.ConnectionHandler.SendPacket(SharpBag.Networking.ConnectionPacket)">
            <summary>
            Send the specified packet to the other side.
            </summary>
            <param name="packet">The specified packet.</param>
            <returns>Whether the packet was successfully sent.</returns>
        </member>
        <member name="M:SharpBag.Networking.ConnectionHandler.ReceivePacket">
            <summary>
            Receive a packet from the other side.
            </summary>
            <returns>The packet.</returns>
        </member>
        <member name="M:SharpBag.Networking.ConnectionHandler.FireOnDisconnect">
            <summary>
            Fires the OnDisconnect event.
            </summary>
        </member>
        <member name="M:SharpBag.Networking.ConnectionHandler.Ping">
            <summary>
            Pings the other side.
            </summary>
            <returns>Whether the ping was successful.</returns>
        </member>
        <member name="E:SharpBag.Networking.ConnectionHandler.OnDisconnect">
            <summary>
            An event that is fired when the connection is disconnected.
            </summary>
        </member>
        <member name="P:SharpBag.Networking.ConnectionHandler.Connected">
            <summary>
            Whether the connection is connected.
            </summary>
        </member>
        <member name="P:SharpBag.Networking.ConnectionHandler.Available">
            <summary>
            The amount of data available from the other side.
            </summary>
        </member>
        <member name="P:SharpBag.Networking.ConnectionHandler.RemoteEndPoint">
            <summary>
            The remote endpoint.
            </summary>
        </member>
        <member name="P:SharpBag.Networking.ConnectionHandler.LocalEndPoint">
            <summary>
            The local endpoint.
            </summary>
        </member>
        <member name="T:SharpBag.Networking.Client">
            <summary>
            A network client.
            </summary>
        </member>
        <member name="T:SharpBag.Networking.IConnection">
            <summary>
            A connection.
            </summary>
        </member>
        <member name="M:SharpBag.Networking.IConnection.Close">
            <summary>
            Open the connection.
            </summary>
        </member>
        <member name="M:SharpBag.Networking.IConnection.Open">
            <summary>
            Close the connection.
            </summary>
        </member>
        <member name="M:SharpBag.Networking.Client.#ctor(System.String,System.Int32)">
            <summary>
            Create a new client.
            </summary>
            <param name="hostname">The hostname, or IP address, of the destination.</param>
            <param name="port">The port to connect to.</param>
        </member>
        <member name="M:SharpBag.Networking.Client.Open">
            <summary>
            Open the connection.
            </summary>
        </member>
        <member name="M:SharpBag.Networking.Client.Close">
            <summary>
            Close the connection.
            </summary>
        </member>
        <member name="M:SharpBag.Networking.Client.Dispose">
            <see cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:SharpBag.Networking.Client.Fire``1(System.Int32,``0)">
            <summary>
            Fire the specified event on the server.
            </summary>
            <typeparam name="T">The type of data to send.</typeparam>
            <param name="eventID">The ID of the event.</param>
            <param name="obj">The data to send.</param>
            <returns>The current instance (for chaining).</returns>
        </member>
        <member name="M:SharpBag.Networking.Client.Fire(System.Int32)">
            <summary>
            Fire the specified event on the server.
            </summary>
            <param name="eventID">The ID of the event.</param>
            <returns>The current instance (for chaining).</returns>
        </member>
        <member name="P:SharpBag.Networking.Client.Connected">
            <summary>
            Whether the client is connected.
            </summary>
        </member>
        <member name="E:SharpBag.Networking.Client.OnDisconnected">
            <summary>
            An event that is fired when the client is disconnected.
            </summary>
        </member>
        <member name="T:SharpBag.Misc.ProblemController">
            <summary>
            A problem controller.
            </summary>
        </member>
        <member name="M:SharpBag.Misc.ProblemController.#ctor(System.String,System.Boolean)">
            <summary>
            The constructor.
            </summary>
            <param name="title">The title of the controller.</param>
            <param name="timeAll">Whether to time all problems.</param>
        </member>
        <member name="M:SharpBag.Misc.ProblemController.Run">
            <summary>
            Run the controller.
            </summary>
        </member>
        <member name="M:SharpBag.Misc.ProblemController.ClearScreen">
            <summary>
            Clears the Console.
            </summary>
        </member>
        <member name="M:SharpBag.Misc.ProblemController.WriteLine(System.Object)">
            <summary>
            Displays the object.
            </summary>
            <param name="o">The object.</param>
        </member>
        <member name="M:SharpBag.Misc.ProblemController.Write(System.Object)">
            <summary>
            Displays the object.
            </summary>
            <param name="o">The object.</param>
        </member>
        <member name="M:SharpBag.Misc.ProblemController.Read``1(System.String,System.String,System.Func{``0,System.Boolean})">
            <summary>
            Read an object from the console.
            </summary>
            <typeparam name="T">The type of the object to read.</typeparam>
            <param name="q">A description of the object.</param>
            <param name="separator">A separator between the description and the object.</param>
            <param name="validator">A validator function.</param>
            <returns>The object that was read.</returns>
        </member>
        <member name="M:SharpBag.Misc.ProblemController.Read(System.String,System.String,System.Func{System.String,System.Boolean})">
            <summary>
            Read a string from the console.
            </summary>
            <param name="q">A description of the string.</param>
            <param name="separator">A separator between the description and the string.</param>
            <param name="validator">A validator function.</param>
            <returns>The string that was read.</returns>
        </member>
        <member name="M:SharpBag.Misc.ProblemController.ReadDouble(System.String,System.String,System.Func{System.Double,System.Boolean})">
            <summary>
            Read a double from the console.
            </summary>
            <param name="q">A description of the string.</param>
            <param name="separator">A separator between the description and the string.</param>
            <param name="validator">A validator function.</param>
            <returns>The string that was read.</returns>
        </member>
        <member name="M:SharpBag.Misc.ProblemController.ReadFile(System.String,System.Text.Encoding)">
            <summary>
            Reads the specified file.
            </summary>
            <param name="fileName">The name of the file to read.</param>
            <param name="encoding">An encoding.</param>
            <returns>The content of the file.</returns>
        </member>
        <member name="M:SharpBag.Misc.ProblemController.ReadFileLines(System.String,System.Text.Encoding)">
            <summary>
            Reads the specified file.
            </summary>
            <param name="fileName">The name of the file to read.</param>
            <param name="encoding">An encoding.</param>
            <returns>The lines of the file.</returns>
        </member>
        <member name="P:SharpBag.Misc.ProblemController.Problems">
            <summary>
            The problems.
            </summary>
        </member>
        <member name="P:SharpBag.Misc.ProblemController.Title">
            <summary>
            The title of the controller.
            </summary>
        </member>
        <member name="P:SharpBag.Misc.ProblemController.TimeAll">
            <summary>
            Whether to time all problems.
            </summary>
        </member>
        <member name="P:SharpBag.Misc.ProblemController.Output">
            <summary>
            Whether to write to the console.
            </summary>
        </member>
        <member name="T:SharpBag.Database.MicrosoftSqlDatabase">
            <summary>
            A class for working with MySQL databases.
            </summary>
        </member>
        <member name="M:SharpBag.Database.MicrosoftSqlDatabase.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            The constructor.
            </summary>
            <param name="server">The server to connect to.</param>
            <param name="schema">The default schema.</param>
            <param name="username">The username used to connect.</param>
            <param name="password">The password used to connect.</param>
        </member>
        <member name="M:SharpBag.Database.MicrosoftSqlDatabase.SQLEscape(System.String)">
            <summary>
            Escapes a string for use in an SQL query.
            </summary>
            <param name="s">The string to escape.</param>
            <returns>The escaped string.</returns>
        </member>
        <member name="M:SharpBag.Database.MicrosoftSqlDatabase.CreateCommand(System.String,System.Data.SqlClient.SqlConnection)">
            <summary>
            Creates a query command.
            </summary>
            <param name="q">The query.</param>
            <param name="c">The connection.</param>
            <returns>The query command.</returns>
        </member>
        <member name="M:SharpBag.Database.MicrosoftSqlDatabase.CreateConnectionString">
            <summary>
            Creates connection string.
            </summary>
            <returns>The connection string.</returns>
        </member>
        <member name="T:SharpBag.Collections.BinaryHeap`1">
            <summary>
            A binary heap.
            </summary>
            <typeparam name="T">The type of items in the heap.</typeparam>
        </member>
        <member name="F:SharpBag.Collections.BinaryHeap`1.InternalArray">
            <summary>
            The internal array.
            </summary>
        </member>
        <member name="M:SharpBag.Collections.BinaryHeap`1.#ctor">
            <summary>
            The constructor.
            </summary>
        </member>
        <member name="M:SharpBag.Collections.BinaryHeap`1.#ctor(System.Int32)">
            <summary>
            The constructor.
            </summary>
            <param name="capacity">The maximum number of items that can be stored in the heap.</param>
        </member>
        <member name="M:SharpBag.Collections.BinaryHeap`1.#ctor(`0[])">
            <summary>
            The constructor.
            </summary>
            <param name="array">An array of items.</param>
        </member>
        <member name="M:SharpBag.Collections.BinaryHeap`1.MaintainHeap(System.Int32)">
            <summary>
            Maintain the heap.
            </summary>
            <param name="i">The highest item to maintain.</param>
        </member>
        <member name="M:SharpBag.Collections.BinaryHeap`1.Peek">
            <summary>
            Peek at the next item in the heap.
            </summary>
            <returns>The item.</returns>
        </member>
        <member name="M:SharpBag.Collections.BinaryHeap`1.Pop">
            <summary>
            Pop the next item from the heap.
            </summary>
            <returns>The item.</returns>
        </member>
        <member name="M:SharpBag.Collections.BinaryHeap`1.Push(`0)">
            <summary>
            Push an item into the heap.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:SharpBag.Collections.BinaryHeap`1.Clear">
            <summary>
            Clears the heap.
            </summary>
        </member>
        <member name="M:SharpBag.Collections.BinaryHeap`1.Compare(System.Int32,System.Int32)">
            <summary>
            The item comparer.
            </summary>
            <param name="firstIndex">The index of the first item.</param>
            <param name="secondIndex">The index of the second item.</param>
            <returns>The order of the items.</returns>
        </member>
        <member name="M:SharpBag.Collections.BinaryHeap`1.Left(System.Int32)">
            <summary>
            Gets the left child of the specified index.
            </summary>
            <param name="i">The specified index.</param>
            <returns>The left child.</returns>
        </member>
        <member name="M:SharpBag.Collections.BinaryHeap`1.Right(System.Int32)">
            <summary>
            Gets the right child of the specified index.
            </summary>
            <param name="i">The specified index.</param>
            <returns>The right child.</returns>
        </member>
        <member name="M:SharpBag.Collections.BinaryHeap`1.Parent(System.Int32)">
            <summary>
            Gets the parent of the specified index.
            </summary>
            <param name="i">The specified index.</param>
            <returns>The parent.</returns>
        </member>
        <member name="M:SharpBag.Collections.BinaryHeap`1.InternalSort">
            <summary>
            The internal heap sort.
            </summary>
            <returns>The sorted items.</returns>
        </member>
        <member name="M:SharpBag.Collections.BinaryHeap`1.InternalSortReversed">
            <summary>
            The reverse internal heap sort.
            </summary>
            <returns>The reverse sorted items.</returns>
        </member>
        <member name="P:SharpBag.Collections.BinaryHeap`1.Count">
            <summary>
            The number of items in the heap.
            </summary>
        </member>
        <member name="P:SharpBag.Collections.BinaryHeap`1.Capacity">
            <summary>
            The maximum number of items that can be stored in the heap.
            </summary>
        </member>
        <member name="T:SharpBag.CollectionExtensions">
            <summary>
            Extension methods for collections.
            </summary>
        </member>
        <member name="M:SharpBag.CollectionExtensions.Subsets``1(``0[],System.Int32)">
            <summary>
            Returns all the subsets of the current instance with the specified minimum length.
            </summary>
            <typeparam name="T">The type of values the current instance holds.</typeparam>
            <param name="array">The current instance.</param>
            <param name="min">The minimum length of a subset.</param>
            <returns>The subsets.</returns>
        </member>
        <member name="M:SharpBag.CollectionExtensions.Subsets``1(``0[],System.Int32,System.Int32)">
            <summary>
            Returns all the subsets of the current instance with the specified minimum length and the specified maximum length.
            </summary>
            <typeparam name="T">The type of values the current instance holds.</typeparam>
            <param name="array">The current instance.</param>
            <param name="min">The minimum length of a subset.</param>
            <param name="max">The maximum length of a subset.</param>
            <returns>The subsets.</returns>
        </member>
        <member name="M:SharpBag.CollectionExtensions.Line``1(``0[0:,0:],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a line in the current instance.
            </summary>
            <param name="g">The current instance.</param>
            <param name="x">The first x coordinate.</param>
            <param name="y">The first y coordinate.</param>
            <param name="xDelta">The x delta.</param>
            <param name="yDelta">The y delta.</param>
            <returns>The line.</returns>
        </member>
        <member name="M:SharpBag.CollectionExtensions.Line``2(``0[0:,0:],System.Int32,System.Int32,System.Int32,System.Int32,System.Func{``0,System.Int32,System.Int32,``1})">
            <summary>
            Returns a line in the current instance.
            </summary>
            <param name="g">The current instance.</param>
            <param name="x">The first x coordinate.</param>
            <param name="y">The first y coordinate.</param>
            <param name="xDelta">The x delta.</param>
            <param name="yDelta">The y delta.</param>
            <param name="selector">The result selector.</param>
            <returns>The line.</returns>
        </member>
        <member name="M:SharpBag.CollectionExtensions.Shuffle``1(System.Collections.Generic.IEnumerable{``0},System.Random)">
            <summary>
            Shuffle the collection.
            </summary>
            <typeparam name="T">The type of items in the current instance.</typeparam>
            <param name="source">The current instance.</param>
            <param name="rand">A random number generator.</param>
            <returns>The shuffled collection.</returns>
        </member>
        <member name="M:SharpBag.CollectionExtensions.TakeEvery``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            Takes every n-th item of the collection.
            </summary>
            <typeparam name="T">The type of the items.</typeparam>
            <param name="enumeration">The current instance.</param>
            <param name="step">The step to take.</param>
            <param name="start">The location to start at.</param>
            <returns>Every n-th item of the collection.</returns>
        </member>
        <member name="M:SharpBag.CollectionExtensions.Random``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a random item from the current instance.
            </summary>
            <typeparam name="T">The type of the items.</typeparam>
            <param name="collection">The current instance.</param>
            <returns>A random item from  the current instance.</returns>
        </member>
        <member name="M:SharpBag.CollectionExtensions.Random``1(System.Collections.Generic.IEnumerable{``0},System.Random)">
            <summary>
            Returns a random item from the current instance.
            </summary>
            <typeparam name="T">The type of the items.</typeparam>
            <param name="collection">The current instance.</param>
            <param name="rand">A random number generator.</param>
            <returns>A random item from  the current instance.</returns>
        </member>
        <member name="M:SharpBag.CollectionExtensions.Subarray``1(``0[0:,0:],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets a subarray of the current instance.
            </summary>
            <param name="a">The current instance.</param>
            <param name="x0">X-coordinate 1.</param>
            <param name="y0">Y-coordinate 1.</param>
            <param name="x1">X-coordinate 2.</param>
            <param name="y1">Y-coordinate 2.</param>
            <returns>The subarray.</returns>
        </member>
        <member name="M:SharpBag.CollectionExtensions.AsEnumerable``1(System.Collections.Generic.IEnumerator{``0})">
            <summary>
            Converts the current instance into an enumerable.
            </summary>
            <typeparam name="T">The type of elements in the current instance.</typeparam>
            <param name="e">The current instance.</param>
            <returns>An enumerable.</returns>
        </member>
        <member name="M:SharpBag.CollectionExtensions.AsEnumerable(System.Collections.IEnumerator)">
            <summary>
            Converts the current instance into an enumerable.
            </summary>
            <param name="e">The current instance.</param>
            <returns>An enumerable.</returns>
        </member>
        <member name="M:SharpBag.CollectionExtensions.Range``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            Gets a subarray of an array.
            </summary>
            <typeparam name="T">The type of the enumerable.</typeparam>
            <param name="c">The array.</param>
            <param name="start">The first index.</param>
            <param name="end">The last index.</param>
            <returns>A subarray of the array.</returns>
        </member>
        <member name="M:SharpBag.CollectionExtensions.Execute``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Immediately executes the current instance.
            </summary>
            <typeparam name="T">The type of the elements in the enumerable.</typeparam>
            <param name="collection">The current instance.</param>
            <remarks>Yet Another Language Geek - http://blogs.msdn.com/b/wesdyer/archive/2007/02/23/linq-to-ascii-art.aspx </remarks>
        </member>
        <member name="M:SharpBag.CollectionExtensions.AsEnumerable``1(``0[0:,0:])">
            <summary>
            Returns an enumerable of all the items in the current instance.
            </summary>
            <typeparam name="T">The type of the items.</typeparam>
            <param name="multiDArray">The current instance.</param>
            <returns>An enumerable of all the items in the current instance.</returns>
        </member>
        <member name="M:SharpBag.CollectionExtensions.AsEnumerable``1(``0[0:,0:,0:])">
            <summary>
            Returns an enumerable of all the items in the current instance.
            </summary>
            <typeparam name="T">The type of the items.</typeparam>
            <param name="multiDArray">The current instance.</param>
            <returns>An enumerable of all the items in the current instance.</returns>
        </member>
        <member name="M:SharpBag.CollectionExtensions.ToMultidimensional``1(``0[][])">
            <summary>
            Converts the current instance to a multidimensional array.
            </summary>
            <typeparam name="T">The type of items the current instance holds.</typeparam>
            <param name="jagged">The current instance.</param>
            <returns>A multidimensional array.</returns>
        </member>
        <member name="M:SharpBag.CollectionExtensions.Select``2(``0[0:,0:],System.Func{``0,``1})">
            <summary>
            Projects every element in the current instance using the specified function.
            </summary>
            <typeparam name="TIn">The types in the current instance.</typeparam>
            <typeparam name="TOut">The types in the result.</typeparam>
            <param name="mArr">The current instance.</param>
            <param name="func">The projector function.</param>
            <returns>The new array.</returns>
        </member>
        <member name="M:SharpBag.CollectionExtensions.AsMultidimensional``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Turns the current instance into a multidimensional array.
            </summary>
            <typeparam name="T">The type of elements in the current instance.</typeparam>
            <param name="collection">The current instance.</param>
            <param name="cols">The number of columns in the result array.</param>
            <returns>The multidimensional array.</returns>
        </member>
        <member name="M:SharpBag.CollectionExtensions.Zip``2(``0[0:,0:],``0[0:,0:],System.Func{``0,``0,``1})">
            <summary>
            Combines the current instance with another multidimensional array.
            </summary>
            <typeparam name="TIn">The type of items in the current instance.</typeparam>
            <typeparam name="TOut">The type of items in the result array.</typeparam>
            <param name="arrFirst">The current instance.</param>
            <param name="arrSecond">The other array.</param>
            <param name="func">The function.</param>
            <returns>The combined array.</returns>
        </member>
        <member name="M:SharpBag.CollectionExtensions.Shift``1(``0[0:,0:],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Shifts each element in the current instance.
            </summary>
            <typeparam name="T">The type of elements in the current instance.</typeparam>
            <param name="arr">The current instance.</param>
            <param name="xDelta">The x delta.</param>
            <param name="yDelta">The y delta.</param>
            <param name="wrap">Whether to wrap.</param>
            <returns>The new array with shifted elements.</returns>
        </member>
        <member name="M:SharpBag.CollectionExtensions.ArrayContains(System.Array,System.Object)">
            <summary>
            Checks whether the array contains the specified object.
            </summary>
            <param name="a">The array.</param>
            <param name="o">The object.</param>
            <returns>Whether the array contains the specified object.</returns>
        </member>
        <member name="M:SharpBag.CollectionExtensions.WithInfo``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds extended info to the current instance.
            </summary>
            <typeparam name="T">The type of items in the current instance.</typeparam>
            <param name="collection">The current instance.</param>
            <returns>The current instance with extended info.</returns>
        </member>
        <member name="M:SharpBag.CollectionExtensions.WithoutInfo``1(System.Collections.Generic.IEnumerable{SharpBag.EnumerableEntry.WithInfo{``0}})">
            <summary>
            Removes extended info from the current instance.
            </summary>
            <typeparam name="T">The type of items in the current instance.</typeparam>
            <param name="collection">The current instance.</param>
            <returns>The current instance without extended info.</returns>
        </member>
        <member name="M:SharpBag.CollectionExtensions.UpdateInfo``1(System.Collections.Generic.IEnumerable{SharpBag.EnumerableEntry.WithInfo{``0}})">
            <summary>
            Updates extended info of the current instance.
            </summary>
            <typeparam name="T">The type of items in the current instance.</typeparam>
            <param name="collection">The current instance.</param>
            <returns>The current instance with updated info.</returns>
        </member>
        <member name="M:SharpBag.CollectionExtensions.WithIndex``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds indices to the current instance.
            </summary>
            <typeparam name="T">The type of items in the current instance.</typeparam>
            <param name="collection">The current instance.</param>
            <returns>The current instance with indices.</returns>
        </member>
        <member name="M:SharpBag.CollectionExtensions.WithoutIndex``1(System.Collections.Generic.IEnumerable{SharpBag.EnumerableEntry.WithIndex{``0}})">
            <summary>
            Removes indices from the current instance.
            </summary>
            <typeparam name="T">The type of items in the current instance.</typeparam>
            <param name="collection">The current instance.</param>
            <returns>The current instance without indices.</returns>
        </member>
        <member name="M:SharpBag.CollectionExtensions.UpdateIndex``1(System.Collections.Generic.IEnumerable{SharpBag.EnumerableEntry.WithIndex{``0}})">
            <summary>
            Updates indices of the current instance.
            </summary>
            <typeparam name="T">The type of items in the current instance.</typeparam>
            <param name="collection">The current instance.</param>
            <returns>The current instance with updated indices.</returns>
        </member>
        <member name="M:SharpBag.CollectionExtensions.ToStack``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts the current instance to a Stack.
            </summary>
            <typeparam name="T">The type of items in the current instance.</typeparam>
            <param name="items">The current instance.</param>
            <returns>The new Stack.</returns>
        </member>
        <member name="M:SharpBag.CollectionExtensions.ToQueue``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts the current instance to a Queue.
            </summary>
            <typeparam name="T">The type of items in the current instance.</typeparam>
            <param name="items">The current instance.</param>
            <returns>The new Queue.</returns>
        </member>
        <member name="M:SharpBag.CollectionExtensions.MaxItem``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Returns the item where the selector returns the maximum value.
            </summary>
            <typeparam name="T">The type of items in the current instance.</typeparam>
            <typeparam name="TCompare">The type to compare.</typeparam>
            <param name="sequence">The current instance.</param>
            <param name="selector">The selector.</param>
            <returns>The item where the selector returns the maximum value.</returns>
        </member>
        <member name="M:SharpBag.CollectionExtensions.MinItem``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Returns the item where the selector returns the minimum value.
            </summary>
            <typeparam name="T">The type of items in the current instance.</typeparam>
            <typeparam name="TCompare">The type to compare.</typeparam>
            <param name="sequence">The current instance.</param>
            <param name="selector">The selector.</param>
            <returns>The item where the selector returns the minimum value.</returns>
        </member>
        <member name="M:SharpBag.CollectionExtensions.Cycle``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>
            Cycles the items in the current instance.
            </summary>
            <typeparam name="T">The items in the current instance.</typeparam>
            <param name="collection">The current instance.</param>
            <param name="cache">Whether to cache items returned from the current instance.</param>
            <returns>The items in the current instance in a cycle.</returns>
        </member>
        <member name="M:SharpBag.CollectionExtensions.GroupsOf``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Split the current instance into groups of the specified size.
            </summary>
            <typeparam name="T">The type of elements in the current instance.</typeparam>
            <param name="collection">The current instance.</param>
            <param name="size">The size of each group.</param>
            <returns>The current instance split into groups.</returns>
        </member>
        <member name="M:SharpBag.CollectionExtensions.CastAll``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Cast all the items in the current instance to the specified type.
            </summary>
            <typeparam name="T">The type to cast from.</typeparam>
            <typeparam name="TResult">The type to cast to.</typeparam>
            <param name="collection">The current instance.</param>
            <returns>The current instance with the items cast to the specified type.</returns>
        </member>
        <member name="M:SharpBag.CollectionExtensions.GroupNeighbours``1(System.Collections.Generic.IEnumerable{``0},System.Func{System.Collections.Generic.IEnumerable{``0},``0,System.Boolean})">
            <summary>
            Groups neighbours in the current instance according to the specified predicate.
            </summary>
            <typeparam name="T">The type of items in the current instance.</typeparam>
            <param name="collection">The current instance.</param>
            <param name="predicate">The predicate.</param>
            <returns>The grouped collection.</returns>
        </member>
        <member name="M:SharpBag.CollectionExtensions.Flatten``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Flattens the current instance.
            </summary>
            <typeparam name="T">The type of the items.</typeparam>
            <param name="collection">The current instance.</param>
            <returns>All the items in all the collections in the current instance.</returns>
        </member>
        <member name="T:SharpBag.Time.TimeUtils">
            <summary>
            A static class with utilites regarding dates and time.
            </summary>
        </member>
        <member name="M:SharpBag.Time.TimeUtils.IsLeapYear(System.Int32)">
            <summary>
            Determines whether the specified year is leap year or not.
            </summary>
            <param name="year">A year.</param>
            <returns>Whether the specified year is leap year or not.</returns>
        </member>
        <member name="T:SharpBag.Math.BagMath">
            <summary>
            A static class containing methods for math.
            </summary>
        </member>
        <member name="M:SharpBag.Math.BagMath.Gcd(System.Int32,System.Int32)">
            <summary>
            Finds the greatest common divisor (gcd) of the specified integers.
            </summary>
            <param name="a">An integer.</param>
            <param name="b">An integer.</param>
            <returns>The greatest common divisor (gcd) of the specified integers.</returns>
        </member>
        <member name="M:SharpBag.Math.BagMath.Lcm(System.Int32,System.Int32)">
            <summary>
            Finds the least common multiple (lcm) of the specified integers.
            </summary>
            <param name="a">An integer.</param>
            <param name="b">An integer.</param>
            <returns>The least common multiple (lcm) of the specified integers.</returns>
        </member>
        <member name="M:SharpBag.Math.BagMath.Gcd(System.Int64,System.Int64)">
            <summary>
            Finds the greatest common divisor (gcd) of the specified integers.
            </summary>
            <param name="a">An integer.</param>
            <param name="b">An integer.</param>
            <returns>The greatest common divisor (gcd) of the specified integers.</returns>
        </member>
        <member name="M:SharpBag.Math.BagMath.Lcm(System.Int64,System.Int64)">
            <summary>
            Finds the least common multiple (lcm) of the specified integers.
            </summary>
            <param name="a">An integer.</param>
            <param name="b">An integer.</param>
            <returns>The least common multiple (lcm) of the specified integers.</returns>
        </member>
        <member name="M:SharpBag.Math.BagMath.Gcd(System.Numerics.BigInteger,System.Numerics.BigInteger)">
            <summary>
            Finds the greatest common divisor (gcd) of the specified integers.
            </summary>
            <param name="a">An integer.</param>
            <param name="b">An integer.</param>
            <returns>The greatest common divisor (gcd) of the specified integers.</returns>
        </member>
        <member name="M:SharpBag.Math.BagMath.Lcm(System.Numerics.BigInteger,System.Numerics.BigInteger)">
            <summary>
            Finds the least common multiple (lcm) of the specified integers.
            </summary>
            <param name="a">An integer.</param>
            <param name="b">An integer.</param>
            <returns>The least common multiple (lcm) of the specified integers.</returns>
        </member>
        <member name="M:SharpBag.Math.BagMath.IsPrime(System.Int32,System.Boolean)">
            <summary>
            Checks whether a number is a prime number or not.
            </summary>
            <param name="n">The number to test.</param>
            <param name="checkCache">Whether to check cache for primality.</param>
            <returns>Whether the number is prime.</returns>
        </member>
        <member name="M:SharpBag.Math.BagMath.IsPrime(System.Int64,System.Boolean)">
            <summary>
            Checks whether a number is a prime number or not.
            </summary>
            <param name="n">The number to test.</param>
            <param name="checkCache">Whether to check cache for primality.</param>
            <returns>Whether the number is prime.</returns>
        </member>
        <member name="M:SharpBag.Math.BagMath.IsPrime(System.Numerics.BigInteger,System.Boolean)">
            <summary>
            Checks whether a number is a prime number or not.
            </summary>
            <param name="n">The number to test.</param>
            <param name="checkCache">Whether to check cache for primality.</param>
            <returns>Whether the number is prime.</returns>
        </member>
        <member name="M:SharpBag.Math.BagMath.SieveOfEratosthenes(System.Int32)">
            <summary>
            Performs an Eratosthenes sieve to find primes.
            </summary>
            <param name="upperLimit">The highest number to check.</param>
            <returns>The primes.</returns>
        </member>
        <member name="M:SharpBag.Math.BagMath.SieveOfEratosthenes(System.UInt64)">
            <summary>
            Performs an Eratosthenes sieve to find primes.
            </summary>
            <param name="upperLimit">The highest number to check.</param>
            <returns>The primes.</returns>
        </member>
        <member name="M:SharpBag.Math.BagMath.SieveOfAtkin(System.UInt64)">
            <summary>
            Performs an Atkin sieve to find primes.
            </summary>
            <param name="max">The highest number to check.</param>
            <returns>The primes.</returns>
        </member>
        <member name="M:SharpBag.Math.BagMath.SieveOfAtkinParallel(System.Int32)">
            <summary>
            Performs an Atkin sieve to find primes, in parallel.
            </summary>
            <param name="max">The highest number to check.</param>
            <returns>The primes.</returns>
            <remarks>Parallel is faster for finding primes bigger than 1000.</remarks>
        </member>
        <member name="M:SharpBag.Math.BagMath.CollatzCount(System.Int32)">
            <summary>
            Returns the Collatz count.
            </summary>
            <param name="n">The current instance.</param>
            <returns>The Collatz count.</returns>
        </member>
        <member name="M:SharpBag.Math.BagMath.CollatzCount(System.Int64)">
            <summary>
            Returns the Collatz count.
            </summary>
            <param name="n">The current instance.</param>
            <returns>The Collatz count.</returns>
        </member>
        <member name="M:SharpBag.Math.BagMath.CollatzCount(System.Numerics.BigInteger)">
            <summary>
            Returns the Collatz count.
            </summary>
            <param name="n">The current instance.</param>
            <returns>The Collatz count.</returns>
        </member>
        <member name="P:SharpBag.Math.BagMath.SmallPrimes">
            <summary>
            All primes below or equal to 1999, sorted in ascending order.
            </summary>
        </member>
        <member name="P:SharpBag.Math.BagMath.LargestSmallPrime">
            <summary>
            The largest value in the SmallPrime array, which is 1999.
            </summary>
        </member>
        <member name="T:SharpBag.Games.CardStack">
            <summary>
            A class representing a stack og cards.
            </summary>
        </member>
        <member name="M:SharpBag.Games.CardStack.#ctor">
            <summary>
            The main constructor.
            </summary>
        </member>
        <member name="M:SharpBag.Games.CardStack.#ctor(System.Boolean)">
            <summary>
            The main constructor.
            </summary>
            <param name="shuffle">Whether or not to shuffle the stack.</param>
        </member>
        <member name="M:SharpBag.Games.CardStack.Reset">
            <summary>
            Resets the card stack.
            </summary>
        </member>
        <member name="M:SharpBag.Games.CardStack.Shuffle">
            <summary>
            Shuffles the stack.
            </summary>
        </member>
        <member name="M:SharpBag.Games.CardStack.Draw(System.Boolean)">
            <summary>
            Draws the top card from the stack.
            </summary>
            <param name="isDown">Whether or not the card drawn should be face down or face up.</param>
            <returns>The next card in the stack.</returns>
        </member>
        <member name="T:SharpBag.CharType">
            <summary>
            Char types.
            </summary>
        </member>
        <member name="F:SharpBag.CharType.AlphabeticLower">
            <summary>
            A lower-case alphabetic char.
            </summary>
        </member>
        <member name="F:SharpBag.CharType.AlphabeticUpper">
            <summary>
            An upper-case alphabetic char.
            </summary>
        </member>
        <member name="F:SharpBag.CharType.AlphabeticAny">
            <summary>
            An alphabetic char.
            </summary>
        </member>
        <member name="F:SharpBag.CharType.AlphanumericLower">
            <summary>
            A lower-case alphanumeric char.
            </summary>
        </member>
        <member name="F:SharpBag.CharType.AlphanumericUpper">
            <summary>
            An upper-case alphanumeric char.
            </summary>
        </member>
        <member name="F:SharpBag.CharType.AlphanumericAny">
            <summary>
            An alphanumeric char.
            </summary>
        </member>
        <member name="F:SharpBag.CharType.Numeric">
            <summary>
            A numeric char.
            </summary>
        </member>
        <member name="T:SharpBag.RandomExtensions">
            <summary>
            A static class with extensions for the Random class.
            </summary>
        </member>
        <member name="M:SharpBag.RandomExtensions.NextBool(System.Random,System.Double)">
            <summary>
            Returns a random boolean.
            </summary>
            <param name="random">The current instance.</param>
            <param name="probability">The probability of returning true.</param>
            <returns>A random boolean.</returns>
        </member>
        <member name="M:SharpBag.RandomExtensions.NextChar(System.Random,SharpBag.CharType)">
            <summary>
            Returns a random character.
            </summary>
            <param name="random">The current instance.</param>
            <param name="mode">What kind of characters are allowed.</param>
            <returns>A random character.</returns>
        </member>
        <member name="M:SharpBag.RandomExtensions.NextChar(System.Random)">
            <summary>
            Returns a random character.
            </summary>
            <param name="random">The current instance.</param>
            <returns>A random character.</returns>
        </member>
        <member name="M:SharpBag.RandomExtensions.NextDateTime(System.Random,System.DateTime,System.DateTime)">
            <summary>
            Returns a random DateTime between minValue and maxValue.
            </summary>
            <param name="random">The current instance.</param>
            <param name="minValue">The lowest value.</param>
            <param name="maxValue">The highest value.</param>
            <returns>A random DateTime between minValue and maxValue.</returns>
        </member>
        <member name="M:SharpBag.RandomExtensions.NextDateTime(System.Random)">
            <summary>
            Returns a random DateTime.
            </summary>
            <param name="random">The current instance.</param>
            <returns>A random DateTime.</returns>
        </member>
        <member name="M:SharpBag.RandomExtensions.NextDouble(System.Random,System.Double,System.Double)">
            <summary>
            Returns a random double between minValue and maxValue.
            </summary>
            <param name="random">The current instance.</param>
            <param name="minValue">The lowest value.</param>
            <param name="maxValue">The highest value.</param>
            <returns>A random double between minValue and maxValue.</returns>
        </member>
        <member name="M:SharpBag.RandomExtensions.NextString(System.Random,System.Int32,SharpBag.CharType)">
            <summary>
            Returns a random string with the specified length.
            </summary>
            <param name="random">The current instance.</param>
            <param name="numChars">The length of the string.</param>
            <param name="mode">The type of characters in the string.</param>
            <returns>A random string with the specified length.</returns>
        </member>
        <member name="M:SharpBag.RandomExtensions.NextTimeSpan(System.Random,System.TimeSpan,System.TimeSpan)">
            <summary>
            Returns a random TimeSpan between minValue and maxValue.
            </summary>
            <param name="random">The current instance.</param>
            <param name="minValue">The min value.</param>
            <param name="maxValue">The max value.</param>
            <returns>A random TimeSpan between minValue and maxValue.</returns>
        </member>
        <member name="M:SharpBag.RandomExtensions.NextTimeSpan(System.Random)">
            <summary>
            Returns a random TimeSpan.
            </summary>
            <param name="random">The current instance.</param>
            <returns>A random TimeSpan.</returns>
        </member>
        <member name="T:SharpBag.Misc.Draw">
            <summary>
            A class for drawing shapes.
            </summary>
        </member>
        <member name="M:SharpBag.Misc.Draw.Square(System.Int32,System.Int32,System.Char,System.Char)">
            <summary>
            Draw a square.
            </summary>
            <param name="rows">The number of rows.</param>
            <param name="cols">The number of columns.</param>
            <param name="border">The border.</param>
            <param name="fill">The fill.</param>
            <returns>The drawn square.</returns>
        </member>
        <member name="M:SharpBag.Misc.Draw.TriangleTL(System.Int32,System.Char,System.Char)">
            <summary>
            Draw a triangle.
            </summary>
            <param name="size">The size.</param>
            <param name="border">The border.</param>
            <param name="fill">The fill.</param>
            <returns>The drawn triangle.</returns>
        </member>
        <member name="M:SharpBag.Misc.Draw.TriangleTR(System.Int32,System.Char,System.Char)">
            <summary>
            Draw a triangle.
            </summary>
            <param name="size">The size.</param>
            <param name="border">The border.</param>
            <param name="fill">The fill.</param>
            <returns>The drawn triangle.</returns>
        </member>
        <member name="M:SharpBag.Misc.Draw.TriangleBR(System.Int32,System.Char,System.Char)">
            <summary>
            Draw a triangle.
            </summary>
            <param name="size">The size.</param>
            <param name="border">The border.</param>
            <param name="fill">The fill.</param>
            <returns>The drawn triangle.</returns>
        </member>
        <member name="M:SharpBag.Misc.Draw.TriangleBL(System.Int32,System.Char,System.Char)">
            <summary>
            Draw a triangle.
            </summary>
            <param name="size">The size.</param>
            <param name="border">The border.</param>
            <param name="fill">The fill.</param>
            <returns>The drawn triangle.</returns>
        </member>
        <member name="T:SharpBag.Math.ForBigInteger.Polynomial">
            <summary>
            A polynomial.
            </summary>
        </member>
        <member name="M:SharpBag.Math.ForBigInteger.Polynomial.#ctor">
            <summary>
            The constructor.
            </summary>
        </member>
        <member name="M:SharpBag.Math.ForBigInteger.Polynomial.#ctor(System.Numerics.BigInteger[])">
            <summary>
            The constructor.
            </summary>
            <param name="coefficients">The coefficients.</param>
        </member>
        <member name="M:SharpBag.Math.ForBigInteger.Polynomial.Evaluate(System.Numerics.BigInteger)">
            <summary>
            Evalute the polynomial at the specified x.
            </summary>
            <param name="x">The specified x.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:SharpBag.Math.ForBigInteger.Polynomial.op_Addition(SharpBag.Math.ForBigInteger.Polynomial,SharpBag.Math.ForBigInteger.Polynomial)">
            <summary>
            Add the specified polynomials.
            </summary>
            <param name="left">The left polynomial.</param>
            <param name="right">The right polynomial.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:SharpBag.Math.ForBigInteger.Polynomial.op_Subtraction(SharpBag.Math.ForBigInteger.Polynomial,SharpBag.Math.ForBigInteger.Polynomial)">
            <summary>
            Subtract the specified polynomials.
            </summary>
            <param name="left">The left polynomial.</param>
            <param name="right">The right polynomial.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:SharpBag.Math.ForBigInteger.Polynomial.op_Multiply(SharpBag.Math.ForBigInteger.Polynomial,SharpBag.Math.ForBigInteger.Polynomial)">
            <summary>
            Multiply the specified polynomials.
            </summary>
            <param name="left">The left polynomial.</param>
            <param name="right">The right polynomial.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:SharpBag.Math.ForBigInteger.Polynomial.op_Implicit(System.Numerics.BigInteger)~SharpBag.Math.ForBigInteger.Polynomial">
            <summary>
            An implicit cast to a polynomial.
            </summary>
            <param name="n">The value to cast.</param>
            <returns>The polynomial.</returns>
        </member>
        <member name="M:SharpBag.Math.ForBigInteger.Polynomial.Differentiate">
            <summary>
            Differentiates the polynomial.
            </summary>
            <returns>The differentiated polynomial.</returns>
        </member>
        <member name="M:SharpBag.Math.ForBigInteger.Polynomial.ToString">
            <summary>
            Object.ToString()
            </summary>
            <returns>The polynomial as a string.</returns>
        </member>
        <member name="P:SharpBag.Math.ForBigInteger.Polynomial.Degree">
            <summary>
            The degree of the polynomial.
            </summary>
        </member>
        <member name="P:SharpBag.Math.ForBigInteger.Polynomial.Item(System.Int32)">
            <summary>
            The i-th coefficient.
            </summary>
            <param name="i">The i.</param>
            <returns>The i-th coefficient.</returns>
        </member>
        <member name="T:SharpBag.Networking.NetworkExtensions">
            <summary>
            Extensions methods for the Network class.
            </summary>
        </member>
        <member name="M:SharpBag.Networking.NetworkExtensions.Download(System.Uri,System.Text.Encoding)">
            <summary>
            Downloads the source of the specified location and returns it as a string.
            </summary>
            <param name="page">The location.</param>
            <param name="encoding">The encoding to use.</param>
            <returns></returns>
        </member>
        <member name="T:SharpBag.Math.MathExtensions">
            <summary>
            Extension methods for the BagMath class.
            </summary>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.ToInfinity(System.Int64,System.Int64)">
            <summary>
            Generates numbers that range from the value of the current instance to positive infinity.
            </summary>
            <param name="start">The current instance.</param>
            <param name="step">The step to take on each iteration.</param>
            <returns>An enumerable containing the numbers.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.ToInfinity(System.Int32,System.Int32)">
            <summary>
            Generates numbers that range from the value of the current instance to positive infinity.
            </summary>
            <param name="start">The current instance.</param>
            <param name="step">The step to take on each iteration.</param>
            <returns>An enumerable containing the numbers.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.ToInfinity(System.Numerics.BigInteger)">
            <summary>
            Generates numbers that range from the value of the current instance to positive infinity.
            </summary>
            <param name="start">The current instance.</param>
            <returns>An enumerable containing the numbers.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.ToInfinity(System.Numerics.BigInteger,System.Numerics.BigInteger)">
            <summary>
            Generates numbers that range from the value of the current instance to positive infinity.
            </summary>
            <param name="start">The current instance.</param>
            <param name="step">The step to take on each iteration.</param>
            <returns>An enumerable containing the numbers.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.Divisors(System.Int32)">
            <summary>
            The divisors of the current instance.
            </summary>
            <param name="n">The current instance.</param>
            <returns>The divisors.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.Divisors(System.Int64)">
            <summary>
            The divisors of the current instance.
            </summary>
            <param name="n">The current instance.</param>
            <returns>The divisors.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.Divisors(System.Numerics.BigInteger)">
            <summary>
            The divisors of the current instance.
            </summary>
            <param name="n">The current instance.</param>
            <returns>The divisors.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.DivisorCount(System.Int32)">
            <summary>
            Returns the number of divisors of the current instance.
            </summary>
            <param name="n">The current instance.</param>
            <returns>The number of divisors of the current instance.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.DivisorCount(System.Int32,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Returns the number of divisors of the current instance.
            </summary>
            <param name="n">The current instance.</param>
            <param name="primes">Primes.</param>
            <returns>The number of divisors of the current instance.</returns>
            <remarks>The largest prime needed is p * p > n.</remarks>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.DivisorCount(System.Int64)">
            <summary>
            Returns the number of divisors of the current instance.
            </summary>
            <param name="n">The current instance.</param>
            <returns>The number of divisors of the current instance.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.DivisorCount(System.Int64,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Returns the number of divisors of the current instance.
            </summary>
            <param name="n">The current instance.</param>
            <param name="primes">Primes.</param>
            <returns>The number of divisors of the current instance.</returns>
            <remarks>The largest prime needed is p * p > n.</remarks>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.DivisorCount(System.Numerics.BigInteger)">
            <summary>
            Returns the number of divisors of the current instance.
            </summary>
            <param name="n">The current instance.</param>
            <returns>The number of divisors of the current instance.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.DivisorCount(System.Numerics.BigInteger,System.Collections.Generic.IEnumerable{System.Numerics.BigInteger})">
            <summary>
            Returns the number of divisors of the current instance.
            </summary>
            <param name="n">The current instance.</param>
            <param name="primes">Primes.</param>
            <returns>The number of divisors of the current instance.</returns>
            <remarks>The largest prime needed is pMax * pMax > n.</remarks>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.DivisorSum(System.Int32)">
            <summary>
            Calculates the sum of the divisors of the current instance.
            </summary>
            <param name="n">The current instance.</param>
            <returns>The sum of the divisors of the current instance.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.DivisorSum(System.Int64)">
            <summary>
            Calculates the sum of the divisors of the current instance.
            </summary>
            <param name="n">The current instance.</param>
            <returns>The sum of the divisors of the current instance.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.DivisorSum(System.Numerics.BigInteger)">
            <summary>
            Calculates the sum of the divisors of the current instance.
            </summary>
            <param name="n">The current instance.</param>
            <returns>The sum of the divisors of the current instance.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.ProperDivisors(System.Int32)">
            <summary>
            The proper divisors of the current instance.
            </summary>
            <param name="n">The current instance.</param>
            <returns>The proper divisors.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.ProperDivisors(System.Int64)">
            <summary>
            The proper divisors of the current instance.
            </summary>
            <param name="n">The current instance.</param>
            <returns>The proper divisors.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.ProperDivisors(System.Numerics.BigInteger)">
            <summary>
            The proper divisors of the current instance.
            </summary>
            <param name="n">The current instance.</param>
            <returns>The proper divisors.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.PrimeFactors(System.Int32)">
            <summary>
            Calculates the prime factors of the current instance.
            </summary>
            <param name="i">The current instance.</param>
            <returns>The prime factors of the current instance.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.PrimeFactors(System.Int32,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Calculates the prime factors of the current instance.
            </summary>
            <param name="i">The current instance.</param>
            <param name="primes">An array of primes.</param>
            <returns>The prime factors of the current instance.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.PrimeFactors(System.Int64)">
            <summary>
            Calculates the prime factors of the current instance.
            </summary>
            <param name="i">The current instance.</param>
            <returns>The prime factors of the current instance.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.PrimeFactors(System.Int64,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Calculates the prime factors of the current instance.
            </summary>
            <param name="i">The current instance.</param>
            <param name="primes">An array of primes.</param>
            <returns>The prime factors of the current instance.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.PrimeFactors(System.Numerics.BigInteger)">
            <summary>
            Calculates the prime factors of the current instance.
            </summary>
            <param name="i">The current instance.</param>
            <returns>The prime factors of the current instance.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.PrimeFactors(System.Numerics.BigInteger,System.Collections.Generic.IEnumerable{System.Numerics.BigInteger})">
            <summary>
            Calculates the prime factors of the current instance.
            </summary>
            <param name="i">The current instance.</param>
            <param name="primes">An array of primes.</param>
            <returns>The prime factors of the current instance.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.Digits(System.Int32)">
            <summary>
            Returns the digits of the current instance.
            </summary>
            <param name="n">The current instance.</param>
            <returns>The digits.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.DigitsBase(System.Int32,System.Int32)">
            <summary>
            Returns the digits of the current instance in the specified base.
            </summary>
            <param name="n">The current instance.</param>
            <param name="baseNum"></param>
            <returns>The digits.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.Digits(System.Int64)">
            <summary>
            Returns the digits of the current instance.
            </summary>
            <param name="n">The current instance.</param>
            <returns>The digits.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.DigitsBase(System.Int64,System.Int32)">
            <summary>
            Returns the digits of the current instance in the specified base.
            </summary>
            <param name="n">The current instance.</param>
            <param name="baseNum"></param>
            <returns>The digits.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.Digits(System.Numerics.BigInteger)">
            <summary>
            Returns the digits of the current instance.
            </summary>
            <param name="n">The current instance.</param>
            <returns>The digits.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.DigitsBase(System.Numerics.BigInteger,System.Int32)">
            <summary>
            Returns the digits of the current instance in the specified base.
            </summary>
            <param name="n">The current instance.</param>
            <param name="baseNum"></param>
            <returns>The digits.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.Reverse(System.Int32)">
            <summary>
            Reverses the current instance.
            </summary>
            <param name="i">The current instance.</param>
            <returns>The reversed current instance.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.ReverseBase(System.Int32,System.Int32)">
            <summary>
            Reverses the current instance in the specified base.
            </summary>
            <param name="i">The current instance.</param>
            <param name="baseNum">The specified base.</param>
            <returns>The reversed current instance in the specifed base.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.Reverse(System.Int64)">
            <summary>
            Reverses the current instance.
            </summary>
            <param name="i">The current instance.</param>
            <returns>The reversed current instance.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.ReverseBase(System.Int64,System.Int32)">
            <summary>
            Reverses the current instance in the specified base.
            </summary>
            <param name="i">The current instance.</param>
            <param name="baseNum">The specified base.</param>
            <returns>The reversed current instance in the specifed base.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.Reverse(System.Numerics.BigInteger)">
            <summary>
            Reverses the current instance.
            </summary>
            <param name="i">The current instance.</param>
            <returns>The reversed current instance.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.ReverseBase(System.Numerics.BigInteger,System.Int32)">
            <summary>
            Reverses the current instance in the specified base.
            </summary>
            <param name="i">The current instance.</param>
            <param name="baseNum">The specified base.</param>
            <returns>The reversed current instance in the specifed base.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.Pow(System.Int32,System.Int32)">
            <summary>
            Puts the current instance to the specified power.
            </summary>
            <param name="i">The current instance.</param>
            <param name="power">The specified power.</param>
            <returns>The current instance in the specified power.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.Pow(System.Double,System.Double)">
            <summary>
            Puts the current instance to the specified power.
            </summary>
            <param name="i">The current instance.</param>
            <param name="power">The specified power.</param>
            <returns>The current instance in the specified power.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.IsEven(System.Int32)">
            <summary>
            Whether the current instance is even.
            </summary>
            <param name="n">The current instance.</param>
            <returns>Whether the current instance is even.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.IsEven(System.Int64)">
            <summary>
            Whether the current instance is even.
            </summary>
            <param name="n">The current instance.</param>
            <returns>Whether the current instance is even.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.IsEven(System.Numerics.BigInteger)">
            <summary>
            Whether the current instance is even.
            </summary>
            <param name="n">The current instance.</param>
            <returns>Whether the current instance is even.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.IsOdd(System.Int32)">
            <summary>
            Whether the current instance is odd.
            </summary>
            <param name="n">The current instance.</param>
            <returns>Whether the current instance is odd.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.IsOdd(System.Int64)">
            <summary>
            Whether the current instance is odd.
            </summary>
            <param name="n">The current instance.</param>
            <returns>Whether the current instance is odd.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.IsOdd(System.Numerics.BigInteger)">
            <summary>
            Whether the current instance is even.
            </summary>
            <param name="n">The current instance.</param>
            <returns>Whether the current instance is odd.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.IsPrime(System.Int32,System.Boolean)">
            <summary>
            Whether the current instance is prime.
            </summary>
            <param name="n">The current instance.</param>
            <param name="checkCache">Whether to check cache for primality.</param>
            <returns>Whether the current instance is prime.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.IsPrime(System.Int64,System.Boolean)">
            <summary>
            Whether the current instance is prime.
            </summary>
            <param name="n">The current instance.</param>
            <param name="checkCache">Whether to check cache for primality.</param>
            <returns>Whether the current instance is prime.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.IsPrime(System.Numerics.BigInteger,System.Boolean)">
            <summary>
            Whether the current instance is prime.
            </summary>
            <param name="n">The current instance.</param>
            <param name="checkCache">Whether to check cache for primality.</param>
            <returns>Whether the current instance is prime.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.IsPandigital(System.Int32)">
            <summary>
            Returns whether the current instance is pandigital.
            </summary>
            <param name="n">The current instance.</param>
            <returns>Whether the current instance is pandigital.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.IsPandigital(System.Int64)">
            <summary>
            Returns whether the current instance is pandigital.
            </summary>
            <param name="n">The current instance.</param>
            <returns>Whether the current instance is pandigital.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.IsPandigital(System.Numerics.BigInteger)">
            <summary>
            Returns whether the current instance is pandigital.
            </summary>
            <param name="n">The current instance.</param>
            <returns>Whether the current instance is pandigital.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.Concat(System.Int32,System.Int32)">
            <summary>
            Concatenates the current instance and the specified integer.
            </summary>
            <param name="a">The current instance.</param>
            <param name="b">The specified integer.</param>
            <returns>The concatenated integer.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.Concat(System.Int64,System.Int64)">
            <summary>
            Concatenates the current instance and the specified integer.
            </summary>
            <param name="a">The current instance.</param>
            <param name="b">The specified integer.</param>
            <returns>The concatenated integer.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.Concat(System.Numerics.BigInteger,System.Numerics.BigInteger)">
            <summary>
            Concatenates the current instance and the specified integer.
            </summary>
            <param name="a">The current instance.</param>
            <param name="b">The specified integer.</param>
            <returns>The concatenated integer.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.IsProbablePrime(System.Numerics.BigInteger,System.Int32,System.Random)">
            <summary>
            Whether the current instance is probably prime.
            </summary>
            <param name="n">The current instance.</param>
            <param name="t">The accuracy of the test, higher is more accurate.</param>
            <param name="rnd">A random number generator.</param>
            <returns>Whether the current instance is probably prime.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.BitLength(System.Int32)">
            <summary>
            Returns how many bits are in the current instance.
            </summary>
            <param name="n">The current instance.</param>
            <returns>How many bits are in the current instance.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.BitLength(System.Int64)">
            <summary>
            Returns how many bits are in the current instance.
            </summary>
            <param name="n">The current instance.</param>
            <returns>How many bits are in the current instance.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.BitLength(System.Numerics.BigInteger)">
            <summary>
            Returns how many bits are in the current instance.
            </summary>
            <param name="n">The current instance.</param>
            <returns>How many bits are in the current instance.</returns>
        </member>
        <member name="M:SharpBag.Math.MathExtensions.Sqrt(System.Numerics.BigInteger)">
            <summary>
            Calculates the square root of the current instance.
            </summary>
            <param name="n">The current instance.</param>
            <returns>The square root of the current instance.</returns>
        </member>
        <member name="T:SharpBag.Math.Interpolation">
            <summary>
            Methods for interpolation.
            </summary>
        </member>
        <member name="M:SharpBag.Math.Interpolation.ConvertToPoints(System.Double[],System.Double,System.Double)">
            <summary>
            Convert an array of values to an array of points.
            </summary>
            <param name="points">The known data points.</param>
            <param name="x0">The first x.</param>
            <param name="xDelta">The x delta.</param>
            <returns>The array of points.</returns>
        </member>
        <member name="M:SharpBag.Math.Interpolation.Cubic(SharpBag.Math.ForDouble.Point[])">
            <summary>
            A cubic spline interpolation.
            </summary>
            <param name="points">The known data points.</param>
            <returns>An interpolation function.</returns>
        </member>
        <member name="M:SharpBag.Math.Interpolation.Linear(SharpBag.Math.ForDouble.Point[])">
            <summary>
            A linear spline interpolation.
            </summary>
            <param name="points">The known data points.</param>
            <returns>An interpolation function.</returns>
        </member>
        <member name="M:SharpBag.Math.Interpolation.Bilinear(System.Double[0:,0:],System.Double,System.Double,System.Double,System.Double)">
            <summary>
            A bilinear spline interpolation.
            </summary>
            <param name="points">The known data points.</param>
            <param name="x0">The first X.</param>
            <param name="y0">The first Y.</param>
            <param name="xDelta">The delta X.</param>
            <param name="yDelta">The delta Y.</param>
            <returns>An interpolation function.</returns>
        </member>
        <member name="M:SharpBag.Math.Interpolation.Bicubic(System.Double[0:,0:],System.Double,System.Double,System.Double,System.Double)">
            <summary>
            A bicubic spline interpolation.
            </summary>
            <param name="points">The known data points.</param>
            <param name="x0">The first X.</param>
            <param name="y0">The first Y.</param>
            <param name="xDelta">The delta X.</param>
            <param name="yDelta">The delta Y.</param>
            <returns>An interpolation function.</returns>
        </member>
        <member name="T:SharpBag.Games.CardValue">
            <summary>
            An enumeration containing values of cards.
            </summary>
        </member>
        <member name="F:SharpBag.Games.CardValue.Ace">
            <summary>
            An ace.
            </summary>
        </member>
        <member name="F:SharpBag.Games.CardValue.Two">
            <summary>
            A two.
            </summary>
        </member>
        <member name="F:SharpBag.Games.CardValue.Three">
            <summary>
            A three.
            </summary>
        </member>
        <member name="F:SharpBag.Games.CardValue.Four">
            <summary>
            A four.
            </summary>
        </member>
        <member name="F:SharpBag.Games.CardValue.Five">
            <summary>
            A five.
            </summary>
        </member>
        <member name="F:SharpBag.Games.CardValue.Six">
            <summary>
            A six.
            </summary>
        </member>
        <member name="F:SharpBag.Games.CardValue.Seven">
            <summary>
            A seven.
            </summary>
        </member>
        <member name="F:SharpBag.Games.CardValue.Eight">
            <summary>
            An eight.
            </summary>
        </member>
        <member name="F:SharpBag.Games.CardValue.Nine">
            <summary>
            A nine.
            </summary>
        </member>
        <member name="F:SharpBag.Games.CardValue.Ten">
            <summary>
            A ten.
            </summary>
        </member>
        <member name="F:SharpBag.Games.CardValue.Jack">
            <summary>
            A jack.
            </summary>
        </member>
        <member name="F:SharpBag.Games.CardValue.Queen">
            <summary>
            A queen.
            </summary>
        </member>
        <member name="F:SharpBag.Games.CardValue.King">
            <summary>
            A king.
            </summary>
        </member>
        <member name="T:SharpBag.Collections.MinHeap`1">
            <summary>
            A min heap.
            </summary>
            <typeparam name="T">The type of items in the heap.</typeparam>
        </member>
        <member name="M:SharpBag.Collections.MinHeap`1.#ctor">
            <summary>
            The constructor.
            </summary>
        </member>
        <member name="M:SharpBag.Collections.MinHeap`1.#ctor(System.Int32)">
            <summary>
            The constructor.
            </summary>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:SharpBag.Collections.MinHeap`1.#ctor(`0[])">
            <summary>
            The constructor.
            </summary>
            <param name="array">An array of items.</param>
        </member>
        <member name="M:SharpBag.Collections.MinHeap`1.Compare(System.Int32,System.Int32)">
            <summary>
            The item comparer.
            </summary>
            <param name="firstIndex">The index of the first item.</param>
            <param name="secondIndex">The index of the second item.</param>
            <returns>The order of the items.</returns>
        </member>
        <member name="M:SharpBag.Collections.MinHeap`1.Contains(`0)">
            <summary>
            Whether the heap contains the item.
            </summary>
            <param name="item">The item.</param>
            <returns>Whether the heap contains the item.</returns>
        </member>
        <member name="M:SharpBag.Collections.MinHeap`1.Sort(`0[])">
            <summary>
            Heapsort the array.
            </summary>
            <param name="array">The array.</param>
            <returns>The sorted array.</returns>
        </member>
        <member name="M:SharpBag.Collections.MinHeap`1.SortDescending(`0[])">
            <summary>
            Heapsort the array, in descending order.
            </summary>
            <param name="array">The array.</param>
            <returns>The sorted array.</returns>
        </member>
        <member name="T:SharpBag.Misc.ProblemMetadata">
            <summary>
            A problem.
            </summary>
        </member>
        <member name="M:SharpBag.Misc.ProblemMetadata.#ctor(SharpBag.Misc.ProblemAttribute,System.Reflection.MethodInfo)">
            <summary>
            The constructor.
            </summary>
            <param name="problem">The problem.</param>
            <param name="method">The method.</param>
        </member>
        <member name="P:SharpBag.Misc.ProblemMetadata.Method">
            <summary>
            The method.
            </summary>
        </member>
        <member name="P:SharpBag.Misc.ProblemMetadata.Title">
            <summary>
            The title.
            </summary>
        </member>
        <member name="P:SharpBag.Misc.ProblemMetadata.Description">
            <summary>
            The description.
            </summary>
        </member>
        <member name="P:SharpBag.Misc.ProblemMetadata.Time">
            <summary>
            Whether to time the problem
            </summary>
        </member>
        <member name="P:SharpBag.Misc.ProblemMetadata.Finished">
            <summary>
            Whether the problem is finished.
            </summary>
        </member>
        <member name="P:SharpBag.Misc.ProblemMetadata.Pause">
            <summary>
            Whether to pause after the problem has finished running.
            </summary>
        </member>
        <member name="P:SharpBag.Misc.ProblemMetadata.Start">
            <summary>
            Whether to run the problem on start.
            </summary>
        </member>
        <member name="T:SharpBag.Games.CardType">
            <summary>
            An enumeration containing types of cards.
            </summary>
        </member>
        <member name="F:SharpBag.Games.CardType.Heart">
            <summary>
            A heart.
            </summary>
        </member>
        <member name="F:SharpBag.Games.CardType.Spade">
            <summary>
            A spade.
            </summary>
        </member>
        <member name="F:SharpBag.Games.CardType.Diamond">
            <summary>
            A diamond.
            </summary>
        </member>
        <member name="F:SharpBag.Games.CardType.Leaf">
            <summary>
            A leaf.
            </summary>
        </member>
        <member name="T:SharpBag.ConsoleHelper">
            <summary>
            A class for helping with console IO.
            </summary>
        </member>
        <member name="M:SharpBag.ConsoleHelper.Create">
            <summary>
            Returns an instance of the console helper.
            </summary>
            <returns>An instance of the console helper.</returns>
        </member>
        <member name="M:SharpBag.ConsoleHelper.Write``1(``0)">
            <summary>
            Writes the specified object to the console.
            </summary>
            <param name="o">The specified object.</param>
            <returns>The current instance (for chaining).</returns>
        </member>
        <member name="M:SharpBag.ConsoleHelper.WriteLine``1(``0)">
            <summary>
            Writes the specified object to the console, and then puts the cursor on a new line.
            </summary>
            <param name="o">The specified object.</param>
            <returns>The current instance (for chaining).</returns>
        </member>
        <member name="M:SharpBag.ConsoleHelper.Write(System.String,System.Object[])">
            <summary>
            Formats the specified string and objects with String.Format and the writes it to the console.
            </summary>
            <param name="format">The format string.</param>
            <param name="args">The arguments.</param>
            <returns>The current instance (for chaining).</returns>
        </member>
        <member name="M:SharpBag.ConsoleHelper.WriteLine(System.String,System.Object[])">
            <summary>
            Formats the specified string and objects with String.Format, writes it to the console and the puts the cursor on a new line.
            </summary>
            <param name="format">The format string.</param>
            <param name="args">The arguments.</param>
            <returns>The current instance (for chaining).</returns>
        </member>
        <member name="M:SharpBag.ConsoleHelper.ReadLine">
            <summary>
            Reads a string from the console.
            </summary>
            <returns>The string read from the console.</returns>
        </member>
        <member name="M:SharpBag.ConsoleHelper.ReadLine``1">
            <summary>
            Reads a string from the console and then converts it to the specified type.
            </summary>
            <returns>The converted string read from the console.</returns>
        </member>
        <member name="M:SharpBag.ConsoleHelper.ToString">
            <see cref="M:System.Object.ToString"/>
        </member>
        <member name="T:SharpBag.Combinatorics.Combinations`1">
             <summary>
             Combinations defines a meta-collection, typically a list of lists, of all possible
             subsets of a particular size from the set of values.  This list is enumerable and
             allows the scanning of all possible combinations using a simple foreach() loop.
             Within the returned set, there is no prescribed order.  This follows the mathematical
             concept of choose.  For example, put 10 dominoes in a hat and pick 5.  The number of possible
             combinations is defined as "10 choose 5", which is calculated as (10!) / ((10 - 5)! * 5!).
             </summary>
             <remarks>
             The MetaCollectionType parameter of the constructor allows for the creation of
             two types of sets,  those with and without repetition in the output set when
             presented with repetition in the input set.
            
             When given a input collect {A B C} and lower index of 2, the following sets are generated:
             MetaCollectionType.WithRepetition =>
             {A A}, {A B}, {A C}, {B B}, {B C}, {C C}
             MetaCollectionType.WithoutRepetition =>
             {A B}, {A C}, {B C}
            
             Input sets with multiple equal values will generate redundant combinations in proprotion
             to the likelyhood of outcome.  For example, {A A B B} and a lower index of 3 will generate:
             {A A B} {A A B} {A B B} {A B B}
             </remarks>
             <typeparam name="T">The type of the values within the list.</typeparam>
        </member>
        <member name="M:SharpBag.Combinatorics.Combinations`1.#ctor(System.Collections.Generic.IList{`0},System.Int32)">
            <summary>
            Create a combination set from the provided list of values.
            The upper index is calculated as values.Count, the lower index is specified.
            Collection type defaults to MetaCollectionType.WithoutRepetition
            </summary>
            <param name="values">List of values to select combinations from.</param>
            <param name="lowerIndex">The size of each combination set to return.</param>
        </member>
        <member name="M:SharpBag.Combinatorics.Combinations`1.#ctor(System.Collections.Generic.IList{`0},System.Int32,SharpBag.Combinatorics.GenerateOption)">
            <summary>
            Create a combination set from the provided list of values.
            The upper index is calculated as values.Count, the lower index is specified.
            </summary>
            <param name="values">List of values to select combinations from.</param>
            <param name="lowerIndex">The size of each combination set to return.</param>
            <param name="type">The type of Combinations set to generate.</param>
        </member>
        <member name="M:SharpBag.Combinatorics.Combinations`1.GetEnumerator">
            <summary>
            Gets an enumerator for collecting the list of combinations.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:SharpBag.Combinatorics.Combinations`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator for collecting the list of combinations.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:SharpBag.Combinatorics.Combinations`1.Initialize(System.Collections.Generic.IList{`0},System.Int32,SharpBag.Combinatorics.GenerateOption)">
             <summary>
             Initialize the combinations by settings a copy of the values from the
             </summary>
             <param name="values">List of values to select combinations from.</param>
             <param name="lowerIndex">The size of each combination set to return.</param>
             <param name="type">The type of Combinations set to generate.</param>
             <remarks>
             Copies the array and parameters and then creates a map of booleans that will
             be used by a permutations object to refence the subset.  This map is slightly
             different based on whether the type is with or without repetition.
            
             When the type is WithoutRepetition, then a map of upper index elements is
             created with lower index false's.
             E.g. 8 choose 3 generates:
             Map: {1 1 1 1 1 0 0 0}
             Note: For sorting reasons, false denotes inclusion in output.
            
             When the type is WithRepetition, then a map of upper index - 1 + lower index
             elements is created with the falses indicating that the 'current' element should
             be included and the trues meaning to advance the 'current' element by one.
             E.g. 8 choose 3 generates:
             Map: {1 1 1 1 1 1 1 1 0 0 0} (7 trues, 3 falses).
             </remarks>
        </member>
        <member name="F:SharpBag.Combinatorics.Combinations`1.myValues">
            <summary>
            Copy of values object is intialized with, required for enumerator reset.
            </summary>
        </member>
        <member name="F:SharpBag.Combinatorics.Combinations`1.myPermutations">
            <summary>
            Permutations object that handles permutations on booleans for combination inclusion.
            </summary>
        </member>
        <member name="F:SharpBag.Combinatorics.Combinations`1.myMetaCollectionType">
            <summary>
            The type of the combination collection.
            </summary>
        </member>
        <member name="F:SharpBag.Combinatorics.Combinations`1.myLowerIndex">
            <summary>
            The lower index defined in the constructor.
            </summary>
        </member>
        <member name="P:SharpBag.Combinatorics.Combinations`1.Count">
            <summary>
            The number of unique combinations that are defined in this meta-collection.
            This value is mathematically defined as Choose(M, N) where M is the set size
            and N is the subset size.  This is M! / (N! * (M-N)!).
            </summary>
        </member>
        <member name="P:SharpBag.Combinatorics.Combinations`1.Type">
            <summary>
            The type of Combinations set that is generated.
            </summary>
        </member>
        <member name="P:SharpBag.Combinatorics.Combinations`1.UpperIndex">
            <summary>
            The upper index of the meta-collection, equal to the number of items in the initial set.
            </summary>
        </member>
        <member name="P:SharpBag.Combinatorics.Combinations`1.LowerIndex">
            <summary>
            The lower index of the meta-collection, equal to the number of items returned each iteration.
            </summary>
        </member>
        <member name="T:SharpBag.Combinatorics.Combinations`1.Enumerator">
            <summary>
            The enumerator that enumerates each meta-collection of the enclosing Combinations class.
            </summary>
        </member>
        <member name="M:SharpBag.Combinatorics.Combinations`1.Enumerator.#ctor(SharpBag.Combinatorics.Combinations{`0})">
            <summary>
            Construct a enumerator with the parent object.
            </summary>
            <param name="source">The source combinations object.</param>
        </member>
        <member name="M:SharpBag.Combinatorics.Combinations`1.Enumerator.Reset">
            <summary>
            Resets the combinations enumerator to the first combination.
            </summary>
        </member>
        <member name="M:SharpBag.Combinatorics.Combinations`1.Enumerator.MoveNext">
            <summary>
            Advances to the next combination of items from the set.
            </summary>
            <returns>True if successfully moved to next combination, False if no more unique combinations exist.</returns>
            <remarks>
            The heavy lifting is done by the permutations object, the combination is generated
            by creating a new list of those items that have a true in the permutation parrellel array.
            </remarks>
        </member>
        <member name="M:SharpBag.Combinatorics.Combinations`1.Enumerator.Dispose">
            <summary>
            Cleans up non-managed resources, of which there are none used here.
            </summary>
        </member>
        <member name="M:SharpBag.Combinatorics.Combinations`1.Enumerator.ComputeCurrent">
             <summary>
             The only complex function of this entire wrapper, ComputeCurrent() creates
             a list of original values from the bool permutation provided.
             The exception for accessing current (InvalidOperationException) is generated
             by the call to .Current on the underlying enumeration.
             </summary>
             <remarks>
             To compute the current list of values, the underlying permutation object
             which moves with this enumerator, is scanned differently based on the type.
             The items have only two values, true and false, which have different meanings:
            
             For type WithoutRepetition, the output is a straightforward subset of the input array.
             E.g. 6 choose 3 without repetition
             Input array:   {A B C D E F}
             Permutations:  {0 1 0 0 1 1}
             Generates set: {A   C D    }
             Note: size of permutation is equal to upper index.
            
             For type WithRepetition, the output is defined by runs of characters and when to
             move to the next element.
             E.g. 6 choose 5 with repetition
             Input array:   {A B C D E F}
             Permutations:  {0 1 0 0 1 1 0 0 1 1}
             Generates set: {A   B B     D D    }
             Note: size of permutation is equal to upper index - 1 + lower index.
             </remarks>
        </member>
        <member name="F:SharpBag.Combinatorics.Combinations`1.Enumerator.myParent">
            <summary>
            Parent object this is an enumerator for.
            </summary>
        </member>
        <member name="F:SharpBag.Combinatorics.Combinations`1.Enumerator.myCurrentList">
            <summary>
            The current list of values, this is lazy evaluated by the Current property.
            </summary>
        </member>
        <member name="F:SharpBag.Combinatorics.Combinations`1.Enumerator.myPermutationsEnumerator">
            <summary>
            An enumertor of the parents list of lexicographic orderings.
            </summary>
        </member>
        <member name="P:SharpBag.Combinatorics.Combinations`1.Enumerator.Current">
            <summary>
            The current combination
            </summary>
        </member>
        <member name="P:SharpBag.Combinatorics.Combinations`1.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            The current combination
            </summary>
        </member>
        <member name="T:SharpBag.Math.ForInt32.Polynomial">
            <summary>
            A polynomial.
            </summary>
        </member>
        <member name="M:SharpBag.Math.ForInt32.Polynomial.#ctor">
            <summary>
            The constructor.
            </summary>
        </member>
        <member name="M:SharpBag.Math.ForInt32.Polynomial.#ctor(System.Int32[])">
            <summary>
            The constructor.
            </summary>
            <param name="coefficients">The coefficients.</param>
        </member>
        <member name="M:SharpBag.Math.ForInt32.Polynomial.Evaluate(System.Int32)">
            <summary>
            Evalute the polynomial at the specified x.
            </summary>
            <param name="x">The specified x.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt32.Polynomial.op_Addition(SharpBag.Math.ForInt32.Polynomial,SharpBag.Math.ForInt32.Polynomial)">
            <summary>
            Add the specified polynomials.
            </summary>
            <param name="left">The left polynomial.</param>
            <param name="right">The right polynomial.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt32.Polynomial.op_Subtraction(SharpBag.Math.ForInt32.Polynomial,SharpBag.Math.ForInt32.Polynomial)">
            <summary>
            Subtract the specified polynomials.
            </summary>
            <param name="left">The left polynomial.</param>
            <param name="right">The right polynomial.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt32.Polynomial.op_Multiply(SharpBag.Math.ForInt32.Polynomial,SharpBag.Math.ForInt32.Polynomial)">
            <summary>
            Multiply the specified polynomials.
            </summary>
            <param name="left">The left polynomial.</param>
            <param name="right">The right polynomial.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt32.Polynomial.op_Implicit(System.Int32)~SharpBag.Math.ForInt32.Polynomial">
            <summary>
            An implicit cast to a polynomial.
            </summary>
            <param name="n">The value to cast.</param>
            <returns>The polynomial.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt32.Polynomial.Differentiate">
            <summary>
            Differentiates the polynomial.
            </summary>
            <returns>The differentiated polynomial.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt32.Polynomial.ToString">
            <summary>
            Object.ToString()
            </summary>
            <returns>The polynomial as a string.</returns>
        </member>
        <member name="P:SharpBag.Math.ForInt32.Polynomial.Degree">
            <summary>
            The degree of the polynomial.
            </summary>
        </member>
        <member name="P:SharpBag.Math.ForInt32.Polynomial.Item(System.Int32)">
            <summary>
            The i-th coefficient.
            </summary>
            <param name="i">The i.</param>
            <returns>The i-th coefficient.</returns>
        </member>
        <member name="T:SharpBag.Database.DatabaseExtensions">
            <summary>
            Extension methods for the database classes.
            </summary>
        </member>
        <member name="M:SharpBag.Database.DatabaseExtensions.ToSQLDateTime(System.DateTime)">
            <summary>
            Converts a DateTime object into an SQL compatible string.
            </summary>
            <param name="dt">The current instance.</param>
            <returns>An SQL formatted string.</returns>
        </member>
        <member name="M:SharpBag.Database.DatabaseExtensions.InsertInto``1(System.Data.DataTable,SharpBag.Database.GenericDatabase{``0})">
            <summary>
            Inserts the current DataTable instance into the specified database.
            </summary>
            <param name="dt">The current instance.</param>
            <param name="db">The database to insert into.</param>
            <returns>How many rows were affected.</returns>
        </member>
        <member name="T:SharpBag.Combinatorics.CombinatoricExtensions">
            <summary>
            A class with combinatoric extension methods.
            </summary>
        </member>
        <member name="M:SharpBag.Combinatorics.CombinatoricExtensions.Permutations``1(``0[],System.Boolean)">
            <summary>
            Returns all the permutations of the current instance.
            </summary>
            <typeparam name="T">The type of items in the current instance.</typeparam>
            <param name="collection">The current instance.</param>
            <param name="distinct">Whether the items should be distinct.</param>
            <returns>All the permutations of the current instance.</returns>
        </member>
        <member name="M:SharpBag.Combinatorics.CombinatoricExtensions.Combinations``1(``0[],System.Int32,System.Boolean)">
            <summary>
            Returns all the combinations of the current instance.
            </summary>
            <typeparam name="T">The type of items in the current instance.</typeparam>
            <param name="collection">The current instance.</param>
            <param name="size">The size of each combination.</param>
            <param name="distinct">Whether the items should be distinct.</param>
            <returns>All the combinations of the current instance.</returns>
        </member>
        <member name="M:SharpBag.Combinatorics.CombinatoricExtensions.Variations``1(``0[],System.Int32,System.Boolean)">
            <summary>
            Returns all the variations of the current instance.
            </summary>
            <typeparam name="T">The type of items in the current instance.</typeparam>
            <param name="collection">The current instance.</param>
            <param name="size">The size of each variation.</param>
            <param name="distinct">Whether the items should be distinct.</param>
            <returns>All the variations of the current instance.</returns>
        </member>
        <member name="T:SharpBag.Networking.TcpClientHandler">
            <summary>
            A class that handles TcpClients.
            </summary>
        </member>
        <member name="M:SharpBag.Networking.TcpClientHandler.#ctor(System.Net.Sockets.TcpClient,System.Text.Encoding,System.Int32,System.Int32,System.Boolean)">
            <summary>
            The constructor.
            </summary>
            <param name="client">The TcpClient.</param>
            <param name="encoding">The encoding to use.</param>
            <param name="checkInterval">The interval to check for messages.</param>
            <param name="receiveTimeout">The time, in milliseconds, before a timeout occurs when reading data from the server.</param>
            <param name="start">Whether to start the handler.</param>
        </member>
        <member name="M:SharpBag.Networking.TcpClientHandler.Start(System.Int32)">
            <summary>
            Opens the TcpListener, starts the listening thread and starts listening for messages.
            </summary>
            <param name="ping">The interval, in milliseconds, to ping the client. If it's a negative integer, no pings are sent.</param>
        </member>
        <member name="M:SharpBag.Networking.TcpClientHandler.SendMessage(System.String)">
            <summary>
            Sends a message.
            </summary>
            <param name="s">The message to send.</param>
            <returns>Whether the message was sent.</returns>
        </member>
        <member name="M:SharpBag.Networking.TcpClientHandler.Stop">
            <summary>
            Stops listening for messages, stops the listening thread and closes the TcpClient.
            </summary>
        </member>
        <member name="M:SharpBag.Networking.TcpClientHandler.Listen">
            <summary>
            Listen to messages.
            </summary>
        </member>
        <member name="M:SharpBag.Networking.TcpClientHandler.op_Equality(SharpBag.Networking.TcpClientHandler,SharpBag.Networking.TcpClientHandler)">
            <summary>
            Checks whether a is equal to b.
            </summary>
            <param name="a">A.</param>
            <param name="b">B.</param>
            <returns>Whether a is equal to b.</returns>
        </member>
        <member name="M:SharpBag.Networking.TcpClientHandler.op_Inequality(SharpBag.Networking.TcpClientHandler,SharpBag.Networking.TcpClientHandler)">
            <summary>
            Checks whether a is not equal to b.
            </summary>
            <param name="a">A.</param>
            <param name="b">B.</param>
            <returns>Whether a is not equal to b.</returns>
        </member>
        <member name="M:SharpBag.Networking.TcpClientHandler.Equals(System.Object)">
            <summary>
            Object.Equals(object)
            </summary>
        </member>
        <member name="M:SharpBag.Networking.TcpClientHandler.GetHashCode">
            <see cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:SharpBag.Networking.TcpClientHandler.Dispose">
            <see cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="P:SharpBag.Networking.TcpClientHandler.Thread">
            <summary>
            The listening thread.
            </summary>
        </member>
        <member name="P:SharpBag.Networking.TcpClientHandler.BaseStream">
            <summary>
            The stream.
            </summary>
        </member>
        <member name="P:SharpBag.Networking.TcpClientHandler.Reader">
            <summary>
            The stream reader.
            </summary>
        </member>
        <member name="P:SharpBag.Networking.TcpClientHandler.Writer">
            <summary>
            The stream writer.
            </summary>
        </member>
        <member name="P:SharpBag.Networking.TcpClientHandler.Encoding">
            <summary>
            The encoding to use when reading from the client.
            </summary>
        </member>
        <member name="P:SharpBag.Networking.TcpClientHandler.Client">
            <summary>
            The client.
            </summary>
        </member>
        <member name="P:SharpBag.Networking.TcpClientHandler.Listening">
            <summary>
            Whether the handler is listening for messages.
            </summary>
        </member>
        <member name="P:SharpBag.Networking.TcpClientHandler.CheckInterval">
            <summary>
            The interval, in milliseconds, to check for messages.
            </summary>
        </member>
        <member name="P:SharpBag.Networking.TcpClientHandler.PingThread">
            <summary>
            The ping thread.
            </summary>
        </member>
        <member name="P:SharpBag.Networking.TcpClientHandler.PingInterval">
            <summary>
            The ping interval.
            </summary>
        </member>
        <member name="E:SharpBag.Networking.TcpClientHandler.MessageReceived">
            <summary>
            An event that is fired when a message is received.
            </summary>
        </member>
        <member name="E:SharpBag.Networking.TcpClientHandler.Disconnected">
            <summary>
            An event that is fired when the TcpClient disconnects.
            </summary>
        </member>
        <member name="T:SharpBag.Comparers.AlphaNumberComparer">
            <summary>
            A comparer that compares a string containing numbers.
            </summary>
        </member>
        <member name="M:SharpBag.Comparers.AlphaNumberComparer.#ctor(SharpBag.Comparers.AlphaNumberSettings)">
            <summary>
            The constructor.
            </summary>
            <param name="location">The location of the number.</param>
        </member>
        <member name="M:SharpBag.Comparers.AlphaNumberComparer.Compare(System.String,System.String)">
            <summary>
            IComparer{T}.Compare(T, T)
            </summary>
        </member>
        <member name="M:SharpBag.Comparers.AlphaNumberComparer.FindTrailingNumber(System.String)">
            <summary>
            Finds a trailing number.
            </summary>
            <param name="s">The string to search in.</param>
            <returns>The number.</returns>
        </member>
        <member name="M:SharpBag.Comparers.AlphaNumberComparer.FindLeadingNumber(System.String)">
            <summary>
            Finds a leading number.
            </summary>
            <param name="s">The string to search in.</param>
            <returns>The number.</returns>
        </member>
        <member name="P:SharpBag.Comparers.AlphaNumberComparer.Location">
            <summary>
            The location of the number.
            </summary>
            <remarks>Igor Ostrovsky - http://igoro.com/archive/extended-linq-additional-operators-for-linq-to-objects/</remarks>
        </member>
        <member name="T:SharpBag.Collections.MaxHeap`1">
            <summary>
            A max heap.
            </summary>
            <typeparam name="T">The type of items in the heap.</typeparam>
        </member>
        <member name="M:SharpBag.Collections.MaxHeap`1.#ctor">
            <summary>
            The constructor.
            </summary>
        </member>
        <member name="M:SharpBag.Collections.MaxHeap`1.#ctor(System.Int32)">
            <summary>
            The constructor.
            </summary>
            <param name="capacity">The capacity of the heap.</param>
        </member>
        <member name="M:SharpBag.Collections.MaxHeap`1.#ctor(`0[])">
            <summary>
            The constructor.
            </summary>
            <param name="array">The items.</param>
        </member>
        <member name="M:SharpBag.Collections.MaxHeap`1.Compare(System.Int32,System.Int32)">
            <summary>
            The item comparer.
            </summary>
            <param name="firstIndex">The index of the first item.</param>
            <param name="secondIndex">The index of the second item.</param>
            <returns>The order of the items.</returns>
        </member>
        <member name="M:SharpBag.Collections.MaxHeap`1.Contains(`0)">
            <summary>
            Whether the heap contains the item.
            </summary>
            <param name="item">The item.</param>
            <returns>Whether the heap contains the item.</returns>
        </member>
        <member name="M:SharpBag.Collections.MaxHeap`1.Sort(`0[])">
            <summary>
            Heapsort the array.
            </summary>
            <param name="array">The array.</param>
            <returns>The sorted array.</returns>
        </member>
        <member name="M:SharpBag.Collections.MaxHeap`1.SortDescending(`0[])">
            <summary>
            Heapsort the array, in descending order.
            </summary>
            <param name="array">The array.</param>
            <returns>The sorted array.</returns>
        </member>
        <member name="T:SharpBag.Networking.PacketEventArgs">
            <summary>
            Packet-event arguments.
            </summary>
        </member>
        <member name="M:SharpBag.Networking.PacketEventArgs.#ctor(SharpBag.Networking.ConnectionPacket,SharpBag.Networking.ConnectionHandler)">
            <summary>
            The constructor.
            </summary>
            <param name="packet">The packet.</param>
            <param name="connection">The connection handler.</param>
        </member>
        <member name="P:SharpBag.Networking.PacketEventArgs.Connection">
            <summary>
            The connection handler.
            </summary>
        </member>
        <member name="P:SharpBag.Networking.PacketEventArgs.EventID">
            <summary>
            The ID of the event.
            </summary>
        </member>
        <member name="T:SharpBag.Misc.ProblemAttribute">
            <summary>
            A problem.
            </summary>
        </member>
        <member name="M:SharpBag.Misc.ProblemAttribute.#ctor(System.String)">
            <summary>
            The constructor.
            </summary>
            <param name="title">The title of the problem.</param>
        </member>
        <member name="P:SharpBag.Misc.ProblemAttribute.Title">
            <summary>
            The title of the problem.
            </summary>
        </member>
        <member name="P:SharpBag.Misc.ProblemAttribute.Description">
            <summary>
            The description of the problem.
            </summary>
        </member>
        <member name="P:SharpBag.Misc.ProblemAttribute.Time">
            <summary>
            Whether to time the problem.
            </summary>
        </member>
        <member name="P:SharpBag.Misc.ProblemAttribute.Finished">
            <summary>
            Whether the problem is finished.
            </summary>
        </member>
        <member name="P:SharpBag.Misc.ProblemAttribute.Pause">
            <summary>
            Whether to pause after the problem has finished running.
            </summary>
        </member>
        <member name="P:SharpBag.Misc.ProblemAttribute.Start">
            <summary>
            Whether to run the problem on start.
            </summary>
        </member>
        <member name="T:SharpBag.Strings.StringExtensions">
            <summary>
            Extension methods for strings.
            </summary>
        </member>
        <member name="M:SharpBag.Strings.StringExtensions.Reverse(System.String)">
            <summary>
            Reverses the current string instance.
            </summary>
            <param name="s">The current instance.</param>
            <returns>The current string instance reversed.</returns>
        </member>
        <member name="M:SharpBag.Strings.StringExtensions.ReverseXor(System.String)">
            <summary>
            Reverses the current string instance using XORing.
            </summary>
            <param name="s">The current instance.</param>
            <returns>The current string instance reversed.</returns>
        </member>
        <member name="M:SharpBag.Strings.StringExtensions.ToStringPretty``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String,System.String)">
            <summary>
            Outputs the enumerable as a pretty string.
            </summary>
            <typeparam name="T">The type of elements.</typeparam>
            <param name="source">The current instance.</param>
            <param name="before">A string to prepend to the output.</param>
            <param name="delimiter">A string to insert in between the elements.</param>
            <param name="after">A string to append to the output.</param>
            <returns>The current instance as a pretty string.</returns>
        </member>
        <member name="M:SharpBag.Strings.StringExtensions.ToTitleCase(System.String)">
            <summary>
            Converts the current instance to title case.
            </summary>
            <param name="text">The current instance.</param>
            <returns>The current instance with title case.</returns>
        </member>
        <member name="M:SharpBag.Strings.StringExtensions.Wordify(System.String)">
            <summary>
            Takes a camelCase or a PascalCase string and splits it up into words.
            </summary>
            <param name="s">A camelCase or a PascalCase string.</param>
            <returns>The words.</returns>
        </member>
        <member name="M:SharpBag.Strings.StringExtensions.Capitalize(System.String)">
            <summary>
            Capitalizes the current instance.
            </summary>
            <param name="word">The current instance.</param>
            <returns>The capitalized string.</returns>
        </member>
        <member name="M:SharpBag.Strings.StringExtensions.Format(System.String,System.Object[])">
            <summary>
            String.Format(string, object[])
            </summary>
        </member>
        <member name="M:SharpBag.Strings.StringExtensions.ReplaceAll(System.String,System.String,System.String)">
            <summary>
            Returns a new string in which all occurrences of a specified string in the current instance are replaced with another specified string repeatedly until the new string no longer contains the specified string.
            </summary>
            <param name="s">The current instance.</param>
            <param name="oldValue">The string to be replaced.</param>
            <param name="newValue">The string to replace all occurrences of oldValue.</param>
            <returns>A string that is equivalent to the current string except that all instances of oldValue are repeatedly replaced with newValue until the new string no longer contains oldValue.</returns>
        </member>
        <member name="M:SharpBag.Strings.StringExtensions.ToUpper(System.Char)">
            <summary>
            Returns a copy of this System.Char converted to uppercase, using the casing rules of the current culture.
            </summary>
            <param name="c">The current instance.</param>
            <returns>A copy of this System.Char converted to uppercase.</returns>
        </member>
        <member name="M:SharpBag.Strings.StringExtensions.ToLower(System.Char)">
            <summary>
            Returns a copy of this System.Char converted to lowercase, using the casing rules of the current culture.
            </summary>
            <param name="c">The current instance.</param>
            <returns>A copy of this System.Char converted to lowercase.</returns>
        </member>
        <member name="M:SharpBag.Strings.StringExtensions.CompareTo(System.String,System.String,System.Char[],System.Boolean)">
            <summary>
            Compares the current instance to another string using the specified char array to determine the results.
            </summary>
            <param name="s">The current instance.</param>
            <param name="b">The string to compare to.</param>
            <param name="c">The char array.</param>
            <param name="caseSensitive">Whether or not the comparison is case-sensitive.</param>
            <returns>Whether the current instance is less than, equal to or greater than the specified string.</returns>
        </member>
        <member name="M:SharpBag.Strings.StringExtensions.CompareTo(System.Char,System.Char,System.Char[])">
            <summary>
            Compares the current instance to another char using the specified char array to determine the results.
            </summary>
            <param name="a">The current instance.</param>
            <param name="b">The char to compare to.</param>
            <param name="c">The char array.</param>
            <returns>Whether the current instance is less than, equal to or greater than the specified char.</returns>
        </member>
        <member name="M:SharpBag.Strings.StringExtensions.DistanceTo(System.String,System.String,System.Boolean)">
            <summary>
            Calculates the edit distance between the current instance and the specified string.
            </summary>
            <param name="s">The current instance.</param>
            <param name="t">The string to compare to.</param>
            <param name="caseSensitive">Whether or not to perform a case sensitive comparison.</param>
            <returns>The edit distance between the current instance and the specified string.</returns>
        </member>
        <member name="M:SharpBag.Strings.StringExtensions.EqualsIgnoreCase(System.String,System.String)">
            <summary>
            Whether the current instance equals the specified string, if case is ignored.
            </summary>
            <param name="a">The current instance.</param>
            <param name="b">A string.</param>
            <returns>Whether the current instance equals the specified string, if case is ignored.</returns>
        </member>
        <member name="M:SharpBag.Strings.StringExtensions.StartsWithIgnoreCase(System.String,System.String)">
            <summary>
            Whether the current instance starts with the specified string, if case is ignored.
            </summary>
            <param name="a">The current instance.</param>
            <param name="b">A string.</param>
            <returns>Whether the current instance starts with the specified string, if case is ignored.</returns>
        </member>
        <member name="M:SharpBag.Strings.StringExtensions.EndsWithIgnoreCase(System.String,System.String)">
            <summary>
            Whether the current instance ends with the specified string, if case is ignored.
            </summary>
            <param name="a">The current instance.</param>
            <param name="b">A string.</param>
            <returns>Whether the current instance ends with the specified string, if case is ignored.</returns>
        </member>
        <member name="M:SharpBag.Strings.StringExtensions.ContainsIgnoreCase(System.String,System.String)">
            <summary>
            Whether the current instance contains the specified string, if case is ignored.
            </summary>
            <param name="a">The current instance.</param>
            <param name="b">A string.</param>
            <returns>Whether the current instance contains the specified string, if case is ignored.</returns>
        </member>
        <member name="M:SharpBag.Strings.StringExtensions.ToUpperLowerNameVariant(System.String)">
            <summary>
            Returns the current instance in an upper-lower name variant.
            </summary>
            <param name="value">The current instance.</param>
            <returns>The current instance in an upper-lower name variant.</returns>
        </member>
        <member name="M:SharpBag.Strings.StringExtensions.Encrypt(System.String,System.String)">
            <summary>
            Encrypts a string using the supplied key. Encoding is done using RSA encryption.
            </summary>
            <param name="stringToEncrypt">String that must be encrypted.</param>
            <param name="key">An encryption key.</param>
            <returns>A string representing a byte array separated by a minus sign.</returns>
            <exception cref="T:System.ArgumentException">Occurs when stringToEncrypt or key is null or empty.</exception>
        </member>
        <member name="M:SharpBag.Strings.StringExtensions.Decrypt(System.String,System.String)">
            <summary>
            Decrypts a string using the supplied key. Decoding is done using RSA encryption.
            </summary>
            <param name="stringToDecrypt">String that must be decrypted.</param>
            <param name="key">Decryption key.</param>
            <returns>The decrypted string or null if decryption failed.</returns>
            <exception cref="T:System.ArgumentException">Occurs when stringToDecrypt or key is null or empty.</exception>
        </member>
        <member name="M:SharpBag.Strings.StringExtensions.Times(System.Int32,System.String)">
            <summary>
            Repeats the specified string N times.
            </summary>
            <param name="n">The current instance.</param>
            <param name="s">The specified string.</param>
            <returns>The repeated string.</returns>
        </member>
        <member name="M:SharpBag.Strings.StringExtensions.Times(System.Int32,System.String,System.String)">
            <summary>
            Repeats the specified string N times.
            </summary>
            <param name="n">The current instance.</param>
            <param name="s">The specified string.</param>
            <param name="separator">A separator to put between strings.</param>
            <returns>The repeated string.</returns>
        </member>
        <member name="M:SharpBag.Strings.StringExtensions.SetCharAt(System.String,System.Int32,System.Char)">
            <summary>
            Replaces the character at the specified index in the specified string, with the specified character.
            </summary>
            <param name="s">The specified string.</param>
            <param name="i">The index to replace.</param>
            <param name="c">The character to replace with.</param>
            <returns>The new string.</returns>
        </member>
        <member name="T:SharpBag.Networking.Host">
            <summary>
            A network host.
            </summary>
        </member>
        <member name="M:SharpBag.Networking.Host.#ctor(System.Int32)">
            <summary>
            Create a new host.
            </summary>
            <param name="port">The port to listen to.</param>
        </member>
        <member name="M:SharpBag.Networking.Host.Open">
            <summary>
            Start listening.
            </summary>
        </member>
        <member name="M:SharpBag.Networking.Host.SendAll(SharpBag.Networking.ConnectionPacket)">
            <summary>
            Send the specified packet to all clients.
            </summary>
            <param name="packet">The packet to send.</param>
        </member>
        <member name="M:SharpBag.Networking.Host.Close">
            <summary>
            Stop listening.
            </summary>
        </member>
        <member name="M:SharpBag.Networking.Host.Dispose">
            <see cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:SharpBag.Networking.Host.Fire``1(System.Int32,``0)">
            <summary>
            Fire the specified event on the client.
            </summary>
            <typeparam name="T">The type of data to send.</typeparam>
            <param name="eventID">The ID of the event.</param>
            <param name="obj">The data to send.</param>
            <returns>The current instance (for chaining).</returns>
        </member>
        <member name="M:SharpBag.Networking.Host.Fire(System.Int32)">
            <summary>
            Fire the specified event on the client.
            </summary>
            <param name="eventID">The ID of the event.</param>
            <returns>The current instance (for chaining).</returns>
        </member>
        <member name="P:SharpBag.Networking.Host.Opened">
            <summary>
            Whether the connection has been opened.
            </summary>
        </member>
        <member name="E:SharpBag.Networking.Host.OnClientConnected">
            <summary>
            An event that is fired when a client connects.
            </summary>
        </member>
        <member name="T:SharpBag.Games.Dice">
            <summary>
            A dice.
            </summary>
        </member>
        <member name="M:SharpBag.Games.Dice.#ctor(System.Int32)">
            <summary>
            Creates a new dice.
            </summary>
            <param name="sides">The number of sides on the dice.</param>
        </member>
        <member name="M:SharpBag.Games.Dice.#ctor(System.Random,System.Int32)">
            <summary>
            Creates a new dice.
            </summary>
            <param name="rand">The random number generator.</param>
            <param name="sides">The number of sides on the dice.</param>
        </member>
        <member name="M:SharpBag.Games.Dice.Throw">
            <summary>
            Throw the dice.
            </summary>
            <returns>The number on the top of the dice.</returns>
        </member>
        <member name="P:SharpBag.Games.Dice.Sides">
            <summary>
            The numer of sides on the dice.
            </summary>
        </member>
        <member name="P:SharpBag.Games.Dice.Rand">
            <summary>
            The random number generator.
            </summary>
        </member>
        <member name="T:SharpBag.Torrent.BencodeDecoder">
            <summary>
            A class used for decoding Bencoding.
            </summary>
        </member>
        <member name="M:SharpBag.Torrent.BencodeDecoder.#ctor(System.String)">
            <summary>
            The main constructor.
            </summary>
            <param name="s">The bencoded string to decode.</param>
        </member>
        <member name="M:SharpBag.Torrent.BencodeDecoder.Decode(System.String)">
            <summary>
            Decodes the specified string.
            </summary>
            <param name="s">The specified string.</param>
            <returns>An array of the root elements.</returns>
        </member>
        <member name="M:SharpBag.Torrent.BencodeDecoder.Decode">
            <summary>
            Decodes the string.
            </summary>
            <returns>An array of root elements.</returns>
        </member>
        <member name="M:SharpBag.Torrent.BencodeDecoder.ReadElement">
            <summary>
            Reads and element.
            </summary>
            <returns>The element that was read.</returns>
        </member>
        <member name="M:SharpBag.Torrent.BencodeDecoder.ReadDictionary">
            <summary>
            Reads a dictionary.
            </summary>
            <returns>The dictionary that was read.</returns>
        </member>
        <member name="M:SharpBag.Torrent.BencodeDecoder.ReadList">
            <summary>
            Reads a list.
            </summary>
            <returns>The list that was read.</returns>
        </member>
        <member name="M:SharpBag.Torrent.BencodeDecoder.ReadInteger">
            <summary>
            Reads an integer.
            </summary>
            <returns>The integer that was read.</returns>
        </member>
        <member name="M:SharpBag.Torrent.BencodeDecoder.ReadString">
            <summary>
            Reads a string.
            </summary>
            <returns>The string that was read.</returns>
        </member>
        <member name="M:SharpBag.Torrent.BencodeDecoder.Error(System.Exception)">
            <summary>
            Generates an error.
            </summary>
            <param name="e">The inner exception.</param>
            <returns>An exception that can then be thrown.</returns>
        </member>
        <member name="M:SharpBag.Torrent.BencodeDecoder.Error">
            <summary>
            Generates an error.
            </summary>
            <returns>An exception that can then be thrown.</returns>
        </member>
        <member name="P:SharpBag.Torrent.BencodeDecoder.Index">
            <summary>
            Where the reader will start reading next.
            </summary>
        </member>
        <member name="P:SharpBag.Torrent.BencodeDecoder.BencodedString">
            <summary>
            The bencoded string.
            </summary>
        </member>
        <member name="T:SharpBag.Torrent.BElement">
            <summary>
            An interface for bencoded elements.
            </summary>
        </member>
        <member name="M:SharpBag.Torrent.BElement.ToBencodedString">
            <summary>
            Generates the bencoded equivalent of the element.
            </summary>
            <returns>The bencoded equivalent of the element.</returns>
        </member>
        <member name="M:SharpBag.Torrent.BElement.ToBencodedString(System.Text.StringBuilder)">
            <summary>
            Generates the bencoded equivalent of the element.
            </summary>
            <param name="u">The StringBuilder to append to.</param>
            <returns>The bencoded equivalent of the element.</returns>
        </member>
        <member name="T:SharpBag.Torrent.BInteger">
            <summary>
            A bencode integer.
            </summary>
        </member>
        <member name="M:SharpBag.Torrent.BInteger.op_Implicit(System.Int32)~SharpBag.Torrent.BInteger">
            <summary>
            Allows you to set an integer to a BInteger.
            </summary>
            <param name="i">The integer.</param>
            <returns>The BInteger.</returns>
        </member>
        <member name="M:SharpBag.Torrent.BInteger.#ctor(System.Int64)">
            <summary>
            The main constructor.
            </summary>
            <param name="value">The value of the bencoded integer.</param>
        </member>
        <member name="M:SharpBag.Torrent.BInteger.ToBencodedString">
            <summary>
            Generates the bencoded equivalent of the integer.
            </summary>
            <returns>The bencoded equivalent of the integer.</returns>
        </member>
        <member name="M:SharpBag.Torrent.BInteger.ToBencodedString(System.Text.StringBuilder)">
            <summary>
            Generates the bencoded equivalent of the integer.
            </summary>
            <returns>The bencoded equivalent of the integer.</returns>
        </member>
        <member name="M:SharpBag.Torrent.BInteger.GetHashCode">
            <see cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:SharpBag.Torrent.BInteger.Equals(System.Object)">
            <summary>
            Int32.Equals(object)
            </summary>
        </member>
        <member name="M:SharpBag.Torrent.BInteger.ToString">
            <see cref="M:System.Object.ToString"/>
        </member>
        <member name="M:SharpBag.Torrent.BInteger.CompareTo(SharpBag.Torrent.BInteger)">
            <see cref="M:System.IComparable.CompareTo(System.Object)"/>
        </member>
        <member name="P:SharpBag.Torrent.BInteger.Value">
            <summary>
            The value of the bencoded integer.
            </summary>
        </member>
        <member name="T:SharpBag.Torrent.BString">
            <summary>
            A bencode string.
            </summary>
        </member>
        <member name="M:SharpBag.Torrent.BString.op_Implicit(System.String)~SharpBag.Torrent.BString">
            <summary>
            Allows you to set a string to a BString.
            </summary>
            <param name="s">The string.</param>
            <returns>The BString.</returns>
        </member>
        <member name="M:SharpBag.Torrent.BString.#ctor(System.String)">
            <summary>
            The main constructor.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:SharpBag.Torrent.BString.ToBencodedString">
            <summary>
            Generates the bencoded equivalent of the string.
            </summary>
            <returns>The bencoded equivalent of the string.</returns>
        </member>
        <member name="M:SharpBag.Torrent.BString.ToBencodedString(System.Text.StringBuilder)">
            <summary>
            Generates the bencoded equivalent of the string.
            </summary>
            <param name="u">The StringBuilder to append to.</param>
            <returns>The bencoded equivalent of the string.</returns>
        </member>
        <member name="M:SharpBag.Torrent.BString.GetHashCode">
            <see cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:SharpBag.Torrent.BString.Equals(System.Object)">
            <summary>
            String.Equals(object)
            </summary>
        </member>
        <member name="M:SharpBag.Torrent.BString.ToString">
            <see cref="M:System.Object.ToString"/>
        </member>
        <member name="M:SharpBag.Torrent.BString.CompareTo(SharpBag.Torrent.BString)">
            <see cref="M:System.IComparable.CompareTo(System.Object)"/>
        </member>
        <member name="P:SharpBag.Torrent.BString.Value">
            <summary>
            The value of the bencoded integer.
            </summary>
        </member>
        <member name="T:SharpBag.Torrent.BList">
            <summary>
            A bencode list.
            </summary>
        </member>
        <member name="M:SharpBag.Torrent.BList.ToBencodedString">
            <summary>
            Generates the bencoded equivalent of the list.
            </summary>
            <returns>The bencoded equivalent of the list.</returns>
        </member>
        <member name="M:SharpBag.Torrent.BList.ToBencodedString(System.Text.StringBuilder)">
            <summary>
            Generates the bencoded equivalent of the list.
            </summary>
            <param name="u">The StringBuilder to append to.</param>
            <returns>The bencoded equivalent of the list.</returns>
        </member>
        <member name="M:SharpBag.Torrent.BList.Add(System.String)">
            <summary>
            Adds the specified value to the list.
            </summary>
            <param name="value">The specified value.</param>
        </member>
        <member name="M:SharpBag.Torrent.BList.Add(System.Int32)">
            <summary>
            Adds the specified value to the list.
            </summary>
            <param name="value">The specified value.</param>
        </member>
        <member name="T:SharpBag.Torrent.BDictionary">
            <summary>
            A bencode dictionary.
            </summary>
        </member>
        <member name="M:SharpBag.Torrent.BDictionary.ToBencodedString">
            <summary>
            Generates the bencoded equivalent of the dictionary.
            </summary>
            <returns>The bencoded equivalent of the dictionary.</returns>
        </member>
        <member name="M:SharpBag.Torrent.BDictionary.ToBencodedString(System.Text.StringBuilder)">
            <summary>
            Generates the bencoded equivalent of the dictionary.
            </summary>
            <param name="u">The StringBuilder to append to.</param>
            <returns>The bencoded equivalent of the dictionary.</returns>
        </member>
        <member name="M:SharpBag.Torrent.BDictionary.Add(System.String,SharpBag.Torrent.BElement)">
            <summary>
            Adds the specified key-value pair to the dictionary.
            </summary>
            <param name="key">The specified key.</param>
            <param name="value">The specified value.</param>
        </member>
        <member name="M:SharpBag.Torrent.BDictionary.Add(System.String,System.String)">
            <summary>
            Adds the specified key-value pair to the dictionary.
            </summary>
            <param name="key">The specified key.</param>
            <param name="value">The specified value.</param>
        </member>
        <member name="M:SharpBag.Torrent.BDictionary.Add(System.String,System.Int32)">
            <summary>
            Adds the specified key-value pair to the dictionary.
            </summary>
            <param name="key">The specified key.</param>
            <param name="value">The specified value.</param>
        </member>
        <member name="P:SharpBag.Torrent.BDictionary.Item(System.String)">
            <summary>
            Gets or sets the value assosiated with the specified key.
            </summary>
            <param name="key">The key of the value to get or set.</param>
            <returns>The value assosiated with the specified key.</returns>
        </member>
        <member name="T:SharpBag.Torrent.BencodingException">
            <summary>
            A bencoding exception.
            </summary>
        </member>
        <member name="M:SharpBag.Torrent.BencodingException.#ctor">
            <summary>
            Creates a new BencodingException.
            </summary>
        </member>
        <member name="M:SharpBag.Torrent.BencodingException.#ctor(System.String)">
            <summary>
            Creates a new BencodingException.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:SharpBag.Torrent.BencodingException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new BencodingException.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="T:SharpBag.Torrent.BencodingExtensions">
            <summary>
            A class with extension methods for use with Bencoding.
            </summary>
        </member>
        <member name="M:SharpBag.Torrent.BencodingExtensions.BDecode(System.String)">
            <summary>
            Decode the current instance.
            </summary>
            <param name="s">The current instance.</param>
            <returns>The root elements of the decoded string.</returns>
        </member>
        <member name="T:SharpBag.Math.ForInt64.Fraction">
            <summary>
            A rational fraction.
            </summary>
            <remarks>http://www.codeproject.com/KB/recipes/fractiion.aspx</remarks>
        </member>
        <member name="F:SharpBag.Math.ForInt64.Fraction.PositiveOne">
            <summary>
            A fraction that represents positive one.
            </summary>
        </member>
        <member name="F:SharpBag.Math.ForInt64.Fraction.NegativeOne">
            <summary>
            A fraction that represents negative one.
            </summary>
        </member>
        <member name="F:SharpBag.Math.ForInt64.Fraction.Zero">
            <summary>
            A fraction that represents zero.
            </summary>
        </member>
        <member name="F:SharpBag.Math.ForInt64.Fraction.PositiveInfinity">
            <summary>
            A fraction that represents positive infinity.
            </summary>
        </member>
        <member name="F:SharpBag.Math.ForInt64.Fraction.NegativeInfinity">
            <summary>
            A fraction that represents negative infinity.
            </summary>
        </member>
        <member name="F:SharpBag.Math.ForInt64.Fraction.NaN">
            <summary>
            A fraction that represents NaN (not a number).
            </summary>
        </member>
        <member name="F:SharpBag.Math.ForInt64.Fraction.MaxValue">
            <summary>
            A fraction that represents the maximum value of a fraction.
            </summary>
        </member>
        <member name="F:SharpBag.Math.ForInt64.Fraction.MinValue">
            <summary>
            A fraction that represents the minimum value of a fraction.
            </summary>
        </member>
        <member name="M:SharpBag.Math.ForInt64.Fraction.IsNaN(SharpBag.Math.ForInt64.Fraction)">
            <summary>
            Determines whether the fraction is NaN.
            </summary>
            <param name="fraction">The fraction.</param>
            <returns>Whether the fraction is NaN.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt64.Fraction.IsPositiveInfinity(SharpBag.Math.ForInt64.Fraction)">
            <summary>
            Determines whether the fraction is positive infinity.
            </summary>
            <param name="fraction">The fraction.</param>
            <returns>Whether the fraction is positive infinity.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt64.Fraction.IsNegativeInfinity(SharpBag.Math.ForInt64.Fraction)">
            <summary>
            Determines whether the fraction is negative infinity.
            </summary>
            <param name="fraction">The fraction.</param>
            <returns>Whether the fraction is negative infinity.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt64.Fraction.IsInfinity(SharpBag.Math.ForInt64.Fraction)">
            <summary>
            Determines whether the fraction is infinity.
            </summary>
            <param name="fraction">The fraction.</param>
            <returns>Whether the fraction is infinity.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt64.Fraction.PartialQuotientsOfSquareRootOf(System.Int64)">
            <summary>
            Returns the partial quotients of the square root of the specified number.
            </summary>
            <param name="s">The number.</param>
            <returns>The partial quotients of the square root of the specified number.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt64.Fraction.RecurringCycle(SharpBag.Math.ForInt64.Fraction)">
            <summary>
            Finds the recurring cycle of the specified fraction.
            </summary>
            <param name="fraction">The specified fraction.</param>
            <returns>The cycle start and cycle length. Null if no cycle was found.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt64.Fraction.Pow(SharpBag.Math.ForInt64.Fraction,System.Int32)">
            <summary>
            Raises the fraction to the specified power.
            </summary>
            <param name="fraction">The fraction.</param>
            <param name="power">The power.</param>
            <returns>The fraction raised to the specified power.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt64.Fraction.Sqrt(SharpBag.Math.ForInt64.Fraction)">
            <summary>
            Computes the square root of the fraction.
            </summary>
            <param name="fraction">The fraction.</param>
            <returns>The square root.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt64.Fraction.#ctor(System.Int64,System.Int64)">
            <summary>
            The constructor.
            </summary>
            <param name="numerator">The numerator.</param>
            <param name="denominator">The denominator.</param>
        </member>
        <member name="M:SharpBag.Math.ForInt64.Fraction.#ctor(System.Int64,System.Int64,System.Boolean)">
            <summary>
            The constructor.
            </summary>
            <param name="numerator">The numerator.</param>
            <param name="denominator">The denominator.</param>
            <param name="autoReduce">Whether to automatically reduce the fraction.</param>
        </member>
        <member name="M:SharpBag.Math.ForInt64.Fraction.#ctor(System.Int64)">
            <summary>
            The constructor.
            </summary>
            <param name="wholeNumber">The number of wholes.</param>
        </member>
        <member name="M:SharpBag.Math.ForInt64.Fraction.#ctor(System.Int64,System.Boolean)">
            <summary>
            The constructor.
            </summary>
            <param name="wholeNumber">The number of wholes.</param>
            <param name="autoReduce">Whether to automatically reduce the fraction.</param>
        </member>
        <member name="M:SharpBag.Math.ForInt64.Fraction.#ctor(SharpBag.Math.ForInt64.Fraction,SharpBag.Math.ForInt64.Fraction)">
            <summary>
            The constructor.
            </summary>
            <param name="numerator">The numerator.</param>
            <param name="denominator">The denominator.</param>
        </member>
        <member name="M:SharpBag.Math.ForInt64.Fraction.#ctor(SharpBag.Math.Fraction{System.Int64})">
            <summary>
            The constructor.
            </summary>
            <param name="other">Another fraction to copy.</param>
        </member>
        <member name="M:SharpBag.Math.ForInt64.Fraction.FromPartialQuotients(System.Int64[])">
            <summary>
            Returns the fraction represented by the partial quotients.
            </summary>
            <param name="terms">The partial quotients of the continued fraction.</param>
            <returns>The fraction represented by the partial quotients.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt64.Fraction.FromFloatingPoint(System.Double)">
            <summary>
            Returns the fraction represented by the floting point number.
            </summary>
            <param name="value">The floating point number.</param>
            <returns>The fraction represented by the floting point number.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt64.Fraction.Parse(System.String)">
            <summary>
            Parse the specified string.
            </summary>
            <param name="fraction">The fraction as a string.</param>
            <returns>The parsed fraction.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt64.Fraction.op_Addition(SharpBag.Math.ForInt64.Fraction,SharpBag.Math.ForInt64.Fraction)">
            <summary>
            The addition operator.
            </summary>
            <param name="left">The left fraction.</param>
            <param name="right">The right fraction.</param>
            <returns>The added fractions.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt64.Fraction.op_Subtraction(SharpBag.Math.ForInt64.Fraction,SharpBag.Math.ForInt64.Fraction)">
            <summary>
            The subtraction operator.
            </summary>
            <param name="left">The left fraction.</param>
            <param name="right">The right fraction.</param>
            <returns>The subtracted fractions.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt64.Fraction.op_UnaryNegation(SharpBag.Math.ForInt64.Fraction)">
            <summary>
            The negation operator.
            </summary>
            <param name="fraction">The fraction.</param>
            <returns>The negated fraction.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt64.Fraction.op_Multiply(SharpBag.Math.ForInt64.Fraction,SharpBag.Math.ForInt64.Fraction)">
            <summary>
            The multiplication operator.
            </summary>
            <param name="left">The left fraction.</param>
            <param name="right">The right fraction.</param>
            <returns>The fractions multiplied.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt64.Fraction.op_Division(SharpBag.Math.ForInt64.Fraction,SharpBag.Math.ForInt64.Fraction)">
            <summary>
            The division operator.
            </summary>
            <param name="left">The left fraction.</param>
            <param name="right">The right fraction.</param>
            <returns>The fractions divided.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt64.Fraction.op_Modulus(SharpBag.Math.ForInt64.Fraction,SharpBag.Math.ForInt64.Fraction)">
            <summary>
            The modulo operator.
            </summary>
            <param name="left">The left fraction.</param>
            <param name="right">The right fraction.</param>
            <returns>The left fraction modulo the right fraction.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt64.Fraction.op_GreaterThan(SharpBag.Math.ForInt64.Fraction,SharpBag.Math.ForInt64.Fraction)">
            <summary>
            The greater than operator.
            </summary>
            <param name="left">The left fraction.</param>
            <param name="right">The right fraction.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt64.Fraction.op_GreaterThanOrEqual(SharpBag.Math.ForInt64.Fraction,SharpBag.Math.ForInt64.Fraction)">
            <summary>
            The greater than or equal to operator.
            </summary>
            <param name="left">The left fraction.</param>
            <param name="right">The right fraction.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt64.Fraction.op_LessThan(SharpBag.Math.ForInt64.Fraction,SharpBag.Math.ForInt64.Fraction)">
            <summary>
            The less than operator.
            </summary>
            <param name="left">The left fraction.</param>
            <param name="right">The right fraction.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt64.Fraction.op_LessThanOrEqual(SharpBag.Math.ForInt64.Fraction,SharpBag.Math.ForInt64.Fraction)">
            <summary>
            The less than or equal to operator.
            </summary>
            <param name="left">The left fraction.</param>
            <param name="right">The right fraction.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt64.Fraction.op_Equality(SharpBag.Math.ForInt64.Fraction,SharpBag.Math.ForInt64.Fraction)">
            <summary>
            The equal operator.
            </summary>
            <param name="left">The left fraction.</param>
            <param name="right">The right fraction.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt64.Fraction.op_Inequality(SharpBag.Math.ForInt64.Fraction,SharpBag.Math.ForInt64.Fraction)">
            <summary>
            The not equal operator.
            </summary>
            <param name="left">The left fraction.</param>
            <param name="right">The right fraction.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt64.Fraction.Equals(SharpBag.Math.ForInt64.Fraction)">
            <summary>
            Whether the fractions are equal.
            </summary>
            <param name="other">Another fraction.</param>
            <returns>Whether the fractions are equal.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt64.Fraction.CompareTo(SharpBag.Math.ForInt64.Fraction)">
            <summary>
            Compare the fraction to another fraction.
            </summary>
            <param name="other">Another fraction.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt64.Fraction.AsInt32Fraction">
            <summary>
            Converts the fraction to an Int32 fraction.
            </summary>
            <returns>The converted fraction.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt64.Fraction.AsBigIntegerFraction">
            <summary>
            Converts the fraction to a BigInteger fraction.
            </summary>
            <returns>The converted fraction.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt64.Fraction.op_Implicit(System.Int32)~SharpBag.Math.ForInt64.Fraction">
            <summary>
            An implicit cast operator from an integer to a fraction.
            </summary>
            <param name="integer">The integer.</param>
            <returns>The fraction.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt64.Fraction.op_Implicit(System.Int64)~SharpBag.Math.ForInt64.Fraction">
            <summary>
            An implicit cast operator from an integer to a fraction.
            </summary>
            <param name="integer">The integer.</param>
            <returns>The fraction.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt64.Fraction.op_Explicit(System.Numerics.BigInteger)~SharpBag.Math.ForInt64.Fraction">
            <summary>
            An explicit cast operator from an integer to a fraction.
            </summary>
            <param name="integer">The integer.</param>
            <returns>The fraction.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt64.Fraction.op_Explicit(System.Double)~SharpBag.Math.ForInt64.Fraction">
            <summary>
            An explicit cast operator from a floating point number to a fraction.
            </summary>
            <param name="floatingPoint">The floating point number.</param>
            <returns>The fraction.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt64.Fraction.op_Explicit(SharpBag.Math.ForInt64.Fraction)~System.Int32">
            <summary>
            An explicit cast operator from a fraction to an integer.
            </summary>
            <param name="fraction">The fraction.</param>
            <returns>The integer.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt64.Fraction.op_Explicit(SharpBag.Math.ForInt64.Fraction)~System.Int64">
            <summary>
            An explicit cast operator from a fraction to a long integer.
            </summary>
            <param name="fraction">The fraction.</param>
            <returns>The long integer.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt64.Fraction.op_Explicit(SharpBag.Math.ForInt64.Fraction)~System.Numerics.BigInteger">
            <summary>
            An explicit cast operator from a fraction to a BigInteger.
            </summary>
            <param name="fraction">The fraction.</param>
            <returns>The BigInteger.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt64.Fraction.op_Explicit(SharpBag.Math.ForInt64.Fraction)~System.Double">
            <summary>
            An explicit cast operator from a fraction to a double.
            </summary>
            <param name="fraction">The fraction.</param>
            <returns>The double.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt64.Fraction.op_Explicit(SharpBag.Math.ForInt64.Fraction)~System.Decimal">
            <summary>
            An explicit cast operator from a fraction to a decimal.
            </summary>
            <param name="fraction">The fraction.</param>
            <returns>The decimal.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt64.Fraction.op_Explicit(SharpBag.Math.ForInt64.Fraction)~System.Single">
            <summary>
            An explicit cast operator from a fraction to a float.
            </summary>
            <param name="fraction">The fraction.</param>
            <returns>The float.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt64.Fraction.Clone">
            <summary>
            Clones the fraction.
            </summary>
            <returns>The cloned fraction.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt64.Fraction.GetHashCode">
            <summary>
            Object.GetHashCode()
            </summary>
            <returns>The hash code of the fraction.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt64.Fraction.Equals(System.Object)">
            <summary>
            Object.Equals()
            </summary>
            <param name="obj">The other object.</param>
            <returns>Whether the object are equal.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt64.Fraction.ToString">
            <summary>
            Object.ToString()
            </summary>
            <returns>The string representation of the fraction.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt64.Fraction.ToString(System.Int32)">
            <summary>
            Object.ToString()
            </summary>
            <param name="digits">The maximum number of digits after the comma.</param>
            <returns>The string representation of the fraction.</returns>
        </member>
        <member name="M:SharpBag.Math.ForInt64.Fraction.ToString(System.String,System.IFormatProvider)">
            <summary>
            IFormattable.ToString()
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>The formatted string.</returns>
            <remarks>
            Format string: type,digits
            Type is either D or C.
            D is the same as ToString(digits) where digits is the number of digits.
            C is is the same as C, but recurring cycles are treated specially.
            If digits is not present, 10 will be used.
            </remarks>
            <example>
            String.Format("{0}",     new Fraction(123, 999) / 100) == 41/33300
            String.Format("{0:C}",   new Fraction(123, 999) / 100) == 0,00(123)
            String.Format("{0:C,2}", new Fraction(123, 999) / 100) == 0,00(123)
            String.Format("{0:D}",   new Fraction(123, 999) / 100) == 0,0012312312
            String.Format("{0:D,2}", new Fraction(123, 999) / 100) == 0
            </example>
        </member>
        <member name="P:SharpBag.Math.ForInt64.Fraction.Numerator">
            <summary>
            The numerator.
            </summary>
        </member>
        <member name="P:SharpBag.Math.ForInt64.Fraction.Denominator">
            <summary>
            The denominator.
            </summary>
        </member>
        <member name="P:SharpBag.Math.ForInt64.Fraction.DefaultAutoReduce">
            <summary>
            The default value of auto-reduce.
            </summary>
        </member>
        <member name="P:SharpBag.Math.ForInt64.Fraction.AutoReduce">
            <summary>
            Whether to automatically reduce the fraction.
            </summary>
        </member>
        <member name="P:SharpBag.Math.ForInt64.Fraction.Reciprocal">
            <summary>
            Returns the reciprocal of the fraction.
            </summary>
        </member>
        <member name="P:SharpBag.Math.ForInt64.Fraction.Wholes">
            <summary>
            Returns the number of wholes in the fraction.
            </summary>
        </member>
        <member name="P:SharpBag.Math.ForInt64.Fraction.Remainder">
            <summary>
            Returns the remainder of the fraction.
            </summary>
        </member>
        <member name="P:SharpBag.Math.ForInt64.Fraction.Floor">
            <summary>
            Returns the floor of the fraction.
            </summary>
        </member>
        <member name="P:SharpBag.Math.ForInt64.Fraction.Ceiling">
            <summary>
            Returns the ceiling of the fraction.
            </summary>
        </member>
        <member name="P:SharpBag.Math.ForInt64.Fraction.Reduced">
            <summary>
            Returns the reduced version of the fraction.
            </summary>
        </member>
        <member name="P:SharpBag.Math.ForInt64.Fraction.PartialQuotients">
            <summary>
            Returns the partial quotients of the fraction.
            </summary>
        </member>
        <member name="T:SharpBag.Networking.Network">
            <summary>
            A static class with utilities for networking.
            </summary>
        </member>
        <member name="M:SharpBag.Networking.Network.IsPortFree(System.Int32)">
            <summary>
            Checks whether the specified port number is valid and not in use.
            </summary>
            <param name="port">The port.</param>
            <returns>Whether the specified port number is valid and not in use.</returns>
        </member>
        <member name="P:SharpBag.Networking.Network.LocalIPAddresses">
            <summary>
            Returns the local machines IP addresses.
            </summary>
        </member>
        <member name="T:SharpBag.IO.IOExtensions">
            <summary>
            A static class with IO extensions.
            </summary>
        </member>
        <member name="M:SharpBag.IO.IOExtensions.WriteLinesTo``1(System.Collections.Generic.IEnumerable{``0},System.IO.TextWriter)">
            <summary>
            Writes lines from the current instance to the specified TextWriter.
            </summary>
            <typeparam name="T">The type of the lines that will be written.</typeparam>
            <param name="lines">The current instance.</param>
            <param name="writer">The TextWriter to write to.</param>
            <remarks>Igor Ostrovsky - http://igoro.com/archive/extended-linq-additional-operators-for-linq-to-objects/</remarks>
        </member>
        <member name="M:SharpBag.IO.IOExtensions.WriteLinesToConsole``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Writes lines from the current instance to the console.
            </summary>
            <typeparam name="T">The type of the lines that will be written.</typeparam>
            <param name="lines">The current instance.</param>
            <remarks>Igor Ostrovsky - http://igoro.com/archive/extended-linq-additional-operators-for-linq-to-objects/</remarks>
        </member>
        <member name="M:SharpBag.IO.IOExtensions.WriteLinesToFile``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Writes lines from the current instance to the specified file.
            </summary>
            <typeparam name="T">The type of the lines that will be written.</typeparam>
            <param name="lines">The current instance.</param>
            <param name="path">The location of the file to write to.</param>
            <remarks>Igor Ostrovsky - http://igoro.com/archive/extended-linq-additional-operators-for-linq-to-objects/</remarks>
        </member>
        <member name="M:SharpBag.IO.IOExtensions.ReadLines(System.IO.TextReader)">
            <summary>
            Creates an enumerable that reads lines from the specified TextReader.
            </summary>
            <param name="reader">The TextReader to read from.</param>
            <returns>An enumerable that reads lines from the specified TextReader.</returns>
            <remarks>Igor Ostrovsky - http://igoro.com/archive/extended-linq-additional-operators-for-linq-to-objects/</remarks>
        </member>
        <member name="M:SharpBag.IO.IOExtensions.GetString(System.Byte[])">
            <summary>
            Converts a byte array to a string, using its byte order mark to convert it to the right encoding.
            </summary>
            <param name="buffer">The current instance.</param>
            <returns>The bytes as a string.</returns>
            <remarks>http://www.west-wind.com/WebLog/posts/197245.aspx</remarks>
        </member>
        <member name="M:SharpBag.IO.IOExtensions.XmlSerializeTo``1(``0,System.String)">
            <summary>
            Serializes the current instance using an xml serializer.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="obj">The current instance.</param>
            <param name="fileName">The file to serialize to.</param>
        </member>
        <member name="M:SharpBag.IO.IOExtensions.SerializeTo``1(``0,System.String)">
            <summary>
            Serializes the current instance using a binary serializer.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="obj">The current instance.</param>
            <param name="fileName">The file to serialize to.</param>
        </member>
        <member name="T:SharpBag.Math.ForDouble.Polynomial">
            <summary>
            A polynomial.
            </summary>
        </member>
        <member name="M:SharpBag.Math.ForDouble.Polynomial.#ctor">
            <summary>
            The constructor.
            </summary>
        </member>
        <member name="M:SharpBag.Math.ForDouble.Polynomial.#ctor(System.Double[])">
            <summary>
            The constructor.
            </summary>
            <param name="coefficients">The coefficients.</param>
        </member>
        <member name="M:SharpBag.Math.ForDouble.Polynomial.Evaluate(System.Double)">
            <summary>
            Evalute the polynomial at the specified x.
            </summary>
            <param name="x">The specified x.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:SharpBag.Math.ForDouble.Polynomial.op_Addition(SharpBag.Math.ForDouble.Polynomial,SharpBag.Math.ForDouble.Polynomial)">
            <summary>
            Add the specified polynomials.
            </summary>
            <param name="left">The left polynomial.</param>
            <param name="right">The right polynomial.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:SharpBag.Math.ForDouble.Polynomial.op_Subtraction(SharpBag.Math.ForDouble.Polynomial,SharpBag.Math.ForDouble.Polynomial)">
            <summary>
            Subtract the specified polynomials.
            </summary>
            <param name="left">The left polynomial.</param>
            <param name="right">The right polynomial.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:SharpBag.Math.ForDouble.Polynomial.op_Multiply(SharpBag.Math.ForDouble.Polynomial,SharpBag.Math.ForDouble.Polynomial)">
            <summary>
            Multiply the specified polynomials.
            </summary>
            <param name="left">The left polynomial.</param>
            <param name="right">The right polynomial.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:SharpBag.Math.ForDouble.Polynomial.op_Implicit(System.Double)~SharpBag.Math.ForDouble.Polynomial">
            <summary>
            An implicit cast to a polynomial.
            </summary>
            <param name="n">The value to cast.</param>
            <returns>The polynomial.</returns>
        </member>
        <member name="M:SharpBag.Math.ForDouble.Polynomial.Differentiate">
            <summary>
            Differentiates the polynomial.
            </summary>
            <returns>The differentiated polynomial.</returns>
        </member>
        <member name="M:SharpBag.Math.ForDouble.Polynomial.ToString">
            <summary>
            Object.ToString()
            </summary>
            <returns>The polynomial as a string.</returns>
        </member>
        <member name="P:SharpBag.Math.ForDouble.Polynomial.Degree">
            <summary>
            The degree of the polynomial.
            </summary>
        </member>
        <member name="P:SharpBag.Math.ForDouble.Polynomial.Item(System.Int32)">
            <summary>
            The i-th coefficient.
            </summary>
            <param name="i">The i.</param>
            <returns>The i-th coefficient.</returns>
        </member>
        <member name="T:SharpBag.Math.ForInt64.Point">
            <summary>
            A point.
            </summary>
        </member>
        <member name="M:SharpBag.Math.ForInt64.Point.#ctor(System.Int64,System.Int64)">
            <summary>
            The constructor.
            </summary>
            <param name="x">The X coordinate.</param>
            <param name="y">The Y coordinate.</param>
        </member>
        <member name="P:SharpBag.Math.ForInt64.Point.X">
            <summary>
            The X coordinate.
            </summary>
        </member>
        <member name="P:SharpBag.Math.ForInt64.Point.Y">
            <summary>
            The Y coordinate.
            </summary>
        </member>
        <member name="T:SharpBag.Matcher`2">
            <summary>
            A class for object matching.
            </summary>
            <typeparam name="TIn">The type to match.</typeparam>
            <typeparam name="TOut">The type of the result.</typeparam>
        </member>
        <member name="F:SharpBag.Matcher`2.Matchers">
            <summary>
            The matcher functions.
            </summary>
        </member>
        <member name="M:SharpBag.Matcher`2.#ctor(`0)">
            <summary>
            The constructor.
            </summary>
            <param name="value">The value to match.</param>
        </member>
        <member name="M:SharpBag.Matcher`2.When(`0,`1)">
            <summary>
            Adds a matcher and a result to the match evaluator.
            </summary>
            <param name="other">The matcher.</param>
            <param name="result">The result.</param>
            <returns>The current instance (for chaining).</returns>
        </member>
        <member name="M:SharpBag.Matcher`2.When(`0,System.Func{`1})">
            <summary>
            Adds a matcher and a result to the match evaluator.
            </summary>
            <param name="other">The matcher.</param>
            <param name="result">The result.</param>
            <returns>The current instance (for chaining).</returns>
        </member>
        <member name="M:SharpBag.Matcher`2.When(`0,System.Func{`0,`1})">
            <summary>
            Adds a matcher and a result to the match evaluator.
            </summary>
            <param name="other">The matcher.</param>
            <param name="result">The result.</param>
            <returns>The current instance (for chaining).</returns>
        </member>
        <member name="M:SharpBag.Matcher`2.When(System.Func{System.Boolean},`1)">
            <summary>
            Adds a matcher and a result to the match evaluator.
            </summary>
            <param name="func">The matcher.</param>
            <param name="result">The result.</param>
            <returns>The current instance (for chaining).</returns>
        </member>
        <member name="M:SharpBag.Matcher`2.When(System.Func{System.Boolean},System.Func{`1})">
            <summary>
            Adds a matcher and a result to the match evaluator.
            </summary>
            <param name="func">The matcher.</param>
            <param name="result">The result.</param>
            <returns>The current instance (for chaining).</returns>
        </member>
        <member name="M:SharpBag.Matcher`2.When(System.Func{System.Boolean},System.Func{`0,`1})">
            <summary>
            Adds a matcher and a result to the match evaluator.
            </summary>
            <param name="func">The matcher.</param>
            <param name="result">The result.</param>
            <returns>The current instance (for chaining).</returns>
        </member>
        <member name="M:SharpBag.Matcher`2.When(System.Func{`0,System.Boolean},`1)">
            <summary>
            Adds a matcher and a result to the match evaluator.
            </summary>
            <param name="func">The matcher.</param>
            <param name="result">The result.</param>
            <returns>The current instance (for chaining).</returns>
        </member>
        <member name="M:SharpBag.Matcher`2.When(System.Func{`0,System.Boolean},System.Func{`1})">
            <summary>
            Adds a matcher and a result to the match evaluator.
            </summary>
            <param name="func">The matcher.</param>
            <param name="result">The result.</param>
            <returns>The current instance (for chaining).</returns>
        </member>
        <member name="M:SharpBag.Matcher`2.When(System.Func{`0,System.Boolean},System.Func{`0,`1})">
            <summary>
            Adds a matcher and a result to the match evaluator.
            </summary>
            <param name="func">The matcher.</param>
            <param name="result">The result.</param>
            <returns>The current instance (for chaining).</returns>
        </member>
        <member name="M:SharpBag.Matcher`2.Default(`1)">
            <summary>
            Specifies what the default value of the match will be.
            </summary>
            <param name="value">The default value.</param>
            <returns>The current instance (for chaining).</returns>
        </member>
        <member name="M:SharpBag.Matcher`2.Default(System.Func{`1})">
            <summary>
            Specifies what the default value of the match will be.
            </summary>
            <param name="value">The default value.</param>
            <returns>The current instance (for chaining).</returns>
        </member>
        <member name="M:SharpBag.Matcher`2.Default(System.Func{`0,`1})">
            <summary>
            Specifies what the default value of the match will be.
            </summary>
            <param name="value">The default value.</param>
            <returns>The current instance (for chaining).</returns>
        </member>
        <member name="M:SharpBag.Matcher`2.EndMatch">
            <summary>
            Evaluates the match.
            </summary>
            <returns>The result.</returns>
        </member>
        <member name="P:SharpBag.Matcher`2.Value">
            <summary>
            The value to match.
            </summary>
        </member>
        <member name="P:SharpBag.Matcher`2.DefaultValue">
            <summary>
            The default value.
            </summary>
        </member>
        <member name="T:SharpBag.DisposableAction">
            <summary>
            Makes an action disposable.
            </summary>
        </member>
        <member name="M:SharpBag.DisposableAction.#ctor(System.Action)">
            <summary>
            The constructor.
            </summary>
            <param name="action">The action to execute when the current instance is disposed.</param>
        </member>
        <member name="M:SharpBag.DisposableAction.Dispose">
            <summary>
            The disposer which executes the dispose action.
            </summary>
        </member>
    </members>
</doc>
