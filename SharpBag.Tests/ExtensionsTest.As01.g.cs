// <copyright file="ExtensionsTest.As01.g.cs" company="SuprDewd">Copyright © SuprDewd 2010</copyright>
// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using System.Globalization;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;
using Microsoft.Pex.Engine.Exceptions;

namespace SharpBag
{
    public partial class ExtensionsTest
    {
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As0136701()
{
    int i;
    i = this.As01<int>((object)null, NumberFormatInfo.CurrentInfo, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As0163209()
{
    int i;
    object boxu = (object)(default(uint));
    i = this.As01<int>(boxu, NumberFormatInfo.CurrentInfo, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As0163210()
{
    int i;
    object boxw = (object)(default(ushort));
    i = this.As01<int>(boxw, NumberFormatInfo.CurrentInfo, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As0166401()
{
    int i;
    object boxu = (object)(default(uint));
    PexSafeHelpers.AssignBoxedValue<uint>(boxu, 2147483648u);
    i = this.As01<int>(boxu, NumberFormatInfo.CurrentInfo, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As0163211()
{
    int i;
    object boxf = (object)(default(float));
    i = this.As01<int>(boxf, NumberFormatInfo.CurrentInfo, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As0132102()
{
    int i;
    object boxb = (object)(default(sbyte));
    i = this.As01<int>(boxb, NumberFormatInfo.CurrentInfo, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As0163212()
{
    int i;
    object boxl = (object)(default(long));
    i = this.As01<int>(boxl, NumberFormatInfo.CurrentInfo, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As0163213()
{
    int i;
    object boxw = (object)(default(short));
    i = this.As01<int>(boxw, NumberFormatInfo.CurrentInfo, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As0163214()
{
    int i;
    object boxd = (object)(default(double));
    i = this.As01<int>(boxd, NumberFormatInfo.CurrentInfo, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As0163215()
{
    int i;
    object box = (object)(default(decimal));
    i = this.As01<int>(box, NumberFormatInfo.CurrentInfo, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As0166001()
{
    int i;
    object boxc = (object)(default(char));
    i = this.As01<int>(boxc, NumberFormatInfo.CurrentInfo, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As0132103()
{
    int i;
    object boxb = (object)(default(byte));
    i = this.As01<int>(boxb, NumberFormatInfo.CurrentInfo, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As0130301()
{
    int i;
    object boxb = (object)(default(bool));
    i = this.As01<int>(boxb, NumberFormatInfo.CurrentInfo, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As0163216()
{
    int i;
    object boxl = (object)(default(ulong));
    i = this.As01<int>(boxl, NumberFormatInfo.CurrentInfo, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As0198301()
{
    int i;
    object box = (object)(default(DateTime));
    i = this.As01<int>(box, NumberFormatInfo.CurrentInfo, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As01401()
{
    int i;
    i = this.As01<int>("", NumberFormatInfo.CurrentInfo, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As0163217()
{
    int i;
    object boxi = (object)(default(int));
    i = this.As01<int>(boxi, NumberFormatInfo.CurrentInfo, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As21517()
{
    int i;
    object box = (object)(default(decimal));
    i = this.As<int>(box, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As0136702()
{
    int i;
    i = this.As01<int>((object)null, NumberFormatInfo.CurrentInfo, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As0163218()
{
    int i;
    object boxu = (object)(default(uint));
    i = this.As01<int>(boxu, NumberFormatInfo.CurrentInfo, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As0163219()
{
    int i;
    object boxw = (object)(default(ushort));
    i = this.As01<int>(boxw, NumberFormatInfo.CurrentInfo, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As0166402()
{
    int i;
    object boxu = (object)(default(uint));
    PexSafeHelpers.AssignBoxedValue<uint>(boxu, 2147483648u);
    i = this.As01<int>(boxu, NumberFormatInfo.CurrentInfo, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As0163220()
{
    int i;
    object boxf = (object)(default(float));
    i = this.As01<int>(boxf, NumberFormatInfo.CurrentInfo, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As0132104()
{
    int i;
    object boxb = (object)(default(sbyte));
    i = this.As01<int>(boxb, NumberFormatInfo.CurrentInfo, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As0163221()
{
    int i;
    object boxl = (object)(default(long));
    i = this.As01<int>(boxl, NumberFormatInfo.CurrentInfo, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As0163222()
{
    int i;
    object boxw = (object)(default(short));
    i = this.As01<int>(boxw, NumberFormatInfo.CurrentInfo, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As0163223()
{
    int i;
    object boxd = (object)(default(double));
    i = this.As01<int>(boxd, NumberFormatInfo.CurrentInfo, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As0163224()
{
    int i;
    object box = (object)(default(decimal));
    i = this.As01<int>(box, NumberFormatInfo.CurrentInfo, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As0166002()
{
    int i;
    object boxc = (object)(default(char));
    i = this.As01<int>(boxc, NumberFormatInfo.CurrentInfo, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As0132105()
{
    int i;
    object boxb = (object)(default(byte));
    i = this.As01<int>(boxb, NumberFormatInfo.CurrentInfo, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As0130302()
{
    int i;
    object boxb = (object)(default(bool));
    i = this.As01<int>(boxb, NumberFormatInfo.CurrentInfo, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As0163225()
{
    int i;
    object boxl = (object)(default(ulong));
    i = this.As01<int>(boxl, NumberFormatInfo.CurrentInfo, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As0198302()
{
    int i;
    object box = (object)(default(DateTime));
    i = this.As01<int>(box, NumberFormatInfo.CurrentInfo, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As01402()
{
    int i;
    i = this.As01<int>("", NumberFormatInfo.CurrentInfo, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As0163226()
{
    int i;
    object boxi = (object)(default(int));
    i = this.As01<int>(boxi, NumberFormatInfo.CurrentInfo, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As29401()
{
    int i;
    i = this.As<int>((object)null, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As21518()
{
    int i;
    object box = (object)(default(decimal));
    i = this.As<int>(box, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As0136703()
{
    int i;
    i = this.As01<int>((object)null, NumberFormatInfo.CurrentInfo, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As0163227()
{
    int i;
    object boxu = (object)(default(uint));
    i = this.As01<int>(boxu, NumberFormatInfo.CurrentInfo, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As0163228()
{
    int i;
    object boxw = (object)(default(ushort));
    i = this.As01<int>(boxw, NumberFormatInfo.CurrentInfo, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As0166403()
{
    int i;
    object boxu = (object)(default(uint));
    PexSafeHelpers.AssignBoxedValue<uint>(boxu, 2147483648u);
    i = this.As01<int>(boxu, NumberFormatInfo.CurrentInfo, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As0163229()
{
    int i;
    object boxf = (object)(default(float));
    i = this.As01<int>(boxf, NumberFormatInfo.CurrentInfo, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As0132106()
{
    int i;
    object boxb = (object)(default(sbyte));
    i = this.As01<int>(boxb, NumberFormatInfo.CurrentInfo, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As0163230()
{
    int i;
    object boxl = (object)(default(long));
    i = this.As01<int>(boxl, NumberFormatInfo.CurrentInfo, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As0163231()
{
    int i;
    object boxw = (object)(default(short));
    i = this.As01<int>(boxw, NumberFormatInfo.CurrentInfo, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As0163232()
{
    int i;
    object boxd = (object)(default(double));
    i = this.As01<int>(boxd, NumberFormatInfo.CurrentInfo, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As0163233()
{
    int i;
    object box = (object)(default(decimal));
    i = this.As01<int>(box, NumberFormatInfo.CurrentInfo, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As0166003()
{
    int i;
    object boxc = (object)(default(char));
    i = this.As01<int>(boxc, NumberFormatInfo.CurrentInfo, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As0132107()
{
    int i;
    object boxb = (object)(default(byte));
    i = this.As01<int>(boxb, NumberFormatInfo.CurrentInfo, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As0130303()
{
    int i;
    object boxb = (object)(default(bool));
    i = this.As01<int>(boxb, NumberFormatInfo.CurrentInfo, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As0163234()
{
    int i;
    object boxl = (object)(default(ulong));
    i = this.As01<int>(boxl, NumberFormatInfo.CurrentInfo, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As0198303()
{
    int i;
    object box = (object)(default(DateTime));
    i = this.As01<int>(box, NumberFormatInfo.CurrentInfo, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As01403()
{
    int i;
    i = this.As01<int>("", NumberFormatInfo.CurrentInfo, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As0163235()
{
    int i;
    object boxi = (object)(default(int));
    i = this.As01<int>(boxi, NumberFormatInfo.CurrentInfo, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As21519()
{
    int i;
    object box = (object)(default(decimal));
    i = this.As<int>(box, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void As01ThrowsContractException876()
{
    try
    {
      int i;
      i = this.As01<int>((object)null, (IFormatProvider)null, 0);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As0136704()
{
    int i;
    i = this.As01<int>((object)null, NumberFormatInfo.CurrentInfo, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As0163236()
{
    int i;
    object boxu = (object)(default(uint));
    i = this.As01<int>(boxu, NumberFormatInfo.CurrentInfo, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As0163237()
{
    int i;
    object boxw = (object)(default(ushort));
    i = this.As01<int>(boxw, NumberFormatInfo.CurrentInfo, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As0166404()
{
    int i;
    object boxu = (object)(default(uint));
    PexSafeHelpers.AssignBoxedValue<uint>(boxu, 2147483648u);
    i = this.As01<int>(boxu, NumberFormatInfo.CurrentInfo, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As0163238()
{
    int i;
    object boxf = (object)(default(float));
    i = this.As01<int>(boxf, NumberFormatInfo.CurrentInfo, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As0132108()
{
    int i;
    object boxb = (object)(default(sbyte));
    i = this.As01<int>(boxb, NumberFormatInfo.CurrentInfo, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As0163239()
{
    int i;
    object boxl = (object)(default(long));
    i = this.As01<int>(boxl, NumberFormatInfo.CurrentInfo, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As0163240()
{
    int i;
    object boxw = (object)(default(short));
    i = this.As01<int>(boxw, NumberFormatInfo.CurrentInfo, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As0163241()
{
    int i;
    object boxd = (object)(default(double));
    i = this.As01<int>(boxd, NumberFormatInfo.CurrentInfo, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As0163242()
{
    int i;
    object box = (object)(default(decimal));
    i = this.As01<int>(box, NumberFormatInfo.CurrentInfo, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As0166004()
{
    int i;
    object boxc = (object)(default(char));
    i = this.As01<int>(boxc, NumberFormatInfo.CurrentInfo, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As0132109()
{
    int i;
    object boxb = (object)(default(byte));
    i = this.As01<int>(boxb, NumberFormatInfo.CurrentInfo, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As0130304()
{
    int i;
    object boxb = (object)(default(bool));
    i = this.As01<int>(boxb, NumberFormatInfo.CurrentInfo, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As0163243()
{
    int i;
    object boxl = (object)(default(ulong));
    i = this.As01<int>(boxl, NumberFormatInfo.CurrentInfo, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As0198304()
{
    int i;
    object box = (object)(default(DateTime));
    i = this.As01<int>(box, NumberFormatInfo.CurrentInfo, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As01404()
{
    int i;
    i = this.As01<int>("", NumberFormatInfo.CurrentInfo, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As0163244()
{
    int i;
    object boxi = (object)(default(int));
    i = this.As01<int>(boxi, NumberFormatInfo.CurrentInfo, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As6()
{
    int i;
    object box = (object)(default(DateTime));
    i = this.As<int>(box, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As170()
{
    int i;
    object boxb = (object)(default(bool));
    i = this.As<int>(boxb, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As215()
{
    int i;
    object boxu = (object)(default(uint));
    i = this.As<int>(boxu, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As21501()
{
    int i;
    object boxw = (object)(default(ushort));
    i = this.As<int>(boxw, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As21502()
{
    int i;
    object boxf = (object)(default(float));
    i = this.As<int>(boxf, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As21503()
{
    int i;
    object boxl = (object)(default(long));
    i = this.As<int>(boxl, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As21504()
{
    int i;
    object boxw = (object)(default(short));
    i = this.As<int>(boxw, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As21505()
{
    int i;
    object boxd = (object)(default(double));
    i = this.As<int>(boxd, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As21507()
{
    int i;
    object boxl = (object)(default(ulong));
    i = this.As<int>(boxl, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As21508()
{
    int i;
    object boxi = (object)(default(int));
    i = this.As<int>(boxi, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As568()
{
    int i;
    i = this.As<int>("", 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As763()
{
    int i;
    object boxb = (object)(default(sbyte));
    i = this.As<int>(boxb, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As76301()
{
    int i;
    object boxb = (object)(default(byte));
    i = this.As<int>(boxb, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As928()
{
    int i;
    object boxc = (object)(default(char));
    i = this.As<int>(boxc, 0);
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void As21520()
{
    int i;
    object box = (object)(default(decimal));
    i = this.As<int>(box, 0);
    Assert.AreEqual<int>(0, i);
}
    }
}
