// <copyright file="PriorityQueueTTest.GetEnumerator01.g.cs" company="SuprDewd">Copyright © SuprDewd 2010</copyright>
// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
//
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
//
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using System.Collections.Generic;
using Microsoft.Pex.Framework.Generated;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace SharpBag.Algorithms
{
    public partial class PriorityQueueTTest
    {
        [TestMethod]
        [PexGeneratedBy(typeof(PriorityQueueTTest))]
        public void GetEnumerator016901()
        {
            using (PexDisposableContext disposables = PexDisposableContext.Create())
            {
                PriorityQueue<int> priorityQueue;
                IEnumerator<int> iEnumerator;
                priorityQueue = new PriorityQueue<int>();
                iEnumerator = this.GetEnumerator01<int>(priorityQueue, false);
                disposables.Add((IDisposable)iEnumerator);
                disposables.Dispose();
                Assert.IsNotNull((object)iEnumerator);
                Assert.IsNotNull((object)priorityQueue);
            }
        }

        [TestMethod]
        [PexGeneratedBy(typeof(PriorityQueueTTest))]
        public void GetEnumerator20301()
        {
            using (PexDisposableContext disposables = PexDisposableContext.Create())
            {
                PriorityQueue<int> priorityQueue;
                IEnumerator<int> iEnumerator;
                priorityQueue = new PriorityQueue<int>();
                iEnumerator = this.GetEnumerator<int>(priorityQueue);
                disposables.Add((IDisposable)iEnumerator);
                disposables.Dispose();
                Assert.IsNotNull((object)iEnumerator);
                Assert.IsNotNull((object)priorityQueue);
            }
        }
    }
}