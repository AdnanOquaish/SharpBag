// <copyright file="ExtensionsTest.Fill01.g.cs" company="SuprDewd">Copyright © SuprDewd 2010</copyright>
// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
//
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
//
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using System.Collections.Generic;
using Microsoft.Pex.Engine.Exceptions;
using Microsoft.Pex.Framework.Generated;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace SharpBag
{
    public partial class ExtensionsTest
    {
        [TestMethod]
        [PexGeneratedBy(typeof(ExtensionsTest))]
        public void Fill0157101()
        {
            List<int> list;
            int[] ints = new int[0];
            list = new List<int>((IEnumerable<int>)ints);
            this.Fill01<int>(list, 0);
        }

        [TestMethod]
        [PexGeneratedBy(typeof(ExtensionsTest))]
        public void Fill0168801()
        {
            List<int> list;
            int[] ints = new int[1];
            list = new List<int>((IEnumerable<int>)ints);
            this.Fill01<int>(list, 0);
        }

        [TestMethod]
        [PexGeneratedBy(typeof(ExtensionsTest))]
        public void Fill0110501()
        {
            List<int> list;
            int[] ints = new int[2];
            list = new List<int>((IEnumerable<int>)ints);
            this.Fill01<int>(list, 0);
        }

        [TestMethod]
        [PexGeneratedBy(typeof(ExtensionsTest))]
        public void Fill0157102()
        {
            List<int> list;
            int[] ints = new int[0];
            list = new List<int>((IEnumerable<int>)ints);
            this.Fill01<int>(list, 0);
        }

        [TestMethod]
        [PexGeneratedBy(typeof(ExtensionsTest))]
        public void Fill0168802()
        {
            List<int> list;
            int[] ints = new int[1];
            list = new List<int>((IEnumerable<int>)ints);
            this.Fill01<int>(list, 0);
        }

        [TestMethod]
        [PexGeneratedBy(typeof(ExtensionsTest))]
        public void Fill0110502()
        {
            List<int> list;
            int[] ints = new int[2];
            list = new List<int>((IEnumerable<int>)ints);
            this.Fill01<int>(list, 0);
        }

        [TestMethod]
        [PexGeneratedBy(typeof(ExtensionsTest))]
        public void Fill57101()
        {
            int[] ints = new int[0];
            this.Fill<int>(ints, 0);
        }

        [TestMethod]
        [PexGeneratedBy(typeof(ExtensionsTest))]
        public void Fill68801()
        {
            int[] ints = new int[1];
            this.Fill<int>(ints, 0);
        }

        [TestMethod]
        [PexGeneratedBy(typeof(ExtensionsTest))]
        public void Fill0157103()
        {
            List<int> list;
            int[] ints = new int[0];
            list = new List<int>((IEnumerable<int>)ints);
            this.Fill01<int>(list, 0);
        }

        [TestMethod]
        [PexGeneratedBy(typeof(ExtensionsTest))]
        public void Fill0168803()
        {
            List<int> list;
            int[] ints = new int[1];
            list = new List<int>((IEnumerable<int>)ints);
            this.Fill01<int>(list, 0);
        }

        [TestMethod]
        [PexGeneratedBy(typeof(ExtensionsTest))]
        public void Fill0110503()
        {
            List<int> list;
            int[] ints = new int[2];
            list = new List<int>((IEnumerable<int>)ints);
            this.Fill01<int>(list, 0);
        }

        [TestMethod]
        [PexGeneratedBy(typeof(ExtensionsTest))]
        public void Fill0157104()
        {
            List<int> list;
            int[] ints = new int[0];
            list = new List<int>((IEnumerable<int>)ints);
            this.Fill01<int>(list, 0);
        }

        [TestMethod]
        [PexGeneratedBy(typeof(ExtensionsTest))]
        public void Fill0168804()
        {
            List<int> list;
            int[] ints = new int[1];
            list = new List<int>((IEnumerable<int>)ints);
            this.Fill01<int>(list, 0);
        }

        [TestMethod]
        [PexGeneratedBy(typeof(ExtensionsTest))]
        public void Fill0110504()
        {
            List<int> list;
            int[] ints = new int[2];
            list = new List<int>((IEnumerable<int>)ints);
            this.Fill01<int>(list, 0);
        }
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void Fill01571()
{
    List<int> list;
    int[] ints = new int[0];
    list = new List<int>((IEnumerable<int>)ints);
    this.Fill01<int>(list, 0);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void Fill01688()
{
    List<int> list;
    int[] ints = new int[1];
    list = new List<int>((IEnumerable<int>)ints);
    this.Fill01<int>(list, 0);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void Fill01105()
{
    List<int> list;
    int[] ints = new int[2];
    list = new List<int>((IEnumerable<int>)ints);
    this.Fill01<int>(list, 0);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Fill01ThrowsContractException489()
{
    try
    {
      this.Fill01<int>((List<int>)null, 0);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void Fill0157105()
{
    List<int> list;
    int[] ints = new int[0];
    list = new List<int>((IEnumerable<int>)ints);
    this.Fill01<int>(list, 0);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void Fill0168805()
{
    List<int> list;
    int[] ints = new int[1];
    list = new List<int>((IEnumerable<int>)ints);
    this.Fill01<int>(list, 0);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void Fill0110505()
{
    List<int> list;
    int[] ints = new int[2];
    list = new List<int>((IEnumerable<int>)ints);
    this.Fill01<int>(list, 0);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void Fill105()
{
    int[] ints = new int[2];
    this.Fill<int>(ints, 0);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void FillThrowsContractException184()
{
    try
    {
      this.Fill<int>((int[])null, 0);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
    }
}