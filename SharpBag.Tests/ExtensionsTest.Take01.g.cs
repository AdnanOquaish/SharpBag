// <copyright file="ExtensionsTest.Take01.g.cs" company="SuprDewd">Copyright © SuprDewd 2010</copyright>
// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
//
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
//
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System.Collections.Generic;
using Microsoft.Pex.Framework.Generated;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;

namespace SharpBag
{
    public partial class ExtensionsTest
    {
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
[PexRaisedContractException]
public void Take01ThrowsContractException773()
{
    IEnumerable<int> iEnumerable;
    int[] ints = new int[0];
    iEnumerable = this.Take01<int>((IEnumerable<int>)ints, (int[])null);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void Take01222()
{
    IEnumerable<int> iEnumerable;
    int[] ints = new int[0];
    int[] ints1 = new int[0];
    iEnumerable = this.Take01<int>((IEnumerable<int>)ints, ints1);
    Assert.IsNotNull((object)iEnumerable);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void Take01738()
{
    IEnumerable<int> iEnumerable;
    int[] ints = new int[0];
    int[] ints1 = new int[1];
    ints1[0] = int.MinValue;
    iEnumerable = this.Take01<int>((IEnumerable<int>)ints, ints1);
    Assert.IsNotNull((object)iEnumerable);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
[Ignore]
[PexDescription("the test state was: path bounds exceeded")]
public void Take01433()
{
    IEnumerable<int> iEnumerable;
    int[] ints = new int[1];
    int[] ints1 = new int[1];
    iEnumerable = this.Take01<int>((IEnumerable<int>)ints, ints1);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
[Ignore]
[PexDescription("the test state was: path bounds exceeded")]
public void Take0163()
{
    IEnumerable<int> iEnumerable;
    int[] ints = new int[2];
    int[] ints1 = new int[2];
    iEnumerable = this.Take01<int>((IEnumerable<int>)ints, ints1);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
[Ignore]
[PexDescription("the test state was: path bounds exceeded")]
public void Take01680()
{
    IEnumerable<int> iEnumerable;
    int[] ints = new int[2];
    int[] ints1 = new int[2];
    ints1[1] = 1;
    iEnumerable = this.Take01<int>((IEnumerable<int>)ints, ints1);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
[Ignore]
[PexDescription("the test state was: path bounds exceeded")]
public void Take01624()
{
    IEnumerable<int> iEnumerable;
    int[] ints = new int[3];
    int[] ints1 = new int[3];
    iEnumerable = this.Take01<int>((IEnumerable<int>)ints, ints1);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
[Ignore]
[PexDescription("the test state was: path bounds exceeded")]
public void Take01935()
{
    IEnumerable<int> iEnumerable;
    int[] ints = new int[2];
    int[] ints1 = new int[2];
    ints1[0] = int.MinValue;
    iEnumerable = this.Take01<int>((IEnumerable<int>)ints, ints1);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
[Ignore]
[PexDescription("the test state was: path bounds exceeded")]
public void Take01588()
{
    IEnumerable<int> iEnumerable;
    int[] ints = new int[6];
    int[] ints1 = new int[6];
    ints1[1] = 2;
    ints1[2] = 2;
    ints1[4] = 2;
    ints1[5] = 3;
    iEnumerable = this.Take01<int>((IEnumerable<int>)ints, ints1);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void Take01261()
{
    IEnumerable<int> iEnumerable;
    int[] ints = new int[0];
    int[] ints1 = new int[1];
    ints1[0] = int.MaxValue;
    iEnumerable = this.Take01<int>((IEnumerable<int>)ints, ints1);
    Assert.IsNotNull((object)iEnumerable);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
[PexRaisedException(typeof(IndexOutOfRangeException))]
public void Take01ThrowsIndexOutOfRangeException817()
{
    IEnumerable<int> iEnumerable;
    int[] ints = new int[0];
    int[] ints1 = new int[1];
    ints1[0] = 2147483646;
    iEnumerable = this.Take01<int>((IEnumerable<int>)ints, ints1);
}
    }
}