// <copyright file="ExtensionsTest.AsEnumerable02.g.cs" company="SuprDewd">Copyright © SuprDewd 2010</copyright>
// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
//
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
//
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using System.Collections.Generic;
using Microsoft.Pex.Engine.Exceptions;
using Microsoft.Pex.Framework.Generated;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace SharpBag
{
    public partial class ExtensionsTest
    {
        [TestMethod]
        [PexGeneratedBy(typeof(ExtensionsTest))]
        public void AsEnumerable0258801()
        {
            using (PexDisposableContext disposables = PexDisposableContext.Create())
            {
                IEnumerator<int> iEnumerator;
                IEnumerable<int> iEnumerable;
                int[] ints = new int[0];
                iEnumerator = ((IEnumerable<int>)ints).GetEnumerator();
                disposables.Add((IDisposable)iEnumerator);
                iEnumerable = this.AsEnumerable02<int>(iEnumerator);
                disposables.Dispose();
                Assert.IsNotNull((object)iEnumerable);
            }
        }

        [TestMethod]
        [PexGeneratedBy(typeof(ExtensionsTest))]
        public void AsEnumerable0258802()
        {
            using (PexDisposableContext disposables = PexDisposableContext.Create())
            {
                IEnumerator<int> iEnumerator;
                IEnumerable<int> iEnumerable;
                int[] ints = new int[0];
                iEnumerator = ((IEnumerable<int>)ints).GetEnumerator();
                disposables.Add((IDisposable)iEnumerator);
                iEnumerable = this.AsEnumerable02<int>(iEnumerator);
                disposables.Dispose();
                Assert.IsNotNull((object)iEnumerable);
            }
        }

        [TestMethod]
        [PexGeneratedBy(typeof(ExtensionsTest))]
        public void AsEnumerable0258803()
        {
            using (PexDisposableContext disposables = PexDisposableContext.Create())
            {
                IEnumerator<int> iEnumerator;
                IEnumerable<int> iEnumerable;
                int[] ints = new int[0];
                iEnumerator = ((IEnumerable<int>)ints).GetEnumerator();
                disposables.Add((IDisposable)iEnumerator);
                iEnumerable = this.AsEnumerable02<int>(iEnumerator);
                disposables.Dispose();
                Assert.IsNotNull((object)iEnumerable);
            }
        }

        [TestMethod]
        [PexGeneratedBy(typeof(ExtensionsTest))]
        public void AsEnumerable0258804()
        {
            using (PexDisposableContext disposables = PexDisposableContext.Create())
            {
                IEnumerator<int> iEnumerator;
                IEnumerable<int> iEnumerable;
                int[] ints = new int[0];
                iEnumerator = ((IEnumerable<int>)ints).GetEnumerator();
                disposables.Add((IDisposable)iEnumerator);
                iEnumerable = this.AsEnumerable02<int>(iEnumerator);
                disposables.Dispose();
                Assert.IsNotNull((object)iEnumerable);
            }
        }
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void AsEnumerable02ThrowsContractException259()
{
    try
    {
      IEnumerable<int> iEnumerable;
      iEnumerable = this.AsEnumerable02<int>((IEnumerator<int>)null);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void AsEnumerable02588()
{
    using (PexDisposableContext disposables = PexDisposableContext.Create())
    {
      IEnumerator<int> iEnumerator;
      IEnumerable<int> iEnumerable;
      int[] ints = new int[0];
      iEnumerator = ((IEnumerable<int>)ints).GetEnumerator();
      disposables.Add((IDisposable)iEnumerator);
      iEnumerable = this.AsEnumerable02<int>(iEnumerator);
      disposables.Dispose();
      Assert.IsNotNull((object)iEnumerable);
    }
}
    }
}