// <copyright file="ExtensionsTest.AsEnumerable01.g.cs" company="SuprDewd">Copyright © SuprDewd 2010</copyright>
// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
//
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
//
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using System.Collections.Generic;
using Microsoft.Pex.Engine.Exceptions;
using Microsoft.Pex.Framework.Generated;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace SharpBag
{
    public partial class ExtensionsTest
    {
        [TestMethod]
        [PexGeneratedBy(typeof(ExtensionsTest))]
        public void AsEnumerable0128301()
        {
            IEnumerable<int> iEnumerable;
            int[,,] ints = new int[0, 0, 0];
            iEnumerable = this.AsEnumerable01<int>(ints);
            Assert.IsNotNull((object)iEnumerable);
        }

        [TestMethod]
        [PexGeneratedBy(typeof(ExtensionsTest))]
        public void AsEnumerable56001()
        {
            IEnumerable<int> iEnumerable;
            int[,] ints = new int[0, 0];
            iEnumerable = this.AsEnumerable<int>(ints);
            Assert.IsNotNull((object)iEnumerable);
        }

        [TestMethod]
        [PexGeneratedBy(typeof(ExtensionsTest))]
        public void AsEnumerable0128302()
        {
            IEnumerable<int> iEnumerable;
            int[,,] ints = new int[0, 0, 0];
            iEnumerable = this.AsEnumerable01<int>(ints);
            Assert.IsNotNull((object)iEnumerable);
        }

        [TestMethod]
        [PexGeneratedBy(typeof(ExtensionsTest))]
        public void AsEnumerable56002()
        {
            IEnumerable<int> iEnumerable;
            int[,] ints = new int[0, 0];
            iEnumerable = this.AsEnumerable<int>(ints);
            Assert.IsNotNull((object)iEnumerable);
        }

        [TestMethod]
        [PexGeneratedBy(typeof(ExtensionsTest))]
        public void AsEnumerable0128303()
        {
            IEnumerable<int> iEnumerable;
            int[,,] ints = new int[0, 0, 0];
            iEnumerable = this.AsEnumerable01<int>(ints);
            Assert.IsNotNull((object)iEnumerable);
        }

        [TestMethod]
        [PexGeneratedBy(typeof(ExtensionsTest))]
        public void AsEnumerable56003()
        {
            IEnumerable<int> iEnumerable;
            int[,] ints = new int[0, 0];
            iEnumerable = this.AsEnumerable<int>(ints);
            Assert.IsNotNull((object)iEnumerable);
        }

        [TestMethod]
        [PexGeneratedBy(typeof(ExtensionsTest))]
        public void AsEnumerable0128304()
        {
            IEnumerable<int> iEnumerable;
            int[,,] ints = new int[0, 0, 0];
            iEnumerable = this.AsEnumerable01<int>(ints);
            Assert.IsNotNull((object)iEnumerable);
        }

        [TestMethod]
        [PexGeneratedBy(typeof(ExtensionsTest))]
        public void AsEnumerable56004()
        {
            IEnumerable<int> iEnumerable;
            int[,] ints = new int[0, 0];
            iEnumerable = this.AsEnumerable<int>(ints);
            Assert.IsNotNull((object)iEnumerable);
        }
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void AsEnumerable01ThrowsContractException811()
{
    try
    {
      IEnumerable<int> iEnumerable;
      iEnumerable = this.AsEnumerable01<int>((int[,,])null);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void AsEnumerable01283()
{
    IEnumerable<int> iEnumerable;
    int[,,] ints = new int[0, 0, 0];
    iEnumerable = this.AsEnumerable01<int>(ints);
    Assert.IsNotNull((object)iEnumerable);
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void AsEnumerableThrowsContractException962()
{
    try
    {
      IEnumerable<int> iEnumerable;
      iEnumerable = this.AsEnumerable<int>((int[,])null);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(ExtensionsTest))]
public void AsEnumerable560()
{
    IEnumerable<int> iEnumerable;
    int[,] ints = new int[0, 0];
    iEnumerable = this.AsEnumerable<int>(ints);
    Assert.IsNotNull((object)iEnumerable);
}
    }
}