// <copyright file="ExtensionsTest.Subarray.g.cs" company="SuprDewd">Copyright © SuprDewd 2010</copyright>
// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
//
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
//
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using Microsoft.Pex.Engine.Exceptions;
using Microsoft.Pex.Framework.Generated;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace SharpBag
{
    public partial class ExtensionsTest
    {
        [TestMethod]
        [PexGeneratedBy(typeof(ExtensionsTest))]
        public void Subarray709()
        {
            int[,] ints;
            int[,] ints1
       = Array.CreateInstance(typeof(int), new int[] { 3, 1 }, new int[] { 1, 0 }) as
                   int[,];
            ints = this.Subarray(ints1, 1, 0, 2, 0);
            Assert.IsNotNull((object)ints);
            Assert.AreEqual<int>(2, ints.Rank);
            Assert.AreEqual<int>(0, ints.GetLowerBound(0));
            Assert.AreEqual<int>(2, ints.GetLength(0));
            Assert.AreEqual<int>(0, ints.GetLowerBound(1));
            Assert.AreEqual<int>(1, ints.GetLength(1));
            Assert.AreEqual<int>(0, ints[0, 0]);
            Assert.AreEqual<int>(0, ints[1, 0]);
        }

        [TestMethod]
        [PexGeneratedBy(typeof(ExtensionsTest))]
        public void Subarray142()
        {
            int[,] ints;
            int[,] ints1
       = Array.CreateInstance(typeof(int), new int[] { 1, 3 }, new int[] { 0, -1 }) as
                   int[,];
            ints = this.Subarray(ints1, 0, 0, 0, 1);
            Assert.IsNotNull((object)ints);
            Assert.AreEqual<int>(2, ints.Rank);
            Assert.AreEqual<int>(0, ints.GetLowerBound(0));
            Assert.AreEqual<int>(1, ints.GetLength(0));
            Assert.AreEqual<int>(0, ints.GetLowerBound(1));
            Assert.AreEqual<int>(2, ints.GetLength(1));
            Assert.AreEqual<int>(0, ints[0, 0]);
            Assert.AreEqual<int>(0, ints[0, 1]);
        }

        /*
        [TestMethod]
        [PexGeneratedBy(typeof(ExtensionsTest))]
        [PexRaisedException(typeof(IndexOutOfRangeException))]
        public void SubarrayThrowsIndexOutOfRangeException166()
        {
            int[,] ints;
            int[,] ints1
       = Array.CreateInstance(typeof(int), new int[] { 1, 3 }, new int[] { 0, -2 }) as
                   int[,];
            ints = this.Subarray(ints1, 0, 0, 0, 1);
        }

        [TestMethod]
        [PexGeneratedBy(typeof(ExtensionsTest))]
        [PexRaisedException(typeof(IndexOutOfRangeException))]
        public void SubarrayThrowsIndexOutOfRangeException460()
        {
            int[,] ints;
            int[,] ints1 = Array.CreateInstance
                               (typeof(int), new int[] { 1, 1 }, new int[] { 2078400634, 335539839 }) as int[,];
            ints = this.Subarray(ints1, 0, 0, 0, 0);
        }*/

        [TestMethod]
        [PexGeneratedBy(typeof(ExtensionsTest))]
        public void Subarray305()
        {
            int[,] ints;
            int[,] ints1 = new int[1, 1];
            ints = this.Subarray(ints1, 0, 0, 0, 0);
            Assert.IsNotNull((object)ints);
            Assert.AreEqual<int>(2, ints.Rank);
            Assert.AreEqual<int>(0, ints.GetLowerBound(0));
            Assert.AreEqual<int>(1, ints.GetLength(0));
            Assert.AreEqual<int>(0, ints.GetLowerBound(1));
            Assert.AreEqual<int>(1, ints.GetLength(1));
            Assert.AreEqual<int>(0, ints[0, 0]);
        }

        [TestMethod]
        [PexGeneratedBy(typeof(ExtensionsTest))]
        [PexRaisedContractException(PexExceptionState.Expected)]
        public void SubarrayThrowsContractException966()
        {
            try
            {
                int[,] ints;
                int[,] ints1 = new int[1, 0];
                ints = this.Subarray(ints1, 0, 0, 0, 0);
                throw
                  new AssertFailedException("expected an exception of type ContractException");
            }
            catch (Exception ex)
            {
                if (!PexContract.IsContractException(ex))
                    throw ex;
            }
        }

        [TestMethod]
        [PexGeneratedBy(typeof(ExtensionsTest))]
        [PexRaisedContractException(PexExceptionState.Expected)]
        public void SubarrayThrowsContractException629()
        {
            try
            {
                int[,] ints;
                int[,] ints1 = new int[0, 0];
                ints = this.Subarray(ints1, 0, 0, 0, 0);
                throw
                  new AssertFailedException("expected an exception of type ContractException");
            }
            catch (Exception ex)
            {
                if (!PexContract.IsContractException(ex))
                    throw ex;
            }
        }

        [TestMethod]
        [PexGeneratedBy(typeof(ExtensionsTest))]
        [PexRaisedContractException(PexExceptionState.Expected)]
        public void SubarrayThrowsContractException304()
        {
            try
            {
                int[,] ints;
                ints = this.Subarray((int[,])null, 0, 0, 0, 0);
                throw
                  new AssertFailedException("expected an exception of type ContractException");
            }
            catch (Exception ex)
            {
                if (!PexContract.IsContractException(ex))
                    throw ex;
            }
        }
    }
}